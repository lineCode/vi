// ***************************************************************
//  zdsec_proto   version:  1.0                         
//  ------------------------------------------------------------ 
//  This file was generated by vxgen.exe, don't manually modify.   
//  Hangzhou Zhidu Network Ltd.  (admin@zhidu.biz)               
//  Copyright (C) 2013-2017 - All Rights Reserved
// *************************************************************** 

#pragma once
#ifndef _zdsec_proto_h_
#define _zdsec_proto_h_

#include <zce/zce_config.h>
#include <zce/zce_smartptr.h>
#include <zce/zce_types.h>

namespace gep
{
    enum GepConst
    {
        MSG_HEADER_LEN = 0x0000004c,
        MAX_PACKAGE_LEN = 0x00010000,
        CLIENTID_LENGTH = 0x0000000e,
    };

    enum NET_TYPE
    {
        UDP_TYPE = 0x00000000,
        TCP_TYPE = 0x00000001,
    };

    enum PTL_TYPE
    {
        PTL_UNKNOWN = 0x00000000,
        PTL_GEP = 0x00000001,
        PTL_GAB = 0x00000002,
        PTL_ONVIF = 0x00000003,
        PTL_ZJXC = 0x00000004,
        PTL_SXDL = 0x00000005,
        PTL_RTSP = 0x00000006,
    };

    enum CLIENT_TYPE
    {
        PTL_CLIENT_ADMINISTRATOR = 0x00000041,
        PTL_CLIENT_OPERATOR = 0x0000004f,
    };

    enum OPERATE_TYPE
    {
        PTL_OPERATE_MODIFY = 0x00000001,
        PTL_OPERATE_ADD = 0x00000002,
        PTL_OPERATE_DELETE = 0x00000004,
        PTL_OPERATE_CLEAR = 0x00000008,
    };

    enum ChannelType
    {
        ChannelType_Undefined = 0x00000000,
        ChannelType_VideoIn = 0x00000001,
        ChannelType_VideoOut = 0x00000002,
        ChannelType_AudioIn = 0x00000003,
        ChannelType_AudioOut = 0x00000004,
        ChannelType_AlarmIn = 0x00000005,
        ChannelType_AlarmOut = 0x00000006,
        ChannelType_Trans = 0x00000007,
        ChannelType_Virtual = 0x00000008,
        ChannelType_VideoInCompose = 0x00000009,
    };

    enum E_CHANNEL_STATE
    {
        E_CHANNELSTATE_CONTROLABLE = 0x00000001,
        E_CHANNELSTATE_FRONTRECORDING = 0x00000002,
        E_CHANNELSTATE_CENTERRECORDING = 0x00000004,
        E_CHANNELSTATE_HASVIDEO = 0x00000008,
        E_CHANNELSTATE_MONITORING = 0x00000010,
        E_CHANNELSTATE_LOWBRIGHTNESS = 0x00000020,
        E_CHANNELSTATE_HIGHBRIGHTNESS = 0x00000040,
        E_CHANNELSTATE_LOWCLARITY = 0x00000080,
    };

    enum SerialType
    {
        SerialType_Undefined = 0x00000000 /*未知*/,
        SerialType_Rs485 = 0x00000001 /*RS485*/,
        SerialType_Rs232 = 0x00000002 /*RS232*/,
    };

    enum SerialBaudRate
    {
        SerialBaudRate_Undefined = 0x00000000 /*无效*/,
        SerialBaudRate_600 = 0x00000001,
        SerialBaudRate_1200 = 0x00000002,
        SerialBaudRate_2400 = 0x00000003,
        SerialBaudRate_4800 = 0x00000004,
        SerialBaudRate_9600 = 0x00000005,
        SerialBaudRate_19200 = 0x00000006,
        SerialBaudRate_38400 = 0x00000007,
        SerialBaudRate_57600 = 0x00000008,
        SerialBaudRate_115200 = 0x00000009,
    };

    enum SerialDataBit
    {
        SerialDataBit_Undefined = 0x00000000 /*无效*/,
        SerialDataBit_4 = 0x00000001,
        SerialDataBit_5 = 0x00000002,
        SerialDataBit_6 = 0x00000003,
        SerialDataBit_7 = 0x00000004,
        SerialDataBit_8 = 0x00000005,
    };

    enum SerialStopBit
    {
        SerialStopBit_No = 0x00000000 /*未知*/,
        SerialStopBit_1 = 0x00000001 /*1位*/,
        SerialStopBit_2 = 0x00000002 /*2位*/,
        SerialStopBit_15 = 0x00000003 /*1.5位*/,
    };

    enum SerialParity
    {
        SerialParity_Undefined = 0x00000000 /*未知*/,
        SerialParity_Odd = 0x00000001 /*奇校验*/,
        SerialParity_Even = 0x00000002 /*偶校验*/,
        SerialParity_No = 0x00000003 /*无校验*/,
        SerialParity_Tag = 0x00000004 /*标记位校验*/,
        SerialParity_Space = 0x00000005 /*空格位校验*/,
    };

    enum SerialFlowControl
    {
        SerialFlowControl_No = 0x00000000 /*无流控*/,
        SerialFlowControl_Software = 0x00000001 /*软流控*/,
        SerialFlowControl_HareWare = 0x00000002 /*硬流控*/,
    };

    enum BitRate
    {
        BitRate_128k = 0x00000001,
        BitRate_256k = 0x00000002,
        BitRate_384k = 0x00000003,
        BitRate_512k = 0x00000004,
        BitRate_768k = 0x00000005,
        BitRate_1024k = 0x00000006,
        BitRate_1152k = 0x00000007,
        BitRate_1280k = 0x00000008,
        BitRate_1408k = 0x00000009,
        BitRate_1536k = 0x0000000a,
        BitRate_2048k = 0x0000000b,
        BitRate_2560k = 0x0000000c,
        BitRate_3072k = 0x0000000d,
        BitRate_3584k = 0x0000000e,
        BitRate_4096k = 0x0000000f,
        BitRate_4608k = 0x00000010,
        BitRate_5120k = 0x00000011,
        BitRate_5632k = 0x00000012,
        BitRate_6144k = 0x00000013,
        BitRate_6565k = 0x00000014,
        BitRate_7168k = 0x00000015,
        BitRate_7680k = 0x00000016,
        BitRate_8192k = 0x00000017,
        BitRate_8740k = 0x00000018,
        BitRate_9216k = 0x00000019,
        BitRate_10240k = 0x0000001a,
        BitRate_11264k = 0x0000001b,
        BitRate_12288k = 0x0000001c,
        BitRate_13312k = 0x0000001d,
        BitRate_14336k = 0x0000001e,
        BitRate_15360k = 0x0000001f,
        BitRate_16384k = 0x00000020,
        BitRate_17408k = 0x00000021,
        BitRate_18432k = 0x00000022,
        BitRate_19456k = 0x00000023,
        BitRate_20480k = 0x00000024,
    };

    enum E_LENS_COMMAND
    {
        E_LENS_UP = 0x00000001 /*向上转*/,
        E_LENS_LEFT = 0x00000002 /*向左转*/,
        E_LENS_ROTATE = 0x00000003 /*旋转*/,
        E_LENS_RIGHT = 0x00000004 /*向右转*/,
        E_LENS_DOWN = 0x00000005 /*向下转*/,
        E_LENS_FAR = 0x00000006 /*镜头拉远*/,
        E_LENS_FOCUSNEAR = 0x00000007 /*聚焦*/,
        E_LENS_AUTO = 0x00000008 /*自动*/,
        E_LENS_FOCUSFAR = 0x00000009 /*散焦*/,
        E_LENS_NEAR = 0x0000000a /*镜头拉近*/,
        E_LENS_DIAPHRAGM_LARGE = 0x0000000b /*光圈增大（变亮）*/,
        E_LENS_DIAPHRAGM_SMALL = 0x0000000c /*光圈减小（变暗）*/,
        E_LENS_STOP = 0x0000000d /*停止动作*/,
        E_LENS_SPEAKER_ON = 0x0000000e /*打开喇叭*/,
        E_LENS_LIGHT_ON = 0x0000000f /*打开灯光*/,
        E_LENS_HOTDOG = 0x00000010 /*热狗扫描*/,
        E_LENS_SPEAKER_OFF = 0x00000011 /*关闭喇叭*/,
        E_LENS_LIGHT_OFF = 0x00000012 /*关闭灯光*/,
        E_LENS_PRESET_GOTO = 0x00000013 /*切换到预置点*/,
        E_LENS_PRESET_SET = 0x00000014 /*设置预置点*/,
        E_LENS_PRESET_DEL = 0x00000015 /*删除预置点*/,
        E_LENS_CAMERA_RESET = 0x00000016 /*摄像机复位*/,
        E_LENS_WIPER_ON = 0x00000017 /*打开雨刷*/,
        E_LENS_WIPER_OFF = 0x00000018 /*关闭雨刷*/,
        E_LENS_AUTOCRUISE = 0x0000001d /*自动巡航*/,
        E_LENS_PRESET_CLEAR = 0x0000001e /*清除所有预置点*/,
        E_LENS_STARTTRACKING = 0x0000001f /*启动跟踪*/,
        E_LENS_STOPTRACKING = 0x00000020 /*停止跟踪*/,
        E_LENS_LEFTUP = 0x00000021 /*左上转*/,
        E_LENS_RIGHTUP = 0x00000022 /*右上转*/,
        E_LENS_LEFTDOWN = 0x00000023 /*左下转*/,
        E_LENS_RIGHTDOWN = 0x00000024 /*右下转*/,
        E_LENS_CAMERAACTIVE = 0x00000028 /*摄像机激活*/,
        E_LENS_SETPANSPEED = 0x00000029 /*设置左右转动速度*/,
        E_LENS_SETTILTSPEED = 0x00000030 /*设置上下转动速度*/,
        E_LENS_SETZOOMSPEED = 0x00000031 /*设置光圈速度*/,
        E_LENS_SETFOCUSSPEED = 0x00000032 /*设置聚焦/散焦速度*/,
        E_LENS_SPEEDSETTINGGET = 0x00000033 /*获取摄像机速度设置*/,
        E_LENS_MATRIXSWITCH = 0x00000040 /*矩阵切换*/,
        E_LENS_BRIGHTNESS = 0x00000050 /*亮度*/,
        E_LENS_CONTRAST = 0x00000051 /*对比度*/,
        E_LENS_SATURATION = 0x00000052 /*饱和度*/,
        E_LENS_HUE = 0x00000053 /*色度*/,
        E_LENS_LOCK = 0x000000ff,
    };

    enum VideoResolution
    {
        VideoResolution_NONE = 0x00000000,
        VideoResolution_QCIF = 0x00000001,
        VideoResolution_CIF = 0x00000002,
        VideoResolution_2CIF = 0x00000004,
        VideoResolution_4CIF = 0x00000008,
        VideoResolution_D4 = 0x0000000b,
        VideoResolution_QVGA = 0x00000010,
        VideoResolution_VGA = 0x00000020,
        VideoResolution_WXGA_2 = 0x00000032,
    };

    enum MediaType
    {
        MediaTypeMpeg4 = 0x00000010 /*MPEG4*/,
        MediaTypeMjpeg = 0x00000015 /* MJPEG*/,
        MediaTypeJpeg = 0x00000016 /*JPEG*/,
        MediaTypeMpeg4_2 = 0x0000001f /*MPEG4_2*/,
        MediaTypeSps = 0x00000020 /*SPS*/,
        MediaTypeH264 = 0x00000040 /*H264*/,
        MediaTypeAvs = 0x00000050 /* AVS*/,
        MediaTypeAudioUnknown = 0x00000060 /*UNKNOWN*/,
        MediaTypeStdH264 = 0x00000062 /*标准H264*/,
        MediaTypeStdMpeg4 = 0x00000064 /*标准MPEG4*/,
        MediaTypeG711a = 0x00000070 /*G711A*/,
        MediaTypeG711u = 0x00000071 /*G711U*/,
        MediaTypeG723 = 0x00000072 /*G723*/,
        MediaTypeG722 = 0x00000073 /*G722*/,
        MediaTypeG7221 = 0x00000074 /*G7221*/,
    };

    enum AlarmType
    {
        AlarmType_Reserved = 0x00000000 /*告警保留*/,
        AlarmType_SwitchOn_Old = 0x00000001 /*开关量告警发生*/,
        AlarmType_SwitchOff_Old = 0x00000002 /*开关量告警消失*/,
        AlarmType_VLostOn_Old = 0x00000003 /*前端视频丢失*/,
        AlarmType_VLostOff_Old = 0x00000004 /*前端视频恢复*/,
        AlarmType_VMotionOn_Old = 0x00000005 /*前端视频移动发生*/,
        AlarmType_VMotionOff_Old = 0x00000006 /*前端视频移动停止*/,
        AlarmType_HostOn_Old = 0x00000007 /*告警主机告警发生*/,
        AlarmType_HostOff_Old = 0x00000008 /*告警主机告警解除*/,
        AlarmType_DiskQuota_Old = 0x00000009 /*磁盘限额满*/,
        AlarmType_Noise_Old = 0x0000000a /*噪声分贝值超限告警*/,
        AlarmType_DiskFailure_Old = 0x0000000b /*自定义组合告警*/,
        AlarmType_ExternalHost_Old = 0x0000000d /*外界告警主机触发*/,
        AlarmType_Switch_Old = 0x0000000e /*开关告警*/,
        AlarmType_Failure_Old = 0x0000000f /*故障告警*/,
        AlarmType_Fire = 0x00000011 /*火警探测*/,
        AlramType_Smoke = 0x00000012 /*烟感探测*/,
        AlarmType_Infrared = 0x00000013 /*红外探测*/,
        AlarmType_Temperature = 0x00000014 /*温度探测*/,
        AlarmType_Gas = 0x00000015 /*气体探测*/,
        AlarmType_Manual = 0x00000016 /*人工告警*/,
        AlarmType_Noise = 0x00000017 /*噪声探测*/,
        AlarmType_MenCi = 0x00000018 /*门磁探测*/,
        AlarmType_ShuiJin = 0x00000019 /*水浸探测*/,
        AlarmType_VideoQuality = 0x0000001f /*视频质量告警。子类型: 0=无子类型(不确定的类型)，1=太暗，2=太亮，3=模糊*/,
        AlarmType_Motion = 0x00000020 /*移动侦测*/,
        AlarmType_VideoLost = 0x00000021 /*视频丢失*/,
        AlarmType_VideoEnvelop = 0x00000022 /*视频遮盖*/,
        AlarmType_RecordFailure = 0x00000023 /*前端录像失败*/,
        AlarmType_Brand = 0x00000024 /*车牌抓拍*/,
        AlarmType_Face = 0x00000025 /*人像抓拍*/,
        AlarmType_CheLiangHeiMingDan = 0x00000026 /*布控车辆告警，车辆在黑名单中*/,
        AlarmType_CheLiangShiBie = 0x00000027 /*平台车辆识别，车牌颜色、类型等等的识别*/,
        AlarmType_FeiFaChangRu = 0x00000028 /*安全线闯入*/,
        AlarmType_ManualCapture = 0x00000029 /*手动抓拍*/,
        AlarmType_RenXiangShiBie = 0x0000002a /*平台人像识别*/,
        AlarmType_RenXiangHeiMingDan = 0x0000002b /*布控人像告警，人像在黑名单中*/,
        AlarmType_ChePaiBuZhengchang = 0x0000002c /*中心识别无牌、遮牌车辆*/,
        AlarmType_VideoAnalysis = 0x0000002d /*视频分析*/,
        AlarmType_CameraJitter = 0x0000002e /*相机抖动*/,
        AlarmType_DiskQuota = 0x00000031 /*磁盘限额*/,
        AlarmType_DiskFailure = 0x00000032 /*前端存储故障*/,
        AlarmType_FdLogin = 0x00000033 /*设备上线(由FDMS触发)*/,
        AlarmType_FdLogout = 0x00000034 /*设备下线(由FDMS触发)*/,
        AlarmType_FdOffline = 0x00000035 /*设备下线，并且没有在1分钟之内登陆(由FDMS触发)*/,
        AlarmType_FdAuthFail = 0x00000036 /*FdAuthFail, 鉴权不成功报警*/,
        AlarmType_FdLoginFail = 0x00000037 /*FdLoginFail, 上线不成功报警*/,
        AlarmType_GuardOn = 0x00000041 /*设备布防*/,
        AlarmType_GrardOff = 0x00000042 /*设备撤防*/,
        AlarmType_PingAnZhong = 0x00000043 /*平安钟通知*/,
        AlarmType_GPS = 0x00000044 /*GPS信息上报*/,
        AlarmType_HuanbaoShujuCaiji = 0x00000050 /*环保数据采集*/,
        AlarmType_LiuliangChaobiao = 0x00000051 /*流量超标*/,
        AlarmType_YeweiChaobiao = 0x00000052 /*液位超标*/,
        AlarmType_PH = 0x00000053 /*PH值超标*/,
        AlarmType_CheliangChaoshu = 0x00000060 /*车辆超速*/,
        AlarmType_ChelinagNixing = 0x00000061 /*车辆逆行*/,
        AlarmType_CheliangDishu = 0x00000062 /*车辆低速*/,
        AlarmType_CheliangChedao = 0x00000063 /*车辆不按规定车道行驶*/,
        AlarmType_CheliangWeifanJingzhiBiaoxian = 0x00000064 /*车辆违反禁止标线指示*/,
        AlarmType_CheliangWeifanJinglingBiaozhi = 0x00000065 /*车辆违反禁令标志指示*/,
        AlarmType_CheliangJiaotongXinghaodeng = 0x00000066 /*不按交通信号灯规定通行*/,
    };

    enum ECameraControlType
    {
        E_CAMERA_SHUTTER = 0x00000001 /* 快门*/,
        E_CAMERA_GAIN = 0x00000002 /* 增益 */,
        E_CAMERA_EXPOSURE = 0x00000003 /* 曝光参数*/,
        E_CAMERA_CONTRAST = 0x00000004 /* 对比度*/,
        E_CAMERA_BRIGHT = 0x00000005 /* 亮度*/,
        E_CAMERA_GAMMA = 0x00000006 /* GAMMA*/,
        E_CAMERA_APERTURE = 0x00000007 /* 光圈*/,
        E_CAMERA_MAXNIGHTEV = 0x00000008 /*日夜转换EV*/,
        E_CAMERA_POLARISCOPEEV = 0x00000009 /*偏振镜衰减EV*/,
        E_CAMERA_WDR = 0x0000000a /* 宽动态*/,
        E_CAMERA_MAX_CP = 0x0000000b /* 最大的摄像机属性*/,
        E_CAMERA_DIGITAL_GAIN = 0x0000000c /*数字增益*/,
        E_CAMERA_FLASH_SHUTTER = 0x0000000d /* 抓拍快门*/,
        E_CAMERA_FLASH_GAIN = 0x0000000e /* 抓拍增益 */,
        E_CAMERA_SHARP = 0x0000000f /*图像锐度*/,
    };

    enum ECameraControlManner
    {
        E_CAMERA_AUTO = 0x00000001 /* 自动 */,
        E_CAMERA_FIX = 0x00000002 /* 固定 */,
        E_CAMERA_RANGE = 0x00000004 /* 范围内自动 */,
        E_CAMERA_RANGE2 = 0x00000008 /* 两段范围内自动 */,
        E_CAMERA_MODE_ENABLE = 0x00000010 /* 启用 */,
        E_CAMERA_MODE_DISABLE = 0x00000020 /* 禁用 */,
    };

    enum EOsdType
    {
        OSD_TIME = 0x00000000,
        OSD_SPEED = 0x00000001,
        OSD_LANE = 0x00000002,
        OSD_LIMITEDSPEED = 0x00000003,
        OSD_PLATE = 0x00000004,
        OSD_COLOR = 0x00000005,
        OSD_CARTYPE = 0x00000006,
        OSD_DIR = 0x00000007,
        OSD_CARMODEL = 0x00000008,
        OSD_CARLEN = 0x00000009,
        OSD_ILLEGALCODE = 0x0000000a,
        OSD_ILLEGALACTION = 0x0000000b,
        OSD_OVERSPEEDRATE = 0x0000000c,
        OSD_REDSTARTTIME = 0x0000000d,
        OSD_REDENDTIME = 0x0000000e,
        OSD_REDPASSTIME = 0x0000000f,
        OSD_CHECKSUM = 0x00000010,
        OSD_SNAPCODE = 0x00000011,
        OSD_BELL = 0x00000012,
        OSD_ADDRESS = 0x00000013,
        OSD_ROADID = 0x00000014,
        OSD_DEVICEID = 0x00000015,
        OSD_ROADDIRID = 0x00000016,
        OSD_ROADDIR = 0x00000017,
        OSD_MONITORINFO1 = 0x00000018,
        OSD_MONITORINFO2 = 0x00000019,
        OSD_LANENAME = 0x0000001a,
    };

    enum EWifiAuthenType
    {
        E_WIFI_AUTHEN_WEP = 0x00000001,
        E_WIFI_AUTHEN_WPA = 0x00000002,
    };

    enum EPicMergeType
    {
        E_PicMerge_None = 0x00000000 /*不合成*/,
        E_PicMerge_1_T_UPDOWN = 0x00000010 /*1张 特写在上*/,
        E_PicMerge_1_T_LEFTRIGHT = 0x00000011 /*1张 特写在左*/,
        E_PicMerge_1_P_UPDOWN = 0x00000012 /*1张 特写在下*/,
        E_PicMerge_1_P_LEFTRIGHT = 0x00000013 /*1张 特写在右*/,
        E_PicMerge_2_UPDOWN = 0x00000020 /*2张 上下合成*/,
        E_PicMerge_2_LEFTRIGHT = 0x00000021 /*2张 左右合成*/,
        E_PicMerge_3_UPDOWN = 0x00000030 /*3张 上下合成*/,
        E_PicMerge_3_LEFTRIGHT = 0x00000031 /*3张 左右合成*/,
        E_PicMerge_3_UP = 0x00000032 /*3张 品字合成*/,
        E_PicMerge_3_DOWN = 0x00000033 /*3张 倒品字合成*/,
        E_PicMerge_3_T_Big = 0x00000034 /*特写+3张 田字合成 四倍大小*/,
        E_PicMerge_3_T_Normal = 0x00000035 /*特写+3张 田字合成 一倍大小*/,
        E_PicMerge_3_BIG_T = 0x00000036 /*3张+特写 田字合成 四倍大小*/,
        E_PicMerge_3_Normal_T = 0x00000037 /*3张+特写 田字合成 一倍大小*/,
    };

    enum EConfigMask
    {
        E_ConfigMask_SnapOSD = 0x00000001 /*OSD 配置*/,
        E_ConfigMask_Smart = 0x00000002 /*智能算法 配置*/,
        E_ConfigMask_PicMerge = 0x00000004 /*图片合成配置*/,
        E_ConfigMask_Codec = 0x00000008 /*编码配置*/,
        E_ConfigMask_FlashLight = 0x00000010 /*闪光灯配置*/,
        E_ConfigMask_Capture = 0x00000020 /*抓拍车道参数*/,
    };

    enum EConfigMajorType
    {
        E_CfgMajorType_ConfigImport = 0x00000001 /*配置导入*/,
        E_CfgMajorType_ConfigExport = 0x00000002 /*配置导出*/,
        E_CfgMajorType_ResetModel = 0x00000003 /*重置算法模型*/,
    };

    enum EConfigMinorType
    {
        E_CfgMinorType_ConfigImport_All = 0x00000001 /*配置全部导入*/,
        E_CfgMinorType_ConfigImport_Part = 0x00000002 /*部分导入*/,
    };

    enum PROTOCOL_ERRORCODE
    {
        PTL_OK = 0x00000000,
        PTL_SUCCESS_COMMON_BASE = 0x00010000 /*UAS BASE*/,
        PTL_SUCCESS_UA_BASE = 0x00020000,
        PTL_SUCCESS_UA_UPDATE = 0x00020001,
        PTL_SUCCESS_UA_REDIRECT = 0x00020002,
        PTL_SUCCESS_UA_LOGINREPLACED = 0x00020003,
        PTL_SUCCESS_FD_BASE = 0x00030000,
        PTL_SUCCESS_AAA_BASE = 0x00040000,
        PTL_SUCCESS_MSS_BASE = 0x00050000,
        PTL_SUCCESS_DBMS_BASE = 0x00060000,
        PTL_SUCCESS_FDMS_BASE = 0x00070000,
        PTL_SUCCESS_CMS_BASE = 0x00080000,
        PTL_ERROR_COMMON_BASE = 0x80010000,
        PTL_ERROR_COMMON_UNPACK = 0x80010001,
        PTL_ERROR_COMMON_PACK = 0x80010002,
        PTL_ERROR_COMMON_SERVICE_UNAVAILABLE = 0x80010003,
        PTL_ERROR_COMMON_CMDERROR = 0x80010004,
        PTL_ERROR_COMMON_NODBMSPROXY = 0x80010005,
        PTL_ERROR_COMMON_NOFDMSPROXY = 0x80010006,
        PTL_ERROR_COMMON_NOMSSPROXY = 0x80010007,
        PTL_ERROR_COMMON_DBMSFAIL = 0x80010008,
        PTL_ERROR_COMMON_DBMS_NORECORD = 0x80010009,
        PTL_ERROR_COMMON_MSSFAIL = 0x8001000a,
        PTL_ERROR_COMMON_FDMSFAIL = 0x8001000b,
        PTL_ERROR_COMMON_ICEEXCEPTION = 0x8001000c,
        PTL_ERROR_COMMON_RESULTERROR = 0x8001000d,
        PTL_ERROR_COMMON_MONITOR_IN_PROCESS = 0x8001000e,
        PTL_ERROR_COMMON_MONITOR_NOT_IN_PROCESS = 0x8001000f,
        PTL_ERROR_COMMON_RECORD_IN_PROCESS = 0x80010010,
        PTL_ERROR_COMMON_RECORD_NOT_IN_PROCESS = 0x80010011,
        PTL_ERROR_COMMON_DOWNLOAD_IN_PROCESS = 0x80010012,
        PTL_ERROR_COMMON_DOWNLOAD_NOT_IN_PROCESS = 0x80010013,
        PTL_ERROR_COMMON_PLAYBACK_IN_PROCESS = 0x80010014,
        PTL_ERROR_COMMON_PLAYBACK_NOT_IN_PROCESS = 0x80010015,
        PTL_ERROR_COMMON_USER_CANCELED = 0x80010016 /*操作已被用户取消，例如发送STOP*/,
        PTL_ERROR_COMMON_NOTSUPPORT = 0x80010017 /*功能不支持*/,
        PTL_ERROR_COMMON_RECORD_TIME = 0x80010018,
        PTL_ERROR_COMMON_REACH_MAX = 0x80010019,
        PTL_ERROR_COMMON_INVALID_PARAM = 0x8001001b /*参数错误*/,
        PTL_ERROR_COMMON_REACH_CUSTOMERMAX = 0x8001001c,
        PTL_ERROR_COMMON_TIME = 0x8001001d /*时间错误，在抓拍、录像等需要指定时间的指令中，时间无效*/,
        PTL_ERROR_COMMON_LOCKED = 0x8001001e /*设备被锁住，在云台控制命令中，云台被其他用户锁住*/,
        PTL_ERROR_COMMON_REMOTE_DOMAIN_OFFLINE = 0x8001001f /*跨域服务器未在线*/,
        PTL_ERROR_COMMON_VERSION_TOOLD = 0x80010020 /*版本太旧*/,
        PTL_ERROR_COMMON_BUSY = 0x80010021 /*太忙*/,
        PTL_ERROR_COMMON_ONLY_LOCAL = 0x80010022 /*非本平台设备不支持*/,
        PTL_ERROR_UA_BASE = 0x80020000,
        PTL_ERROR_UA_NOTEXIST = 0x80020001,
        PTL_ERROR_UA_OUTOFDATE = 0x80020002,
        PTL_ERROR_UA_LOGINFAIL = 0x80020003,
        PTL_ERROR_UA_NOPRIVILEGE = 0x80020004,
        PTL_ERROR_UA_ERRORTYPE = 0x80020005,
        PTL_ERROR_UA_EMAILEXISTED = 0x80020006,
        PTL_ERROR_UA_CMDNOCONTENT = 0x80020007,
        PTL_ERROR_UA_NOTSPECIFIED = 0x80020008,
        PTL_ERROR_UA_UACANCELED = 0x80020009,
        PTL_ERROR_UA_CLIENTCANCELED = 0x8002000a,
        PTL_ERROR_FD_BASE = 0x80030000,
        PTL_ERROR_AAA_BASE = 0x80040000,
        PTL_ERROR_AAA_UNKNOWN = 0x80040001 /*未知原因错误*/,
        PTL_ERROR_AAA_INVALIDPACKET = 0x80040002 /*Radius包不合法*/,
        PTL_ERROR_AAA_MISSATTRIBUTE = 0x80040003 /*Radius包缺少必要的属性*/,
        PTL_ERROR_AAA_INTERNAL = 0x80040004 /*AAA服务器发生内部错误*/,
        PTL_ERROR_AAA_DBMS = 0x80040005 /*AAA服务器操作数据库失败*/,
        PTL_ERROR_AAA_STOPPED = 0x80040006 /*AAA服务器停止服务*/,
        PTL_ERROR_AAA_PASSWORD = 0x80040007 /*密码错误*/,
        PTL_ERROR_AAA_BADUSERID = 0x80040008 /*用户ID不存在*/,
        PTL_ERROR_AAA_BADDEVID = 0x80040009 /*设备ID不存在*/,
        PTL_ERROR_AAA_BADCHANNEL = 0x8004000a /*设备通道号不存在*/,
        PTL_ERROR_AAA_FORBIDDEN = 0x8004000b /*没有权限执行所请求的操作*/,
        PTL_ERROR_AAA_NOMONEY = 0x8004000c /*费用不足*/,
        PTL_ERROR_AAA_NODISK = 0x8004000d /*磁盘配额不足*/,
        PTL_ERROR_AAA_CUSTOMERSTATUS = 0x8004000e /*客户状态不正常*/,
        PTL_ERROR_AAA_USERSTATUS = 0x8004000f /*用户状态不正常*/,
        PTL_ERROR_AAA_USERIPDENIED = 0x80040010 /*用户IP地址拒绝*/,
        PTL_ERROR_AAA_SMSCODEFAIL = 0x80040011 /*短信登录次数超出*/,
        PTL_ERROR_AAA_SMSBAD = 0x80040012 /*短信验证码错误*/,
        PTL_ERROR_AAA_SMSSENDFAILED = 0x80040013 /*短信验证码发送失败*/,
        PTL_ERROR_AAA_MACDENIED = 0x80040014 /*MAC地址拒绝*/,
        PTL_ERROR_MSS_BASE = 0x80050000,
        PTL_ERROR_MSS_BUSY = 0x80050100 /*MSS服务忙*/,
        PTL_ERROR_MSS_SCHEDULE_FD = 0x80050101 /*MSS调度FD失败*/,
        PTL_ERROR_MSS_SCHEDULE_RTMDS = 0x80050102 /*MSS调度RTMDS失败*/,
        PTL_ERROR_MSS_SCHEDULE_SMS = 0x80050103 /*MSS调度SMS失败*/,
        PTL_ERROR_MSS_SCHEDULE_FTS = 0x80050104 /*MSS调度FTS失败*/,
        PTL_ERROR_MSS_SCHEDULE_CSS = 0x80050105 /*MSS调度CSS失败*/,
        PTL_ERROR_MSS_SCHEDULE_CANCELLED = 0x80050106 /*MSS调度被取消*/,
        PTL_ERROR_MSS_FD_OFFLINE = 0x80050200 /*FD未在线, 或在VPN内*/,
        PTL_ERROR_MSS_FD_CHANNEL_INVALID = 0x80050201 /*FD未在线*/,
        PTL_ERROR_MSS_FD_BUSY = 0x80050202 /*FD忙*/,
        PTL_ERROR_MSS_FD_NO_RIGHT = 0x80050203 /*FD访问未被授权*/,
        PTL_ERROR_MSS_FD_FAILTURE = 0x80050204 /*FD操作失败*/,
        PTL_ERROR_MSS_FD_RETURN_ERROR = 0x80050205 /*FD返回错误*/,
        PTL_ERROR_MSS_FD_PACKAGE_ERROR = 0x80050206 /*FD打包错误*/,
        PTL_ERROR_MSS_FDMS_OFFLINE = 0x80050300 /*FDMS服务未在线 0x300*/,
        PTL_ERROR_MSS_FDMS_TIMEOUT = 0x80050301 /*FDMS服务响应超时*/,
        PTL_ERROR_MSS_FDMS_FAILTURE = 0x80050302 /*FDMS服务响应失败*/,
        PTL_ERROR_MSS_RTMDS_OFFLINE = 0x80050400 /*RTMDS服务未在线 0x400*/,
        PTL_ERROR_MSS_RTMDS_TIMEOUT = 0x80050401 /*RTMDS服务响应超时*/,
        PTL_ERROR_MSS_RTMDS_FAILTURE = 0x80050402 /*RTMDS服务响应失败*/,
        PTL_ERROR_MSS_SMS_OFFLINE = 0x80050500 /*SMS服务未在线  0x500*/,
        PTL_ERROR_MSS_SMS_TIMEOUT = 0x80050501 /*SMS服务响应超时*/,
        PTL_ERROR_MSS_SMS_FAILTURE = 0x80050502 /*SMS服务响应失败*/,
        PTL_ERROR_MSS_SMS_NO_FILE = 0x80050503 /*SMS服务响应文件不存在*/,
        PTL_ERROR_MSS_FTS_OFFLINE = 0x80050600 /*FTS服务未在线 0x600*/,
        PTL_ERROR_MSS_FTS_TIMEOUT = 0x80050601 /*FTS服务响应超时*/,
        PTL_ERROR_MSS_FTS_FAILTURE = 0x80050602 /*FTS服务响应失败*/,
        PTL_ERROR_MSS_FTS_NO_FILE = 0x80050603 /*FTS服务响应文件不存在*/,
        PTL_ERROR_MSS_CSS_OFFLINE = 0x80050700 /*CSS服务未在线 0x700*/,
        PTL_ERROR_MSS_CSS_TIMEOUT = 0x80050701 /*CSS服务响应超时*/,
        PTL_ERROR_MSS_CSS_FAILTURE = 0x80050702 /*CSS服务响应失败*/,
        PTL_ERROR_MSS_CSS_NO_FILE = 0x80050703 /*CSS服务响应文件不存在*/,
        PTL_ERROR_MSS_CSS_RECORDING = 0x80050704 /*CSS服务响应正在录像*/,
        PTL_ERROR_MSS_CSS_BUSY = 0x80050705 /*CSS服务响应忙*/,
        PTL_ERROR_MSS_CSS_DISK_FULL = 0x80050706 /*CSS服务响应磁盘已满*/,
        PTL_ERROR_MSS_CSS_DISK_QUOTA = 0x80050707 /*CSS服务响应磁盘限额*/,
        PTL_ERROR_MSS_CSS_RECORD_STOP = 0x80050708 /*CSS服务报告录像停止*/,
        PTL_ERROR_MSS_CSS_RECORD_EXPIRE = 0x80050709 /*CSS服务报告录像时间到达*/,
        PTL_ERROR_MSS_CSS_RECORD_QUOTA = 0x8005070a /*CSS服务报告录像磁盘限额满*/,
        PTL_ERROR_MSS_CSS_RECORD_NETWORKIO = 0x8005070b /*CSS服务报告录像网络IO错误*/,
        PTL_ERROR_MSS_CSS_RECORD_FILEIO = 0x8005070c /*CSS服务报告录像文件IO错误*/,
        PTL_ERROR_MSS_CSS_RECORD_STOPBYCMS = 0x8005070d /*CSS服务报告录像被系统管理员停止*/,
        PTL_ERROR_MSS_CSS_RECORD_NOPACKET = 0x8005070e /*CSS服务报告录像在一定的秒内接收到的数据包太少*/,
        PTL_ERROR_MSS_CSS_RECORD_NOFRAME = 0x8005070f /*CSS服务报告录像在一定的秒内接收到的数据包所组成的帧数为0*/,
        PTL_ERROR_MSS_SSU_OFFLINE = 0x80050d00,
        PTL_ERROR_MSS_SSU_TIMEOUT = 0x80050d01,
        PTL_ERROR_MSS_SSU_FAILTURE = 0x80050d02,
        PTL_ERROR_MSS_SID_MISMATCH = 0x80059000 /*返回来的sessionid不匹配*/,
        PTL_ERROR_DBMS_BASE = 0x80060000,
        PTL_ERROR_DBMS_QUERY_FD_DOMAIN = 0x80060001,
        PTL_ERROR_DBMS_CUSTOM_NOTEXISTS = 0x80060002 /*DBMS查询客户不存在*/,
        PTL_ERROR_FDMS_BASE = 0x80070000 /*generic error*/,
        PTL_ERROR_FDMS_DBMS = 0x80075000 /*fdms-dbms error*/,
        PTL_ERROR_FDMS_FD_BASE = 0x80077000 /*fd generic error*/,
        PTL_ERROR_FDMS_FD_TOO_MANY = 0x80077001 /*too many fd                                    1*/,
        PTL_ERROR_FDMS_FD_BAD_STATE = 0x80077002 /*fd bad state, disabled in dbms                2*/,
        PTL_ERROR_FDMS_FD_LICENSE = 0x80077003 /*license, too many fd                            3*/,
        PTL_ERROR_FDMS_FD_MSG_SENDFAILED = 0x80077004 /*failed send msg to fd                    4*/,
        PTL_ERROR_FDMS_FD_MULTI_LOGIN = 0x80077005 /*login more than 1 time                      5*/,
        PTL_ERROR_FDMS_FD_CANCELED = 0x80077006 /*canceled                                       6*/,
        PTL_ERROR_FDMS_FD_NOT_IN_DB = 0x80077007 /*fd not in the database                        7*/,
        PTL_ERROR_FDMS_FD_EXCEPTION = 0x80077008 /*fd response exception, such as unpack failed  8*/,
        PTL_ERROR_FDMS_FD_BAD_FDID = 0x80077009 /*bad fdid, such as length != 18                 9*/,
        PTL_ERROR_FDMS_FD_TIMEOUT = 0x8007700a /*fd response timeout                             a*/,
        PTL_ERROR_FDMS_FD_NOT_EXIST = 0x8007700b /*fd not online                                 b*/,
        PTL_ERROR_FDMS_FD_FACTORY = 0x8007700c /*fd factory license, too many fd                 c*/,
        PTL_ERROR_FDMS_FD_PTZLOCKED = 0x8007700d /*ptz locked                                    d*/,
        PTL_ERROR_FDMS_BUSY = 0x8007700e /*too many fd logining, please wait                     e*/,
        PTL_ERROR_FDMS_FD_NOTSUPPORTED = 0x8007700f /*not supported by fd                        f*/,
        PTL_ERROR_FDMS_BAD_FACTORY = 0x80077010 /*factory not exist*/,
        PTL_ERROR_FDMS_AAA = 0x80078000,
        PTL_ERROR_FDMS_AAA_PARAM = 0x80078001 /*fd login failed because of bad parameter*/,
        PTL_ERROR_FDMS_AAA_AUTH = 0x80078002 /*fd login failed because of bad password*/,
        PTL_ERROR_CMS_BASE = 0x80080000,
        PTL_ERROR_CMS_NAMEID_INDEX_OVERFLOW = 0x80080001 /*下标层次越界*/,
        PTL_ERROR_CMS_ID_NOTEXIST = 0x80080002 /*对象不存在*/,
        PTL_ERROR_CMS_TRAP_NOTSETABLE = 0x80080003 /*对象不可设置*/,
        PTL_ERROR_CMS_CLASS_NOTEXIST = 0x80080004 /*类不存在*/,
        PTL_ERROR_CMS_METHOD_NOTEXIST = 0x80080005 /*方法不存在*/,
        PTL_ERROR_CMS_MEMBER_NOTEXIST = 0x80080006 /*成员不存在*/,
        PTL_ERROR_PARALLEL_INTERVAL = 0x10000000,
        PTL_ERROR_PARALLEL_BASE = 0x90090000,
        PTL_ERROR_PARALLEL_TIMEOUT = 0x90090001,
        PTL_ERROR_PARALLEL_DOMAINNOTEXIST = 0x90090002,
        PTL_ERROR_PARALLEL_XMLPACK = 0x90090003,
        PTL_ERROR_PARALLEL_XMLUNPACK = 0x90090004,
        PTL_ERROR_PARALLEL_UPACKFDMSRES = 0x90090005,
    };

    struct GEP_HEADER_T
    {

        GEP_HEADER_T()
        :magic(0)
        ,version(0)
        ,compress_flag(0)
        ,msg_type(0)
        ,msg_len(0)
        ,ie_num(0)
        ,seq_num(0)
        ,session_id(0)
        ,reserve(0)
        ,check_sum(0)
        {
        }

        zce_uint16    magic/*本协议的特殊标记，值始终为GE的ASCII（0x47,0x45）*/;
        zce_uint16    version/*协议版本号: 0x0002表示V2; 0x0003表示V3（该版本将MessageLength字段设为0，而启用Reserved字段表示整个消息包长度，同时所有IE的Length字段有2字节改为4字节）*/;
        zce_uint16    compress_flag/*是否压缩: 0表示未压缩; 1: BZIP2; 其他非负数表示对应的压缩算法*/;
        zce_uint16    msg_type/*消息类型*/;
        zce_uint16    msg_len/*整个消息包长度，不包含消息头*/;
        zce_uint16    ie_num/*数据包中包含IE的个数，不包含消息头*/;
        zce_uint32    seq_num/*包序号（从启动开始依次递增，应答消息应与相应请求消息中保持一致）*/;
        zce_uint32    session_id/*会话ID（每次连接该字段均不同，同一次连接所有数据包保持一致）*/;
        zce_astring src_dmn;
        zce_astring src_id;
        zce_astring dst_dmn;
        zce_astring dst_id;
        zce_uint32    reserve/*保留字段（在V3版本中，用来表示整个消息包长度，不包含消息头）*/;
        zce_uint32    check_sum/*对整个数据包的完整性校验值，采用CRC算法来计算，为计算CRC值时，请将其设为0*/;
    };
    struct GENERAL_INFO
    {
        GENERAL_INFO() { };
        zce_astring name/*名称*/;
        zce_astring desc/*详细描述*/;
    };
    struct GENERAL_POINT
    {

        GENERAL_POINT()
        :x(0)
        ,y(0)
        {
        }

        zce_int16    x;
        zce_int16    y;
    };
    struct GENERAL_RECT
    {

        GENERAL_RECT()
        :left(0)
        ,top(0)
        ,right(0)
        ,bottom(0)
        {
        }

        zce_uint16    left;
        zce_uint16    top;
        zce_uint16    right;
        zce_uint16    bottom;
    };
    struct GENERAL_LINE
    {
        GENERAL_LINE() { };
        GENERAL_POINT    p0;
        GENERAL_POINT    p1;
    };
    struct CHANNEL_ID
    {

        CHANNEL_ID()
        :type(0)
        ,no(0)
        {
        }

        zce_uint16    type/*通道类型*/;
        zce_uint16    no/*通道号*/;
    };
    struct CHANNEL_INFO
    {

        CHANNEL_INFO()
        :direction(0)
        ,qos(0)
        ,payload(0)
        ,resolution(0)
        ,frame(0)
        ,frame_interval(0)
        ,time(0)
        ,max_bitrate(0)
        {
        }

        zce_byte    direction/*通道方向: 0x01 FD->UA; 0x02 UA->FD; 0x03 双工*/;
        zce_byte    qos/*QoS级别: 0未定义; 1用于互联网通用终端; 2用于3G网络通用手机终端; 3用于3G网络WINCE手机终端; 4用于EVDO网络; 5用于WiFi网络; 6用于解码上墙(使用MGS)*/;
        zce_byte    payload/*编码格式H.264/MPEG4/G.711/G.7231等*/;
        zce_byte    resolution/*视频大小格式QCIF/CIF/4CIF等*/;
        zce_uint16    frame/*视频帧率*/;
        zce_uint16    frame_interval/*视频I帧间隔*/;
        zce_uint32    time/*音频单帧时长 */;
        zce_uint32    max_bitrate/*最大码率，单位Kbps*/;
    };
    struct CHANNEL_STATUS
    {

        CHANNEL_STATUS()
        :channel_type(0)
        ,channel_no(0)
        ,record_status(0)
        ,monitor_status(0)
        ,replay_status(0)
        ,download_status(0)
        ,video_format(0)
        ,video_resolution(0)
        ,store_totalcapacity(0)
        ,store_sparecapacity(0)
        ,bit_rate(0)
        {
        }

        zce_uint16    channel_type/*通道类型*/;
        zce_uint16    channel_no/*通道编号（设备内唯一）*/;
        zce_byte    record_status/*是否正在本地录像0x00:否0x01:是*/;
        zce_byte    monitor_status/*是否正在监控,0x00:否0x01:是*/;
        zce_byte    replay_status/*是否正在回放0x00:否0x01:是*/;
        zce_byte    download_status/*是否正在下载0x00:否0x01:是*/;
        zce_uint16    video_format/*当前视频编码格式 ,参见视频编码格式表*/;
        zce_uint16    video_resolution/*当前视频显示格式, ,参见视频显示格式表*/;
        zce_uint32    store_totalcapacity/*存储总容量，单位：MB*/;
        zce_uint32    store_sparecapacity/*存储剩余容量，单位：MB*/;
        zce_uint32    bit_rate/*当前发送码流,，单位：kbps*/;
    };
    struct CHANNEL_STATUS_SIMPLE
    {

        CHANNEL_STATUS_SIMPLE()
        :channel_type(0)
        ,channel_no(0)
        ,channel_status(0)
        ,channel_status_mask(0)
        {
        }

        zce_uint16    channel_type/*通道类型*/;
        zce_uint16    channel_no/*通道编号（设备内唯一）*/;
        zce_uint32    channel_status/*通道状态，参考后面枚举定义*/;
        zce_uint32    channel_status_mask/*本次修改的位号掩码*/;
    };
    struct PRESET_PLAN
    {

        PRESET_PLAN()
        :preset_no(0)
        ,begin_hour(0)
        ,begin_minute(0)
        ,end_hour(0)
        ,end_minute(0)
        {
        }

        zce_uint16    preset_no;
        zce_uint16    begin_hour;
        zce_uint16    begin_minute;
        zce_uint16    end_hour;
        zce_uint16    end_minute;
    };
    struct VIDEOIN_CHANNEL
    {

        VIDEOIN_CHANNEL()
        :format(0)
        ,resolution(0)
        ,frame_rates(0)
        ,iframe_interval(0)
        ,bit_rates(0)
        ,lost_detect(0)
        ,lost_percent(0)
        ,priority(0)
        ,alarm_min_region_num(0)
        ,alarm_max_region_num(0)
        ,status(0)
        ,store_type(0)
        ,record_type(0)
        ,total_capacity(0)
        ,spare_capacity(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*视频编码格式,参见视频编码格式表*/;
        zce_byte    resolution/*支持的视频显示格式,参见视频显示表*/;
        zce_byte    frame_rates/*帧率1～25*/;
        zce_uint16    iframe_interval/*关键帧间隔2-2500*/;
        zce_uint16    bit_rates/*码率，单位：Kbps*/;
        zce_byte    lost_detect/*是否进行视频丢失检测*/;
        zce_byte    lost_percent/*视频丢包率 0% ~ 100%*/;
        zce_byte    priority/*视频码率优先格式(速度优先或者是质量优先)0 - 速度优先  1 - 质量优先*/;
        zce_byte    alarm_min_region_num/*产生告警的最小块数*/;
        zce_byte    alarm_max_region_num/*恢复告警的最大块数*/;
        zce_byte    status/*是否可控*/;
        zce_byte    store_type/*存储方式0x01：中心存储  0x02：前端存储*/;
        zce_byte    record_type/*录像类型：0x01：指令录像（非定时）0x02：定时录像*/;
        zce_uint32    total_capacity/*中心存储总容量，基本单位：M*/;
        zce_uint32    spare_capacity/*中心存储剩余容量，基本单位：M*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct VIDEOIN_CHANNEL_V2
    {

        VIDEOIN_CHANNEL_V2()
        :format(0)
        ,resolution(0)
        ,frame_rates(0)
        ,iframe_interval(0)
        ,bit_rates(0)
        ,lost_detect(0)
        ,lost_percent(0)
        ,priority(0)
        ,alarm_min_region_num(0)
        ,alarm_max_region_num(0)
        ,status(0)
        ,reserve(0)
        ,store_type(0)
        ,record_type(0)
        ,total_capacity(0)
        ,spare_capacity(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*视频编码格式,参见视频编码格式表*/;
        zce_byte    resolution/*支持的视频显示格式,参见视频显示表*/;
        zce_byte    frame_rates/*帧率1～25*/;
        zce_uint16    iframe_interval/*关键帧间隔2-2500*/;
        zce_uint16    bit_rates/*码率，单位：Kbps*/;
        zce_byte    lost_detect/*是否进行视频丢失检测*/;
        zce_byte    lost_percent/*视频丢包率 0% ~ 100%*/;
        zce_byte    priority/*视频码率优先格式(速度优先或者是质量优先)0 - 速度优先  1 - 质量优先*/;
        zce_byte    alarm_min_region_num/*产生告警的最小块数*/;
        zce_byte    alarm_max_region_num/*恢复告警的最大块数*/;
        zce_uint32    status/*是否可控*/;
        zce_uint32    reserve/*保留*/;
        zce_byte    store_type/*存储方式0x01：中心存储  0x02：前端存储*/;
        zce_byte    record_type/*录像类型：0x01：指令录像（非定时）0x02：定时录像*/;
        zce_uint32    total_capacity/*中心存储总容量，基本单位：M*/;
        zce_uint32    spare_capacity/*中心存储剩余容量，基本单位：M*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct VIDEOOUT_CHANNEL
    {

        VIDEOOUT_CHANNEL()
        :format(0)
        ,resolution(0)
        ,bit_rates(0)
        ,reserve(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*视频编码格式,参见视频编码格式表*/;
        zce_byte    resolution/*支持的视频显示格式,参见视频显示表*/;
        zce_uint16    bit_rates/*码率，单位：Kbps*/;
        zce_byte    reserve;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct VIDEOOUT_CHANNEL_V2
    {

        VIDEOOUT_CHANNEL_V2()
        :format(0)
        ,resolution(0)
        ,bit_rates(0)
        ,reserve(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*视频编码格式,参见视频编码格式表*/;
        zce_byte    resolution/*支持的视频显示格式,参见视频显示表*/;
        zce_uint16    bit_rates/*码率，单位：Kbps*/;
        zce_byte    reserve;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct AUDIOIN_CHANNEL
    {

        AUDIOIN_CHANNEL()
        :format(0)
        ,volumn(0)
        ,band_width(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*当前音频编码格式,参见音频编码格式表*/;
        zce_uint16    volumn/*编码音量0～25*/;
        zce_uint32    band_width/*通道带宽，单位：Kbps*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct AUDIOIN_CHANNEL_V2
    {

        AUDIOIN_CHANNEL_V2()
        :format(0)
        ,volumn(0)
        ,band_width(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*当前音频编码格式,参见音频编码格式表*/;
        zce_uint16    volumn/*编码音量0～25*/;
        zce_uint32    band_width/*通道带宽，单位：Kbps*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct AUDIOOUT_CHANNEL
    {

        AUDIOOUT_CHANNEL()
        :format(0)
        ,volumn(0)
        ,band_width(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*当前音频编码格式,参见音频编码格式表*/;
        zce_uint16    volumn/*编码音量0～25*/;
        zce_uint32    band_width/*通道带宽，单位：Kbps*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct AUDIOOUT_CHANNEL_V2
    {

        AUDIOOUT_CHANNEL_V2()
        :format(0)
        ,volumn(0)
        ,band_width(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_uint16    format/*当前音频编码格式,参见音频编码格式表*/;
        zce_uint16    volumn/*编码音量0～25*/;
        zce_uint32    band_width/*通道带宽，单位：Kbps*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct WARNIN_CHANNEL
    {

        WARNIN_CHANNEL()
        :alarm_type(0)
        ,input_type(0)
        ,action(0)
        ,reserve(0)
        ,delay_time(0)
        {
        }

        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
        zce_astring channel_name/*通道名称*/;
        zce_byte    alarm_type/*告警类型*/;
        zce_byte    input_type/*类别 0：NONE 1：开关量 2：模拟量*/;
        zce_uint16    action/*联动动作：0x0001：普通输出  0x0002：声音输出  0x0004：启动录像  0x0008：切换到指定位置 0x0010：切换视频（可以多选）*/;
        CHANNEL_ID    out_channel_id/*联动告警输出通道*/;
        CHANNEL_ID    video_channel_id/*联动视频通道*/;
        zce_uint16    reserve/*保留字*/;
        zce_uint16    delay_time/*持续时间（秒）*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct WARNIN_CHANNEL_V2
    {

        WARNIN_CHANNEL_V2()
        :alarm_type(0)
        ,input_type(0)
        ,action(0)
        ,reserve(0)
        ,delay_time(0)
        {
        }

        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
        zce_astring channel_name/*通道名称*/;
        zce_byte    alarm_type/*告警类型*/;
        zce_byte    input_type/*类别 0：NONE 1：开关量 2：模拟量*/;
        zce_uint16    action/*联动动作：0x0001：普通输出  0x0002：声音输出  0x0004：启动录像  0x0008：切换到指定位置 0x0010：切换视频（可以多选）*/;
        CHANNEL_ID    out_channel_id/*联动告警输出通道*/;
        CHANNEL_ID    video_channel_id/*联动视频通道*/;
        zce_uint16    reserve/*保留字*/;
        zce_uint16    delay_time/*持续时间（秒）*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct WARNOUT_CHANNEL
    {

        WARNOUT_CHANNEL()
        :alarm_type(0)
        ,output_type(0)
        ,reserve(0)
        ,delay_time(0)
        {
        }

        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
        zce_astring channel_name/*通道名称*/;
        zce_byte    alarm_type/*告警类型*/;
        zce_byte    output_type/*类别0：NONE 1：开关量  2：模拟量*/;
        zce_byte    reserve/*保留字*/;
        zce_uint16    delay_time/*持续时间（秒）*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct WARNOUT_CHANNEL_V2
    {

        WARNOUT_CHANNEL_V2()
        :alarm_type(0)
        ,output_type(0)
        ,reserve(0)
        ,delay_time(0)
        {
        }

        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
        zce_astring channel_name/*通道名称*/;
        zce_byte    alarm_type/*告警类型*/;
        zce_byte    output_type/*类别0：NONE 1：开关量  2：模拟量*/;
        zce_byte    reserve/*保留字*/;
        zce_uint16    delay_time/*持续时间（秒）*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct NONSTANDARD_CHANNEL
    {

        NONSTANDARD_CHANNEL()
        :user_data(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
        std::vector<zce_char> user_data/*用户数据*/;
    };
    struct NONSTANDARD_CHANNEL_V2
    {

        NONSTANDARD_CHANNEL_V2()
        :user_data(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_astring channel_name/*通道名称*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
        std::vector<zce_char> user_data/*用户数据*/;
    };
    struct MATRIX_INFO
    {

        MATRIX_INFO()
        :protocol_type(0)
        ,video_in_num(0)
        ,video_in_no(0)
        ,video_out_num(0)
        ,video_out_no(0)
        ,action(0)
        ,param(0)
        ,camera_type(0)
        ,camera_485addr(0)
        {
        }

        zce_uint16    protocol_type/*协议类型*/;
        CHANNEL_ID    channel_id/*通道号*/;
        zce_byte    video_in_num/*输入源数目*/;
        zce_byte    video_in_no/*输入源号*/;
        zce_byte    video_out_num/*输出源数目*/;
        zce_byte    video_out_no/*输出源号*/;
        zce_byte    action/*控制命令*/;
        zce_byte    param/*命令参数*/;
        zce_byte    camera_type/*摄像机类型*/;
        zce_byte    camera_485addr/*摄像机485地址*/;
        zce_astring channel_name/*名称*/;
        zce_astring location/*位置*/;
        zce_astring desc/*描述*/;
    };
    struct FD_INFO
    {

        FD_INFO()
        :pwd(0)
        ,type(0)
        ,software_version(0)
        ,hardware_version(0)
        ,video_in_num(0)
        ,video_out_num(0)
        ,audio_in_num(0)
        ,audio_out_num(0)
        ,alarm_in_num(0)
        ,alarm_out_num(0)
        ,non_standard_num(0)
        ,reserve(0)
        ,band_width(0)
        {
        }

        zce_astring id/*设备编号*/;
        zce_astring domain_id/*设备所在域编号*/;
        zce_astring name/*设备名称*/;
        std::vector<zce_char> pwd/*设备密码的MD5值*/;
        zce_uint32    type/*设备类型*/;
        zce_uint32    software_version/*设备版本号*/;
        zce_astring factory_code/*设备所属厂家代码*/;
        zce_astring factory_name/*设备所属厂家名称*/;
        zce_uint16    hardware_version;
        zce_byte    video_in_num/*视频输入通道数目*/;
        zce_byte    video_out_num/*视频输出通道数目*/;
        zce_byte    audio_in_num/*音频输入通道数目*/;
        zce_byte    audio_out_num/*音频输出通道数目*/;
        zce_byte    alarm_in_num/*告警输入通道数目*/;
        zce_byte    alarm_out_num/*告警输出通道数目*/;
        zce_byte    non_standard_num/*透明通道数目*/;
        zce_byte    reserve;
        zce_uint32    band_width/*通道带宽，单位：Kbps*/;
        zce_astring location/*设备安装位置*/;
        zce_astring desc/*设备描述*/;
    };
    struct UA_INFO
    {

        UA_INFO()
        :level(0)
        ,status(0)
        {
        }

        zce_astring id/*编号*/;
        zce_astring email/*EMAIL*/;
        zce_astring name/*姓名*/;
        zce_uint32    level/*用户级别*/;
        zce_astring phone/*电话*/;
        zce_astring mobile/*手机*/;
        zce_astring addr/*地址*/;
        zce_astring desc/*详细描述*/;
        zce_char    status/*用户状态:在用 为"A" 注销为 "P"*/;
    };
    struct UA_INFO_NOEMAIL
    {

        UA_INFO_NOEMAIL()
        :level(0)
        ,status(0)
        {
        }

        zce_astring id/*描述*/;
        zce_astring name/*姓名*/;
        zce_uint32    level/*用户级别*/;
        zce_astring phone/*电话*/;
        zce_astring mobile/*手机*/;
        zce_astring addr/*地址*/;
        zce_astring desc/*详细描述*/;
        zce_char    status/*用户状态:在用 为"A" 注销为 "P"*/;
    };
    struct GPS_INFO
    {

        GPS_INFO()
        :longitude(0)
        ,latitude(0)
        {
        }

        zce_int32    longitude/*经度*/;
        zce_int32    latitude/*维度*/;
    };
    struct PRIVILEGE_INFO
    {

        PRIVILEGE_INFO()
        :privilege(0)
        {
        }

        zce_uint32    privilege/*权限信息*/;
    };
    struct MIXTUREVIDEOIN_CHANNEL
    {

        MIXTUREVIDEOIN_CHANNEL()
        :mixture_mode(0)
        ,format(0)
        ,resolution(0)
        ,frame_rates(0)
        ,iframe_interval(0)
        ,bit_rates(0)
        ,lost_detect(0)
        ,lost_percent(0)
        ,priority(0)
        ,store_type(0)
        ,record_type(0)
        ,total_capacity(0)
        ,spare_capacity(0)
        {
        }

        CHANNEL_ID    channel_id;
        zce_astring channel_name;
        zce_uint16    mixture_mode;
        zce_astring mixture_param;
        zce_uint16    format;
        zce_byte    resolution;
        zce_byte    frame_rates;
        zce_uint16    iframe_interval;
        zce_uint16    bit_rates;
        zce_byte    lost_detect;
        zce_byte    lost_percent;
        zce_byte    priority;
        zce_byte    store_type;
        zce_byte    record_type;
        zce_uint32    total_capacity;
        zce_uint32    spare_capacity;
        zce_astring location;
        zce_astring desc;
    };
    struct MIXTUREVIDEOIN_CHANNEL_V2
    {

        MIXTUREVIDEOIN_CHANNEL_V2()
        :mixture_mode(0)
        ,format(0)
        ,resolution(0)
        ,frame_rates(0)
        ,iframe_interval(0)
        ,bit_rates(0)
        ,lost_detect(0)
        ,lost_percent(0)
        ,priority(0)
        ,store_type(0)
        ,record_type(0)
        ,total_capacity(0)
        ,spare_capacity(0)
        {
        }

        CHANNEL_ID    channel_id;
        zce_astring channel_name;
        zce_uint16    mixture_mode;
        zce_astring mixture_param;
        zce_uint16    format;
        zce_byte    resolution;
        zce_byte    frame_rates;
        zce_uint16    iframe_interval;
        zce_uint16    bit_rates;
        zce_byte    lost_detect;
        zce_byte    lost_percent;
        zce_byte    priority;
        zce_byte    store_type;
        zce_byte    record_type;
        zce_uint32    total_capacity;
        zce_uint32    spare_capacity;
        zce_astring location;
        zce_astring desc;
    };
    struct VIDEOIN_CHANNEL_EXT
    {
        VIDEOIN_CHANNEL_EXT() { };
        VIDEOIN_CHANNEL_V2    vi_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct VIDEOOUT_CHANNEL_EXT
    {
        VIDEOOUT_CHANNEL_EXT() { };
        VIDEOOUT_CHANNEL_V2    vo_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct AUDIOIN_CHANNEL_EXT
    {
        AUDIOIN_CHANNEL_EXT() { };
        AUDIOIN_CHANNEL_V2    ai_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct AUDIOOUT_CHANNEL_EXT
    {
        AUDIOOUT_CHANNEL_EXT() { };
        AUDIOOUT_CHANNEL_V2    ao_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct WARNIN_CHANNEL_EXT
    {
        WARNIN_CHANNEL_EXT() { };
        WARNIN_CHANNEL_V2    wi_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct WARNOUT_CHANNEL_EXT
    {
        WARNOUT_CHANNEL_EXT() { };
        WARNOUT_CHANNEL_V2    wo_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct NONSTANDARD_CHANNEL_EXT
    {
        NONSTANDARD_CHANNEL_EXT() { };
        NONSTANDARD_CHANNEL_V2    ns_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct MIXTUREVIDEOIN_CHANNEL_EXT
    {
        MIXTUREVIDEOIN_CHANNEL_EXT() { };
        MIXTUREVIDEOIN_CHANNEL_V2    mx_channel;
        GPS_INFO    gps;
        PRIVILEGE_INFO    privilege;
    };
    struct FD_INFO_V3
    {
        FD_INFO_V3() { };
        FD_INFO    fd;
        GPS_INFO    gps;
    };
    struct FD_INFO_V4
    {

        FD_INFO_V4()
        :lLastLogin(0)
        ,lLastLogout(0)
        ,cFdState(0)
        {
        }

        FD_INFO    fd;
        GPS_INFO    gps;
        zce_uint32    lLastLogin/*最后登录时间*/;
        zce_uint32    lLastLogout/*最后登出时间*/;
        zce_char    cFdState/*'W'待安装、'A' 正常、'P' 停用、'C'销户*/;
    };
    struct FD_INFO_V4_EXT
    {

        FD_INFO_V4_EXT()
        :cfg_channel_num(0)
        ,mix_channel_num(0)
        ,status(0)
        ,reserved1(0)
        {
        }

        FD_INFO_V4    fd_info_v4;
        zce_uint32    cfg_channel_num/*配置通道个数，应永远为1*/;
        zce_uint32    mix_channel_num/*混合通道个数*/;
        zce_uint32    status/*BIT0, 是否在线*/;
        zce_uint32    reserved1;
    };
    struct CUSTOMER_INFO
    {
        CUSTOMER_INFO() { };
        zce_astring id/*编号*/;
        zce_astring name/*名称*/;
        zce_astring desc/*详细描述*/;
    };
    struct ROLE_INFO
    {
        ROLE_INFO() { };
        zce_astring id/*描述*/;
        zce_astring name/*角色名称*/;
        zce_astring level_code;
        zce_astring desc/*角色描述*/;
    };
    struct ROLE_PRIVILEGE_INFO
    {

        ROLE_PRIVILEGE_INFO()
        :privilege(0)
        {
        }

        zce_astring role_id/*角色ID*/;
        zce_astring fd_id/*设备ID*/;
        CHANNEL_ID    channel_id/*通道号*/;
        zce_int32    privilege/*权限*/;
    };
    struct UA_PRIVILEGE_INFO
    {

        UA_PRIVILEGE_INFO()
        :privilege(0)
        {
        }

        zce_astring ua_id/*用户ID*/;
        zce_astring fd_id/*设备ID*/;
        CHANNEL_ID    channel_id/*通道号*/;
        zce_int32    privilege/*权限 Read = 0x0001; Write = 0x0002; Contrl = 0x0004; Manage = 0x0008*/;
    };
    struct IP_ADDRESS
    {

        IP_ADDRESS()
        :addr(0)
        ,port(0)
        ,trans_type(0)
        ,reserve(0)
        {
        }

        zce_uint32    addr/*网络接口地址，IP地址，使用长整型来表示*/;
        zce_uint16    port/*本地网络端口*/;
        zce_byte    trans_type/*网络传输类型0：AUTO1：UDP 2：TCP 3：Multicast*/;
        zce_byte    reserve/*保留字*/;
    };
    struct IP_ADDRESS_IPV6
    {

        IP_ADDRESS_IPV6()
        :port(0)
        ,trans_type(0)
        ,reserve(0)
        {
        }

        zce_astring addr/*网络接口地址，IP地址 */;
        zce_uint16    port/*本地网络端口*/;
        zce_byte    trans_type/*网络传输类型0：AUTO 1：UDP 2：TCP  3：Multicast */;
        zce_byte    reserve/*保留字*/;
    };
    struct SCHEDULE_NOTIFY
    {

        SCHEDULE_NOTIFY()
        :reserve(0)
        ,direction(0)
        ,transport(0)
        ,action(0)
        ,actid(0)
        {
        }

        zce_byte    reserve/*保留字段，为对齐结构*/;
        zce_byte    direction/*传输方向: 0x01 SEND; 0x02 RECV; 0x03 BOTH*/;
        zce_byte    transport/*传输协议: 0x01 RTP; 0x02 GE（私有协议）*/;
        zce_byte    action/*激活标志: 0x00 无需激活; 0x01 主动发送激活; 0x02 被动接收激活*/;
        IP_ADDRESS    addr/*目的地址*/;
        std::vector<zce_byte> actid;
    };
    struct SCHEDULE_NOTIFY_IPV6
    {

        SCHEDULE_NOTIFY_IPV6()
        :reserve(0)
        ,direction(0)
        ,transport(0)
        ,action(0)
        ,actid(0)
        {
        }

        zce_byte    reserve/*保留字段，为对齐结构*/;
        zce_byte    direction/*传输方向: 0x01 SEND; 0x02 RECV; 0x03 BOTH*/;
        zce_byte    transport/*传输协议: 0x01 RTP; 0x02 GE（私有协议）*/;
        zce_byte    action/*激活标志: 0x00 无需激活; 0x01 主动发送激活; 0x02 被动接收激活*/;
        IP_ADDRESS_IPV6    addr/*目的地址*/;
        std::vector<zce_byte> actid;
    };
    struct FD_ACTIVE_STATUS
    {

        FD_ACTIVE_STATUS()
        :login_time(0)
        ,reserve1(0)
        ,reserve2(0)
        ,reserve3(0)
        ,reserve4(0)
        {
        }

        zce_uint32    login_time/*上线时间*/;
        zce_uint32    reserve1/* 同IE_FD_SIMPLE的isonline*/;
        zce_uint32    reserve2/*保留字段*/;
        zce_uint32    reserve3/*保留字段*/;
        zce_uint32    reserve4/*保留字段*/;
    };
    struct ALARM_EVENT
    {

        ALARM_EVENT()
        :rule_guid(0)
        ,major_type(0)
        ,minor_type(0)
        {
        }

        std::vector<zce_char> rule_guid/*Rule's GUID*/;
        CHANNEL_ID    channel_id/*告警通道*/;
        zce_char    major_type/*告警主类型*/;
        zce_char    minor_type/*告警子类型*/;
    };
    struct TASK_SCHEDULE
    {

        TASK_SCHEDULE()
        :section_start_time(0)
        ,section_end_time(0)
        ,period(0)
        ,schedule_end_time(0)
        {
        }

        zce_uint32    section_start_time/*第一个时段开始时间，从1970年开始计算的秒*/;
        zce_uint32    section_end_time/*第一个时段结束时间，从1970年开始计算的秒*/;
        zce_uint32    period/*计划循环周期，单位天，0表示不循环*/;
        zce_uint32    schedule_end_time/*计划截止时间，0表示无截止日期*/;
        zce_astring memo/*备注*/;
    };
    struct ALARM_CONDITION
    {

        ALARM_CONDITION()
        :alarm_timespan(0)
        ,cancel_timespan(0)
        ,in_effect(0)
        ,guard_cond(0)
        ,condition(0)
        ,more_cond(0)
        ,least_persistence(0)
        ,default_time_trigger_or_not(0)
        ,modify_date(0)
        {
        }

        zce_uint32    alarm_timespan/*告警间隔时间(秒)*/;
        zce_uint32    cancel_timespan/*自动销警间隔事件(秒)*/;
        zce_char    in_effect/*是否启用，0不启用，1启用，默认为1*/;
        zce_char    guard_cond/*BIT0(布防状态下会触发)/BIT1(撤防状态下会触发)*/;
        zce_uint32    condition/*告警条件*/;
        std::vector<zce_char> more_cond/*复杂告警条件*/;
        zce_uint32    least_persistence/*防抖时间(毫秒)*/;
        zce_char    default_time_trigger_or_not/*在未定义时段本事件是否生效，0否1是，默认为1*/;
        std::vector<TASK_SCHEDULE> time_span/*如果在未定义时段本事件生效，则timeSpan为不生效时段，timeSpanExclude为不生效时段例外（剪除）*/;
        std::vector<TASK_SCHEDULE> time_span_exclude/*如果在未定义时段本事件不生效，则timeSpan为生效时段，timeSpanExclude为生效时段例外（剪除）*/;
        zce_astring modifier/*配置规则的用户帐号*/;
        zce_uint32    modify_date/*配置的时间*/;
    };
    struct ALARM_HANDLE
    {

        ALARM_HANDLE()
        :handle_guid(0)
        ,alarm_cond(0)
        ,action(0)
        ,param1(0)
        ,param2(0)
        ,param3(0)
        ,param4(0)
        ,param5(0)
        ,param6(0)
        ,param7(0)
        ,param8(0)
        ,modify_date(0)
        {
        }

        std::vector<zce_char> handle_guid/*handle's GUID*/;
        zce_char    alarm_cond/*BIT0(首次告警触发)/BIT1(二次告警触发)/BIT2(后续告警触发)/BIT3(销警触发)*/;
        zce_char    action/*处理动作类型*/;
        zce_uint16    param1/*处理参数1*/;
        zce_uint16    param2/*处理参数2*/;
        zce_uint16    param3/*处理参数3*/;
        zce_uint16    param4/*处理参数4*/;
        zce_uint16    param5/*处理参数5*/;
        zce_uint16    param6/*处理参数6*/;
        zce_uint16    param7/*处理参数7*/;
        zce_uint16    param8/*处理参数8*/;
        zce_astring param9/*处理参数9*/;
        zce_astring modifier/*配置规则的用户帐号*/;
        zce_uint32    modify_date/*配置的时间*/;
    };
    struct ALARM_HANDLE_CENTER
    {

        ALARM_HANDLE_CENTER()
        :handle_guid(0)
        ,alarm_type(0)
        ,alarm_sequence(0)
        ,lowest_level(0)
        ,action(0)
        ,param1(0)
        ,param2(0)
        ,param3(0)
        ,param4(0)
        ,param5(0)
        ,modify_date(0)
        {
        }

        std::vector<zce_char> handle_guid/*handle's GUID*/;
        zce_astring fd_id/*fd的id*/;
        CHANNEL_ID    channel_id;
        zce_char    alarm_type/*f告警类型条件：0表示任意告警类型*/;
        zce_char    alarm_sequence/*告警序号条件：bit0标识第一次告警，bit2标识第二次告警，bit3标识后续告警，bit4标识销警*/;
        zce_char    lowest_level/*触发动作的最低严重级别(5、10、15、20、25数值越大越严重)*/;
        zce_char    action;
        zce_uint16    param1;
        zce_uint16    param2;
        zce_uint16    param3;
        zce_uint16    param4;
        zce_uint32    param5;
        zce_astring param6;
        zce_astring param7;
        zce_astring memo/*注释*/;
        zce_astring modifier/*配置规则的用户的email*/;
        zce_uint32    modify_date/*配置的时间*/;
    };
    struct ALARM_HANDLE_SHOW
    {
        ALARM_HANDLE_SHOW() { };
        zce_astring dest_fd_name;
        zce_astring dest_channel_name;
        zce_astring prepoint_name;
        zce_astring charge_duser_email;
    };
    struct RECORD_PLAN
    {

        RECORD_PLAN()
        :guid(0)
        ,plan_type(0)
        ,period(0)
        ,begin_date(0)
        ,end_date(0)
        ,work_day(0)
        ,work_month(0)
        ,begin_hour(0)
        ,begin_minute(0)
        ,end_hour(0)
        ,end_minute(0)
        ,time_span(0)
        ,qos(0)
        ,compress_type(0)
        ,modify_date(0)
        {
        }

        std::vector<zce_char> guid;
        zce_int16    plan_type/*1一次性计划; 2以日为单位周期计划; 3以周为单位周期计划; 4以月为单位周期计划; */;
        zce_int32    period/*循环周期，一次性计划和月计划的循环周期设置为0*/;
        zce_int32    begin_date/*一次性计划时表示计划实际开始时间，日计划/周计划/月计划时表示计划生效时间，取整到天*/;
        zce_int32    end_date/*一次性计划时表示计划实际结束时间，日计划/周计划/月计划时表示计划失效时间，取整到天，默认为0，表示计划永远不失效*/;
        zce_int32    work_day/*工作日*/;
        zce_int16    work_month/*工作月*/;
        zce_int16    begin_hour/*一次性计划时填0*/;
        zce_int16    begin_minute/*一次性计划时填0*/;
        zce_int16    end_hour/*一次性计划时填0*/;
        zce_int16    end_minute/*一次性计划时填0*/;
        zce_int32    time_span/*单个文件的时间长度(s)*/;
        zce_byte    qos;
        zce_int16    compress_type/*0不压缩; 1画面变化压缩*/;
        zce_astring memo;
        zce_astring modifier;
        zce_int32    modify_date/*精确到秒*/;
    };
    struct astring254_WRAPPER
    {
        astring254_WRAPPER() { };
        zce_astring str;
    };
    struct VALUE_LIST
    {

        VALUE_LIST()
        :value(0)
        {
        }

        std::vector<zce_uint16> value;
    };
    struct RECT_PARAMETER
    {

        RECT_PARAMETER()
        :left(0)
        ,top(0)
        ,right(0)
        ,bottom(0)
        ,confident(0)
        ,reserverd(0)
        {
        }

        zce_uint16    left;
        zce_uint16    top;
        zce_uint16    right;
        zce_uint16    bottom;
        zce_uint16    confident;
        std::vector<zce_uint32> reserverd/*reserverd[0]:设置为100时表示横纵坐标以0~100的刻度表示，left、top、right、bottom为0~100之间的值
        reserverd[1]:是否执行全图搜索，详见后面*/;
        zce_astring str;
    };
    struct QOS_CAPACITY
    {

        QOS_CAPACITY()
        :qos(0)
        ,max_framerate(0)
        ,min_framerate(0)
        ,reserved0(0)
        ,resolution(0)
        ,max_bitrate(0)
        ,min_bitrate(0)
        ,max_key_frame_interval(0)
        ,min_key_frame_interval(0)
        ,reserved1(0)
        ,reserved2(0)
        ,reserved3(0)
        {
        }

        zce_byte    qos;
        zce_byte    max_framerate;
        zce_byte    min_framerate;
        zce_byte    reserved0;
        zce_uint32    resolution/*bitmap for enum VideoResolution*/;
        zce_uint32    max_bitrate/*bps*/;
        zce_uint32    min_bitrate;
        zce_uint16    max_key_frame_interval;
        zce_uint16    min_key_frame_interval;
        zce_uint32    reserved1;
        zce_uint32    reserved2;
        zce_uint32    reserved3;
    };
    struct SELECT_ITEM
    {

        SELECT_ITEM()
        :value(0)
        {
        }

        zce_uint16    value;
        std::vector<astring254_WRAPPER> enum_list/*枚举值*/;
        zce_astring text;
    };
    struct SPEED_LIMIT
    {

        SPEED_LIMIT()
        :min_speed(0)
        ,max_speed(0)
        ,reserved(0)
        {
        }

        zce_byte    min_speed/*最低速度限制,0表示无限制*/;
        zce_byte    max_speed/*最高速度限制,0表示无限制*/;
        std::vector<zce_byte> reserved/*大型车 速度限制, 暂不支持*/;
    };
    struct SPEED_LIMIT_V2
    {

        SPEED_LIMIT_V2()
        :small_car_max(0)
        ,small_car_standard(0)
        ,small_car_abnormal_max(0)
        ,cart_max(0)
        ,cart_min_standard(0)
        ,cart_abnormal_max(0)
        ,small_car_min(0)
        ,small_car_abnormal_min(0)
        ,cart_min(0)
        ,cart_abnormal_min(0)
        ,reserved(0)
        {
        }

        zce_uint16    small_car_max/*小车最高限速*/;
        zce_uint16    small_car_standard/*小车标志最高限速*/;
        zce_uint16    small_car_abnormal_max/*小车异常超速*/;
        zce_uint16    cart_max/*大车最高限速*/;
        zce_uint16    cart_min_standard/*大车标志最高限速*/;
        zce_uint16    cart_abnormal_max/*大车异常超速*/;
        zce_byte    small_car_min/*小车最低限速*/;
        zce_byte    small_car_abnormal_min/*小车异常低速*/;
        zce_byte    cart_min/*大车最低限速*/;
        zce_byte    cart_abnormal_min/*大车异常低速*/;
        std::vector<zce_byte> reserved;
    };
    struct OSDSUB_TYPE
    {

        OSDSUB_TYPE()
        :enable(0)
        ,type(0)
        ,space(0)
        ,lines(0)
        ,flag(0)
        ,reserved(0)
        {
        }

        zce_byte    enable;
        zce_byte    type;
        zce_byte    space;
        zce_byte    lines;
        zce_byte    flag;
        std::vector<zce_byte> reserved;
        zce_astring display_name;
        zce_astring buf;
    };
    struct FLIGHT_CONTROL
    {

        FLIGHT_CONTROL()
        :iolist(0)
        ,outid(0)
        ,addr485(0)
        ,level(0)
        ,reserved(0)
        {
        }

        std::vector<zce_byte> iolist/*0x00-0xf表示IO口, 0x80-0x8f表示485口*/;
        zce_byte    outid;
        zce_byte    addr485/*485地址0-7*/;
        zce_byte    level/*0:低电平触发 1:高电平触发 2:边缘触发*/;
        std::vector<zce_byte> reserved;
    };
    struct FDSDK_CAMERA_CONTROL_ITEM
    {

        FDSDK_CAMERA_CONTROL_ITEM()
        :type(0)
        ,manner(0)
        ,support_manner(0)
        ,fMin(0)
        ,fMid(0)
        ,fMax(0)
        ,fFix(0)
        {
        }

        zce_uint16    type;
        zce_uint16    manner/*当前的的控制方法*/;
        zce_uint32    support_manner/*支持的控制方法 ECameraControlManner*/;
        zce_float    fMin;
        zce_float    fMid;
        zce_float    fMax;
        zce_float    fFix;
        zce_astring text;
    };
    struct FDSDK_CAMERA_CONTROL_GROUP
    {

        FDSDK_CAMERA_CONTROL_GROUP()
        :group_id(0)
        {
        }

        zce_uint16    group_id;
        std::vector<FDSDK_CAMERA_CONTROL_ITEM> camera_ctrl_item;
        std::vector<SELECT_ITEM> camera_ctrl_item2;
    };
    struct FDSDK_CAMERA_CONTROL_ITEM3
    {

        FDSDK_CAMERA_CONTROL_ITEM3()
        :value(0)
        {
        }

        zce_uint16    value;
        std::vector<astring254_WRAPPER> enum_list/*枚举值*/;
        zce_astring text;
        std::vector<FDSDK_CAMERA_CONTROL_GROUP> camera_ctrl_group;
    };
    struct FDSDK_PHYSICAL_COIL
    {

        FDSDK_PHYSICAL_COIL()
        :enable(0)
        ,show(0)
        ,type(0)
        ,coilNum(0)
        ,detect_speed(0)
        ,detect_mode(0)
        ,first_io(0)
        ,second_io(0)
        ,comid(0)
        ,id(0)
        ,first_id(0)
        ,second_id(0)
        ,reserved(0)
        ,iolist(0)
        {
        }

        zce_byte    enable/*物理线圈使能*/;
        zce_byte    show/*在视频上显示线圈*/;
        zce_byte    type/*车辆检测器类型，0：232口串车检器, 1:IO高电平车检器, 2:IO低电平车检器*/;
        zce_byte    coilNum/*线圈数目,1或2,默认为2*/;
        zce_byte    detect_speed/*是否测速，0：不测速，1：测速*/;
        zce_byte    detect_mode/*检测模式，1：正行，2：逆行，3：双向; 对于单线圈,1:进线圈,2出线圈,3:进出线圈*/;
        zce_byte    first_io/*车检器前线圈输入IO*/;
        zce_byte    second_io/*车检器后线圈IO*/;
        zce_byte    comid/*与车辆检测器连接的串口ID*/;
        zce_byte    id/*车辆检测器ID*/;
        zce_byte    first_id/*车检器前线圈ID;若测速,则表示组ID*/;
        zce_byte    second_id/*车检器后线圈ID*/;
        std::vector<zce_byte> reserved/*[0]:地感触发抓拍图片的张数，[2][1]:线圈宽度单位厘米，bit0: 0无效，1有效，[4][3]:线圈间距单位厘米，bit0: 0无效，1有效*/;
        GENERAL_RECT    coil;
        std::vector<zce_byte> iolist/*0x00-0xf表示IO口, 0x90-0x9f表示232口*/;
    };
    struct FDSDK_VIRTUAL_COIL
    {

        FDSDK_VIRTUAL_COIL()
        :enable(0)
        ,show(0)
        ,detect_mode(0)
        ,reserved(0)
        {
        }

        zce_byte    enable/*虚拟线圈使能*/;
        zce_byte    show/*在视频上显示线圈*/;
        zce_byte    detect_mode/*检测模式，1：正行，2：逆行，3：双向*/;
        std::vector<zce_byte> reserved;
        std::vector<GENERAL_POINT> point/* 前两个点构成检测矩形1;后两个点构成矩形2; 矩形1用于需要闪光时的提前检测 */;
    };
    struct FDSDK_CAPTURE_VEHICLE
    {

        FDSDK_CAPTURE_VEHICLE()
        :vehicle_id(0)
        ,dir(0)
        ,support(0)
        ,reserved(0)
        ,osd_type(0)
        ,osd_x(0)
        ,osd_y(0)
        {
        }

        zce_byte    vehicle_id/*车道号*/;
        zce_byte    dir/*0：正行车辆在画面上从上至下；1：正行车辆在画面上从下至上。2：混行车道*/;
        zce_byte    support/*bit0:是否支持地感线圈 bit1:是否支持虚拟线圈	bit2:是否支持雷达*/;
        std::vector<zce_byte> reserved;
        zce_byte    osd_type/* 0：在图片最下方；1：在图片最上方；0xff：坐标指定；*/;
        zce_uint16    osd_x;
        zce_uint16    osd_y;
        zce_astring osd_text;
        FLIGHT_CONTROL    flight_ctl/*flight_ctrl表示不支持闪光时不允许配置*/;
        SPEED_LIMIT    speed/*只有地感线圈支持测速时这项才显示*/;
        FDSDK_PHYSICAL_COIL    physical_coil;
        FDSDK_VIRTUAL_COIL    virtual_coil;
    };
    struct FDSDK_PHYSICAL_COIL_V2
    {

        FDSDK_PHYSICAL_COIL_V2()
        :lane_id(0)
        ,lane_dir(0)
        ,detect_dir(0)
        ,detect_speed(0)
        ,reverse_illegal(0)
        ,flash_ioid(0)
        ,coilNum(0)
        ,level(0)
        ,first_io(0)
        ,second_io(0)
        ,comid(0)
        ,id(0)
        ,first_id(0)
        ,second_id(0)
        ,reserved(0)
        ,coil_width(0)
        ,coil_space(0)
        ,iolist(0)
        {
        }

        zce_byte    lane_id/*车道号, 从0开始*/;
        zce_byte    lane_dir/*车道正行方向，0：从上到下，1：从下到上。2：混行车道*/;
        zce_byte    detect_dir/*检测模式，1：正行，2：逆行，3：双向; 对于单线圈,1:进线圈,2出线圈,3:进出线圈*/;
        zce_byte    detect_speed/*是否测速，0：不测速，1：测速*/;
        zce_byte    reverse_illegal/*逆行是否是违章行为, 0:否， 1：是*/;
        zce_byte    flash_ioid/*对应闪光灯io口: 1、2、3...io口; 0xff：无*/;
        zce_byte    coilNum/*线圈数目,1或2,默认为2*/;
        zce_byte    level/* 0:低电平车检器; 1:高电平车检器,*/;
        zce_byte    first_io/*车检器前线圈输入IO*/;
        zce_byte    second_io/*车检器后线圈IO*/;
        zce_byte    comid/*与车辆检测器连接的串口ID*/;
        zce_byte    id/*车辆检测器ID*/;
        zce_byte    first_id/*车检器前线圈ID;若测速,则表示组ID*/;
        zce_byte    second_id/*车检器后线圈ID*/;
        std::vector<zce_byte> reserved;
        zce_uint16    coil_width/*线圈宽度单位厘米*/;
        zce_uint16    coil_space/*两线圈间距单位厘米*/;
        GENERAL_RECT    plate_rect/*车牌识别区域*/;
        SPEED_LIMIT_V2    speed_limit;
        std::vector<zce_byte> iolist/*0x00-0xf表示IO口, 0x90-0x9f表示232口, 0xa0-0xaf表示485口*/;
    };
    struct FDSDK_CAPTURE_LANES_RADAR
    {

        FDSDK_CAPTURE_LANES_RADAR()
        :lane_id(0)
        ,lane_dir(0)
        ,detect_dir(0)
        ,detect_speed(0)
        ,reverse_illegal(0)
        ,flash_io_id(0)
        ,radar_type(0)
        ,rs_id(0)
        ,reserved(0)
        {
        }

        zce_byte    lane_id/*车道号, 从0开始*/;
        zce_byte    lane_dir/*车道正行方向，0：从上到下，1：从下到上。2：混行车道*/;
        zce_byte    detect_dir/*抓拍方向，1：正行，2：逆行，3：双向*/;
        zce_byte    detect_speed/*是否测速，0：不测速，1：测速*/;
        zce_byte    reverse_illegal/*逆行是否是违章行为, 0:否， 1：是*/;
        zce_byte    flash_io_id/*对应闪光灯io口: 1、2、3...io口; 0xff：无*/;
        zce_byte    radar_type/*雷达类型*/;
        zce_byte    rs_id/*与雷达连接的串口ID*/;
        std::vector<zce_byte> reserved;
        GENERAL_RECT    plate_rect/*车牌识别区域*/;
        SPEED_LIMIT_V2    speed_limit;
    };
    struct FDSDK_CAPTURE_LANES_INFO
    {

        FDSDK_CAPTURE_LANES_INFO()
        :detect_y(0)
        ,reserved1(0)
        ,lane_dir(0)
        ,detect_dir(0)
        ,detect_type(0)
        ,touch_line_detect(0)
        ,reverse_illegal(0)
        ,flash_io_id(0)
        ,reserved2(0)
        {
        }

        std::vector<GENERAL_LINE> line/*车道线6条*/;
        std::vector<zce_uint16> detect_y/*抓拍线*/;
        std::vector<zce_byte> reserved1;
        std::vector<zce_byte> lane_dir/*0：正行车辆在画面上从上至下；1：正行车辆在画面上从下至上。2：混行车道*/;
        std::vector<zce_byte> detect_dir/*抓拍方向，1：正行，2：逆行，3：双向*/;
        std::vector<zce_byte> detect_type/*抓拍类型,1：机动车，2：非机动，3：所有*/;
        std::vector<zce_byte> touch_line_detect/*是否检测压线,0:否，1：是*/;
        std::vector<zce_byte> reverse_illegal/*逆行是否是违章行为, 0:否， 1：是*/;
        std::vector<zce_byte> flash_io_id/*对应闪光灯io口: 1、2、3...io口; 0xff：无*/;
        zce_byte    reserved2;
        std::vector<GENERAL_LINE> detect_line/*检测区域的上下左右4条边界线*/;
        std::vector<SPEED_LIMIT_V2> speed_limit;
    };
    struct FDSDK_FACE_DETECT
    {

        FDSDK_FACE_DETECT()
        :enable(0)
        ,show(0)
        ,detect_count(0)
        ,min_width(0)
        ,interval(0)
        {
        }

        zce_byte    enable;
        zce_byte    show/*在视频上显示线圈*/;
        zce_uint16    detect_count/*最多检测数目*/;
        zce_uint16    min_width/*人脸最小像素宽度*/;
        zce_uint16    interval/*检测间隔帧数*/;
        std::vector<GENERAL_RECT> coil;
    };
    struct RESOLUTION_BITERATE_CAPACITY
    {

        RESOLUTION_BITERATE_CAPACITY()
        :width(0)
        ,height(0)
        ,framerate(0)
        ,bitrate(0)
        {
        }

        zce_uint16    width;
        zce_uint16    height;
        zce_uint16    framerate;
        std::vector<zce_uint16> bitrate;
    };
    struct MEDIATYPE_CAPACITY
    {

        MEDIATYPE_CAPACITY()
        :mediatype(0)
        {
        }

        zce_uint16    mediatype;
        std::vector<RESOLUTION_BITERATE_CAPACITY> resolution_capacity;
    };
    struct CRUISE_ITEM
    {

        CRUISE_ITEM()
        :preset_no(0)
        ,reserve(0)
        ,delay_time(0)
        {
        }

        zce_byte    preset_no/*预置点编号*/;
        zce_byte    reserve;
        zce_uint16    delay_time/*秒*/;
    };
    struct INTELLIGENT_ALGORITHMS_CFG
    {

        INTELLIGENT_ALGORITHMS_CFG()
        :plate_direction(0)
        ,plate_color_detect_enable(0)
        ,reserve(0)
        ,plate_min_size(0)
        ,plate_max_size(0)
        {
        }

        zce_astring localtion/*地点 如浙,沪等*/;
        zce_byte    plate_direction/*0:正向 1:反向*/;
        zce_byte    plate_color_detect_enable/*0:车身颜色识别关闭 1:车身颜色识别开*/;
        std::vector<zce_byte> reserve;
        zce_uint16    plate_min_size/*60-120最小车牌 单位像素*/;
        zce_uint16    plate_max_size/*60-120最大车牌 单位像素*/;
    };
    struct PICTURE_MERGE_TYPE
    {

        PICTURE_MERGE_TYPE()
        :one_picture_merge(0)
        ,two_picture_merge(0)
        ,three_picture_merge(0)
        ,reserve(0)
        {
        }

        zce_byte    one_picture_merge/*EPicMergeType 一张和特写特写*/;
        zce_byte    two_picture_merge/*EPicMergeType 上下,左右两种*/;
        zce_byte    three_picture_merge/*EPicMergeType 三张+特写*/;
        zce_byte    reserve;
    };
    struct CONFIG_PARAM
    {

        CONFIG_PARAM()
        :config_major_type(0)
        ,config_minor_type(0)
        ,data_mask(0)
        ,data_buf(0)
        ,data_len(0)
        {
        }

        zce_uint32    config_major_type/*配置主类型 EConfigMajorType*/;
        zce_uint32    config_minor_type/*配置子类型 EConfigMinorType*/;
        zce_uint32    data_mask/*EConfigMask 0xffffffff表示全选*/;
        std::vector<zce_byte> data_buf/*最大5M.*/;
        zce_uint32    data_len;
    };
    enum IE_E
    {
        E_IE_HEADER = 0x00000000,
        E_IE_astring64 = 0x00000001,
        E_IE_astring254 = 0x00000002,
        E_IE_CHAR16 = 0x00000003,
        E_IE_ULONG = 0x00000004,
        E_IE_USHORT = 0x00000005,
        E_IE_UCHAR = 0x00000006,
        E_IE_UUDATA = 0x00000007,
        E_IE_TIME_SECTOR = 0x00000008,
        E_IE_NEGOTIATE_REQ = 0x00000009,
        E_IE_NEGOTIATE_RES = 0x0000000a,
        E_IE_ROLE_ID = 0x0000000b,
        E_IE_UA_ID = 0x0000000c,
        E_IE_UA = 0x0000000d,
        E_IE_ROLE = 0x0000000e,
        E_IE_UA_MOD_PASSWORD = 0x0000000f,
        E_IE_UA_ROLE = 0x00000010,
        E_IE_ROLE_FD_AUTHENTICATION = 0x00000011,
        E_IE_UA_FD_AUTHENTICATION = 0x00000012,
        E_IE_UA_ADD = 0x00000014,
        E_IE_UA_MODIFY = 0x00000015,
        E_IE_ROLE_PRIV_ADMIN = 0x00000016,
        E_IE_LOG_REQ = 0x00000018,
        E_IE_QUALITY_REPORT = 0x00000019,
        E_IE_FD_DESCRIBE = 0x0000001a,
        E_IE_CHANNEL_DESCRIBE = 0x0000001b,
        E_IE_CHANNEL_INFO = 0x0000001c,
        E_IE_SCHEDULE_NOTIFY = 0x0000001d,
        E_IE_PORT_RANGE = 0x0000001e,
        E_IE_RECORDSTART_REQ = 0x0000001f,
        E_IE_OPERATE_LOG = 0x00000021,
        E_IE_FD_ACTIVE_STATUS = 0x00000022,
        E_IE_UAS_EVENT_NOTIFY = 0x00000023,
        E_IE_CHANNEL_NAME = 0x00000024,
        E_IE_ROLE_USER = 0x00000025,
        E_IE_UA_PRIV_ADMIN = 0x00000026,
        E_IE_TIME_SECTOR_WITHGUID = 0x00000027,
        E_IE_RECORD_STATUS = 0x00000028,
        E_IE_LONG = 0x00000029,
        E_IE_ONLINE_STATUS = 0x0000002a,
        E_IE_CHANNEL_PRIVILEGE = 0x0000002b,
        E_IE_FD_IDNAME = 0x0000002c,
        E_IE_CLIENT_IDNAME = 0x0000002d,
        E_IE_UACONFIG = 0x0000002e,
        E_IE_UNSUPPORTCMD_NOTIFY = 0x0000002f,
        E_IE_FDCHANNEL_RIGHT = 0x00000030,
        E_IE_UAS_VERSION = 0x00000031,
        E_IE_NAME_VALUE = 0x00000032,
        E_IE_COMPRESS = 0x00000033,
        E_IE_NETADDRESS_ANY = 0x00000034,
        E_IE_CHANNEL_NAME_V2 = 0x00000035,
        E_IE_astring = 0x00000036,
        E_IE_HTTP_PROXY = 0x00000037,
        E_IE_MONITOR_CHANNEL_PAIR = 0x00000038,
        E_IE_FD_LOGIN_INFO = 0x00001000,
        E_IE_FD_INFO = 0x00001001,
        E_IE_FD_ID = 0x00001002,
        E_IE_CHANNEL_ID = 0x00001003,
        E_IE_NETADDRESS = 0x00001004,
        E_IE_NET_SCHEDULE_ADDRESS = 0x00001005,
        E_IE_VIDEOIN_CHANNEL = 0x00001006,
        E_IE_VIDEOOUT_CHANNEL = 0x00001007,
        E_IE_AUDIOIN_CHANNEL = 0x00001008,
        E_IE_AUDIOOUT_CHANNEL = 0x00001009,
        E_IE_WARNIN_CHANNEL = 0x0000100a,
        E_IE_WARNOUT_CHANNEL = 0x0000100b,
        E_IE_NONSTANDARD_CHANNEL = 0x0000100c,
        E_IE_MATRIX = 0x0000100d,
        E_IE_PTZ_CMD = 0x0000100e,
        E_IE_CTRL_CMD = 0x00001010,
        E_IE_ALARM_INFO = 0x00001011,
        E_IE_TIME = 0x00001012,
        E_IE_TIME_DETAIL_LIST = 0x00001013,
        E_IE_TIME_FILE = 0x00001014,
        E_IE_SYSTEM_CONFIG = 0x00001015,
        E_IE_VIDEO_CONFIG = 0x00001016,
        E_IE_AUDIO_CONFIG = 0x00001017,
        E_IE_VIDEO_REGION = 0x00001018,
        E_IE_VIDEO_MOTION = 0x00001019,
        E_IE_WARNIN_CONFIG = 0x0000101a,
        E_IE_WARNOUT_CONFIG = 0x0000101b,
        E_IE_CAMERA_CONFIG = 0x0000101c,
        E_IE_CAMERA_PRESET_CONFIG = 0x0000101d,
        E_IE_UPDATE_SOFTWARE = 0x00001020,
        E_IE_CHANNEL_STATUS = 0x00001021,
        E_IE_HARDDISK = 0x00001022,
        E_IE_NETADDRESS_IPV6 = 0x00001023,
        E_IE_SCHEDULE_NOTIFY_IPV6 = 0x00001024,
        E_IE_NET_SCHEDULE_ADDRESS_IPV6 = 0x00001025,
        E_IE_SYSTEM_CONFIG_IPV6 = 0x00001026,
        E_IE_FD_INFO_V3 = 0x00001027,
        E_IE_FD_INFO_V4 = 0x00001030,
        E_IE_POINT_MAGNIFY_PARAM = 0x00001031,
        E_IE_DOMAIN_INFO = 0x00001032,
        E_IE_FD_VERSION = 0x00001108,
        E_IE_CAPTURE = 0x00001109,
        E_IE_PICTURE = 0x0000110a,
        E_IE_MAPINFO = 0x0000110b,
        E_IE_MIXTUREVIDEOIN_CHANNEL = 0x0000110c,
        E_IE_PTZLOCK_INFO = 0x0000110d,
        E_IE_FD_VERSION_V2 = 0x0000110e,
        E_IE_FD_PARAMETER_INFO = 0x00001112,
        E_IE_FD_PARAMTER_ATTRIBUTE = 0x00001113,
        E_IE_FD_LOG = 0x00001114,
        E_IE_FD_CONFIG = 0x00001115,
        E_IE_FD_SIMPLE = 0x00001116,
        E_IE_SOFT_VERSION = 0x00001117,
        E_IE_TIME_FILE_V2 = 0x00001118,
        E_IE_CHANNEL_STATUS_V2 = 0x00001119,
        E_IE_FD_SIMPLE_V2 = 0x0000111a,
        E_IE_CHANNEL_STATUS_SIMPLE = 0x0000111b,
        E_IE_PICTURE_V2 = 0x0000111c,
        E_IE_TIME_XML = 0x0000111d,
        E_IE_FD_TYPE = 0x00001181,
        E_IE_RESULT = 0x00001200,
        E_IE_VERSION = 0x00001201,
        E_IE_ANY = 0x00001202,
        E_IE_SERVER = 0x00001203,
        E_IE_BALANCE_REDIRECT_FLAG = 0x00001204,
        E_IE_CHANNEL_NUMBER = 0x00001205,
        E_IE_VIDEOIN_CAPACITY = 0x00001206,
        E_IE_CHANNEL_MEDIA_CAPACITY = 0x00001207,
        E_IE_SERIAL_CAPACITY = 0x00001208,
        E_IE_ANY_V2 = 0x00001209,
        E_IE_FD_CHANNEL_ID = 0x0000120a,
        E_IE_LAST_GUARD_STATUS = 0x00002000,
        E_IE_ALARM_RULE = 0x00002001,
        E_IE_ALARM_EVENT = 0x00002002,
        E_IE_GUARD_SET = 0x00002003,
        E_IE_ALARM_CONTENT_HEADER = 0x000020a0,
        E_IE_ALARM_CONTENT_TEXT = 0x000020a1,
        E_IE_ALARM_CONTENT_PICTURE = 0x000020a2,
        E_IE_DEAL_ALARM = 0x000020a6,
        E_IE_FDALARM_HANDLE = 0x000020a7,
        E_IE_CENTERALARM_HANDLE = 0x000020a8,
        E_IE_SET_ALARMRULE_TIMESPAN = 0x000020a9,
        E_IE_ALARM_CONTENT_TEXT_UA = 0x000020aa,
        E_IE_ALARM_CONTENT_TEXT_FD = 0x000020ab,
        E_IE_ALARM_CONTENT_PICTURE_WITH_RECT_PARAMETER = 0x000020ad,
        E_IE_SCHEME = 0x000020b0,
        E_IE_RECORD_PLAN = 0x00002100,
        E_IE_COMMON_OPERATION = 0x00003000,
        E_IE_COMMON_CONTENT = 0x00003001,
        E_IE_COMMON_RESULT = 0x00003002,
        E_IE_FD_ACTION = 0x00003003,
        E_IE_CHANNEL_ACTION = 0x00003004,
        E_IE_UA_ACTION = 0x00003005,
        E_IE_FD_ACTION_V2 = 0x00003006,
        E_IE_FD_ACTION_V3 = 0x00003007,
        E_IE_UAS_INFO = 0x00005000,
        E_IE_CUSTOMER_INFO = 0x00005001,
        E_IE_GRANTED_CUSTOMER_INFO = 0x00005002,
        E_IE_FDCHANNELPRIV_INFO = 0x00005003,
        E_IE_FDSDK_USER = 0x00008000,
        E_IE_FDSDK_VIDEO_TRANSCEIVER_INFO = 0x00008001,
        E_IE_FDSDK_NVIEW_LOGIN_INFO = 0x00008002,
        E_IE_FDCFG_INFO = 0x00009100,
        E_IE_FDCFG_INFO_PRODUCT = 0x00009101,
        E_IE_FDCFG_INFO_VERSION = 0x00009102,
        E_IE_FDCFG_INFO_GPS = 0x00009103,
        E_IE_FDCFG_NETWORK_STATIC = 0x00009110,
        E_IE_FDCFG_NETWORK_DHCP = 0x00009111,
        E_IE_FDCFG_NETWORK_PPPOE = 0x00009112,
        E_IE_FDCFG_NETWORK_WIFI = 0x00009113,
        E_IE_FDCFG_NETWORK_3G = 0x00009114,
        E_IE_FDCFG_NVIEW_SERVER = 0x00009120,
        E_IE_FDCFG_NVIEW_MANAGER = 0x00009121,
        E_IE_FDCFG_NVIEW_ADDRESS = 0x00009122,
        E_IE_FDCFG_SDK_USER = 0x00009130,
        E_IE_FDCFG_NTP = 0x00009150,
        E_IE_FDCFG_AUDIO_IN = 0x00009200,
        E_IE_FDCFG_AUDIO_OUT = 0x00009240,
        E_IE_FDCFG_VIDEO_IN = 0x00009300,
        E_IE_FDCFG_VIDEO_IN_MOSAIC = 0x00009301,
        E_IE_FDCFG_VIDEO_IN_MOTION = 0x00009302,
        E_IE_FDCFG_VIDEO_IN_CAR = 0x00009303,
        E_IE_FDCFG_VIDEO_IN_FACE = 0x00009304,
        E_IE_FDCFG_VIDEO_IN_CUSTOM_SCAN = 0x00009305,
        E_IE_FDCFG_VIDEO_IN_PRIVATE_COVER = 0x00009306,
        E_IE_FDCFG_VIDEO_IN_MIXTURE = 0x00009307,
        E_IE_FDCFG_VIDEO_IN_CAPTURE = 0x00009308,
        E_IE_FDCFG_VIDEO_IN_CAMERA_CONTROL = 0x00009309,
        E_IE_FDCFG_VIDEO_IN_CAMERA_INFO = 0x0000930a,
        E_IE_FDCFG_VIDEO_IN_COLOR_CALCULATE = 0x0000930b,
        E_IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2 = 0x0000930c,
        E_IE_FDCFG_VIDEO_IN_CAMERA_MAP = 0x0000930d,
        E_IE_FDCFG_VIDEO_IN_PERIMETER_DETECT = 0x0000930e,
        E_IE_FDCFG_VIDEO_IN_CAPTURE_V2 = 0x0000930f,
        E_IE_FDCFG_OSD_FORMAT = 0x00009310,
        E_IE_FDCFG_VIDEO_OUT = 0x00009340,
        E_IE_FDCFG_ALARM_IN = 0x00009400,
        E_IE_FDCFG_ALARM_OUT = 0x00009440,
        E_IE_FDCFG_ALARM_DEFENCE = 0x00009480,
        E_IE_FDCFG_SERIAL = 0x00009500,
        E_IE_FDCFG_FD_CHANNEL = 0x00009501,
        E_IE_FDCFG_IO_LIGHT = 0x00009502,
        E_IE_FDCFG_DISK = 0x00009600,
        E_IE_FDCFG_RECORD_PLAN = 0x00009700,
        E_IE_FDCFG_RECORD_CHANNEL = 0x00009701,
        E_IE_CRUISE = 0x00009702,
        E_IE_WATCH = 0x00009703,
        E_IE_AUTOFIND = 0x00009704,
        E_IE_FDCHANNEL_INFO = 0x00009705,
        E_IE_HDDDETAIL_INFO = 0x00009706,
        E_IE_HDDINFO = 0x00009707,
        E_IE_PRESET_SCHEDULE = 0x00009708,
        E_IE_MUA = 0x00009709,
        E_IE_STRVERSION = 0x0000970a,
        E_IE_REMOVABLE_STORAGE = 0x0000970b,
        E_IE_INTELLIGENT_ALGORITHMS_CFG = 0x0000970c,
        E_IE_PICTURE_MERGE_TYPE = 0x0000970d,
        E_IE_CONFIG_PARAM = 0x0000970e,
    };

    enum MSG_E
    {
        E_MSG_HEADER = 0x00000000,
        E_MSG_NEGOTIATE_REQ = 0x00000100,
        E_MSG_NEGOTIATE_RES = 0x00000101,
        E_MSG_LOGIN_REQ = 0x00000102,
        E_MSG_LOGIN_RES = 0x00000103,
        E_MSG_UA_LIST_REQ = 0x00000104,
        E_MSG_UA_LIST_RES = 0x00000105,
        E_MSG_UA_MODIFY_REQ = 0x00000106,
        E_MSG_UA_MODIFY_RES = 0x00000107,
        E_MSG_UA_PASSWORD_REQ = 0x00000108,
        E_MSG_UA_PASSWORD_RES = 0x00000109,
        E_MSG_FD_LIST_REQ = 0x0000010a,
        E_MSG_FD_LIST_RES = 0x0000010b,
        E_MSG_SMS_AUTH_REQ = 0x0000010c,
        E_MSG_SMS_AUTH_RES = 0x0000010d,
        E_MSG_CHANNEL_LIST_REQ = 0x0000010e,
        E_MSG_CHANNEL_LIST_RES = 0x0000010f,
        E_MSG_HEART_BEAT_REQ = 0x00000110,
        E_MSG_HEART_BEAT_RES = 0x00000111,
        E_MSG_ROLE_LIST_REQ = 0x00000112,
        E_MSG_ROLE_LIST_RES = 0x00000113,
        E_MSG_QUERYastringBYTYPE_REQ = 0x00000114,
        E_MSG_QUERYastringBYTYPE_RES = 0x00000115,
        E_MSG_ROLE_FD_PRIVILEGE_REQ = 0x00000116,
        E_MSG_ROLE_FD_PRIVILEGE_RES = 0x00000117,
        E_MSG_UA_ADD_REQ = 0x00000118,
        E_MSG_UA_ADD_RES = 0x00000119,
        E_MSG_UA_DEL_REQ = 0x0000011a,
        E_MSG_UA_DEL_RES = 0x0000011b,
        E_MSG_ROLE_PRIVILEGE_ADMIN_REQ = 0x0000011e,
        E_MSG_ROLE_PRIVILEGE_ADMIN_RES = 0x0000011f,
        E_MSG_QUERY_OP_LOG_REQ = 0x00000122,
        E_MSG_QUERY_OP_LOG_RES = 0x00000123,
        E_MSG_FD_DESC_MOD_REQ = 0x00000126,
        E_MSG_FD_DESC_MOD_RES = 0x00000127,
        E_MSG_CHANNEL_DESC_MOD_REQ = 0x00000128,
        E_MSG_CHANNEL_DESC_MOD_RES = 0x00000129,
        E_MSG_UA_PRIVILEGE_REQ = 0x0000012a,
        E_MSG_UA_PRIVILEGE_RES = 0x0000012b,
        E_MSG_UA_MONITORSTART_REQ = 0x0000012c,
        E_MSG_UA_MONITORSTART_RES = 0x0000012d,
        E_MSG_UA_MONITORSTOP_REQ = 0x0000012e,
        E_MSG_UA_MONITORSTOP_RES = 0x0000012f,
        E_MSG_UA_RECORDSTART_REQ = 0x00000130,
        E_MSG_UA_RECORDSTART_RES = 0x00000131,
        E_MSG_UA_RECORDSTOP_REQ = 0x00000132,
        E_MSG_UA_RECORDSTOP_RES = 0x00000133,
        E_MSG_UA_PLAYBACKSTART_REQ = 0x00000134,
        E_MSG_UA_PLAYBACKSTART_RES = 0x00000135,
        E_MSG_UA_PLAYBACKSTOP_REQ = 0x00000136,
        E_MSG_UA_PLAYBACKSTOP_RES = 0x00000137,
        E_MSG_UA_DOWNLOADSTART_REQ = 0x00000138,
        E_MSG_UA_DOWNLOADSTART_RES = 0x00000139,
        E_MSG_UA_DOWNLOADSTOP_REQ = 0x0000013a,
        E_MSG_UA_DOWNLOADSTOP_RES = 0x0000013b,
        E_MSG_UA_DELETERECORD_REQ = 0x0000013c,
        E_MSG_UA_DELETERECORD_RES = 0x0000013d,
        E_MSG_UA_QUERYRECORD_REQ = 0x0000013e,
        E_MSG_UA_QUERYRECORD_RES = 0x0000013f,
        E_MSG_UA_QUERYFDSTATUS_REQ = 0x00000142,
        E_MSG_UA_QUERYFDSTATUS_RES = 0x00000143,
        E_MSG_UA_QUERYCAMERAPRESET_REQ = 0x00000144,
        E_MSG_UA_QUERYCAMERAPRESET_RES = 0x00000145,
        E_MSG_FD_NAME_MOD_REQ = 0x00000146,
        E_MSG_FD_NAME_MOD_RES = 0x00000147,
        E_MSG_CHANNEL_NAME_MOD_REQ = 0x00000148,
        E_MSG_CHANNEL_NAME_MOD_RES = 0x00000149,
        E_MSG_QUERY_UAROLE_REQ = 0x0000014a,
        E_MSG_QUERY_UAROLE_RES = 0x0000014b,
        E_MSG_QUERY_SUBROLE_REQ = 0x0000014c,
        E_MSG_QUERY_SUBROLE_RES = 0x0000014d,
        E_MSG_QUERY_SUBUAROLE_REQ = 0x0000014e,
        E_MSG_QUERY_SUBUAROLE_RES = 0x0000014f,
        E_MSG_QUERY_ROLEUSER_REQ = 0x00000150,
        E_MSG_QUERY_ROLEUSER_RES = 0x00000151,
        E_MSG_ADD_ROLE_REQ = 0x00000152,
        E_MSG_ADD_ROLE_RES = 0x00000153,
        E_MSG_DELETE_ROLE_REQ = 0x00000154,
        E_MSG_DELETE_ROLE_RES = 0x00000155,
        E_MSG_MODIFY_ROLE_REQ = 0x00000156,
        E_MSG_MODIFY_ROLE_RES = 0x00000157,
        E_MSG_UAPRIVILEGE_ADMIN_REQ = 0x00000158,
        E_MSG_UAPRIVILEGE_ADMIN_RES = 0x00000159,
        E_MSG_ONCERECORDSCHEDULE_ADMIN_REQ = 0x0000015a,
        E_MSG_ONCERECORDSCHEDULE_ADMIN_RES = 0x0000015b,
        E_MSG_QUERY_ONCERECORDSCHEDULE_REQ = 0x0000015c,
        E_MSG_QUERY_ONCERECORDSCHEDULE_RES = 0x0000015d,
        E_MSG_QUERY_RECORDSTATUS_REQ = 0x0000015e,
        E_MSG_QUERY_RECORDSTATUS_RES = 0x0000015f,
        E_MSG_QUERY_UASTATUS_REQ = 0x00000160,
        E_MSG_QUERY_UASTATUS_RES = 0x00000161,
        E_MSG_UA_FDACCREDIT_REQ = 0x00000162,
        E_MSG_UA_FDACCREDIT_RES = 0x00000163,
        E_MSG_UACONFIG_QUERY_REQ = 0x00000164,
        E_MSG_UACONFIG_QUERY_RES = 0x00000165,
        E_MSG_UACONFIG_ADMIN_REQ = 0x00000166,
        E_MSG_UACONFIG_ADMIN_RES = 0x00000167,
        E_MSG_QUERY_MAPINFO_REQ = 0x00000168,
        E_MSG_QUERY_MAPINFO_RES = 0x00000169,
        E_MSG_MODIFY_FDINFO_REQ = 0x0000016a,
        E_MSG_MODIFY_FDINFO_RES = 0x0000016b,
        E_MSG_QUERY_USERFDCHANNELRIGHT_REQ = 0x0000016c,
        E_MSG_QUERY_USERFDCHANNELRIGHT_RES = 0x0000016d,
        E_MSG_QUERY_LOCKINFO_REQ = 0x0000016e,
        E_MSG_QUERY_LOCKINFO_RES = 0x0000016f,
        E_MSG_FD_SIMPLE_LIST_REQ = 0x00000170,
        E_MSG_FD_SIMPLE_LIST_RES = 0x00000171,
        E_MSG_UA_MEDIAAUTH_REQ = 0x00000172,
        E_MSG_UA_MEDIAAUTH_RES = 0x00000173,
        E_MSG_CHECK_UPDATE_REQ = 0x00000174,
        E_MSG_CHECK_UPDATE_RES = 0x00000175,
        E_MSG_UA_CONTROL_RECORD_PLAYBACK_REQ = 0x00000176,
        E_MSG_UA_CONTROL_RECORD_PLAYBACK_RES = 0x00000177,
        E_MSG_UA_CONTROL_RECORD_DOWNLOAD_REQ = 0x00000178,
        E_MSG_UA_CONTROL_RECORD_DOWNLOAD_RES = 0x00000179,
        E_MSG_UA_LOCKRECORD_REQ = 0x0000017a,
        E_MSG_UA_LOCKRECORD_RES = 0x0000017b,
        E_MSG_LIST_DOMAIN_REQ = 0x0000017c,
        E_MSG_LIST_DOMAIN_RES = 0x0000017d,
        E_MSG_UA_QUERY_VIDEOIN_CAPACITY_REQ = 0x0000017e,
        E_MSG_UA_QUERY_VIDEOIN_CAPACITY_RES = 0x0000017f,
        E_MSG_UA_RADIUS_REQ = 0x00000180,
        E_MSG_UA_RADIUS_RES = 0x00000181,
        E_MSG_UA_TOUA_REQ = 0x00000182,
        E_MSG_UA_TOUA_RES = 0x00000183,
        E_MSG_UA_THIRD_MONITORSTART_REQ = 0x00000184,
        E_MSG_UA_THIRD_MONITORSTART_RES = 0x00000185,
        E_MSG_UA_THIRD_MONITORSTOP_REQ = 0x00000186,
        E_MSG_UA_THIRD_MONITORSTOP_RES = 0x00000187,
        E_MSG_UA_QUERY_PRESETSCHEDULE_REQ = 0x00000188,
        E_MSG_UA_QUERY_PRESETSCHEDULE_RES = 0x00000189,
        E_MSG_UA_SET_PRESETSCHEDULE_REQ = 0x0000018a,
        E_MSG_UA_SET_PRESETSCHEDULE_RES = 0x0000018b,
        E_MSG_TIME_XML_REQ = 0x0000018c,
        E_MSG_TIME_XML_RES = 0x0000018d,
        E_MSG_UA_BATLOCKRECORD_REQ = 0x0000018e,
        E_MSG_UA_BATLOCKRECORD_RES = 0x0000018f,
        E_MSG_UA_QUALITY_NOTIFY = 0x00000f00,
        E_MSG_FDMS_LOG_NOTIFY = 0x00000f02,
        E_MSG_UAS_EVENT_NOTIFY = 0x00000f03,
        E_MSG_RECORDSTOP_NOTIFY = 0x00000f04,
        E_MSG_UNSUPPORTCMD_NOTIFY = 0x00000f05,
        E_MSG_RECORDSTART_NOTIFY = 0x00000f06,
        E_MSG_FD_STATUS_NOTIFY = 0x00000f07,
        E_MSG_REG_LOGIN_STEP1_REQ = 0x00001000,
        E_MSG_REG_LOGIN_STEP1_RES = 0x00001001,
        E_MSG_REG_LOGIN_STEP2_REQ = 0x00001002,
        E_MSG_REG_LOGIN_STEP2_RES = 0x00001003,
        E_MSG_REG_LOGOUT_REQ = 0x00001004,
        E_MSG_REG_LOGOUT_RES = 0x00001005,
        E_MSG_REG_REPORT_CHANNEL_INFO = 0x00001006,
        E_MSG_PTZ_ACT_REQ = 0x00001008,
        E_MSG_PTZ_ACT_RES = 0x00001009,
        E_MSG_MONITOR_START_REQ = 0x00001100,
        E_MSG_MONITOR_START_RES = 0x00001101,
        E_MSG_MONITOR_STOP_REQ = 0x00001102,
        E_MSG_MONITOR_STOP_RES = 0x00001103,
        E_MSG_CONTROL_PTZ_REQ = 0x00001200,
        E_MSG_CONTROL_PTZ_RES = 0x00001201,
        E_MSG_CONTROL_MATRIX_REQ = 0x00001202,
        E_MSG_CONTROL_MATRIX_RES = 0x00001203,
        E_MSG_CONTROL_ADDCPS_REQ = 0x00001204,
        E_MSG_CONTROL_ADDCPS_RES = 0x00001205,
        E_MSG_CONTROL_DELCPS_REQ = 0x00001206,
        E_MSG_CONTROL_DELCPS_RES = 0x00001207,
        E_MSG_CONTROL_GOTOCPS_REQ = 0x00001208,
        E_MSG_CONTROL_GOTOCPS_RES = 0x00001209,
        E_MSG_CONTROL_CLRCPS_REQ = 0x0000120a,
        E_MSG_CONTROL_CLRCPS_RES = 0x0000120b,
        E_MSG_POINT_MAGNIFY_REQ = 0x0000120c,
        E_MSG_POINT_MAGNIFY_RES = 0x0000120d,
        E_MSG_QUERY_PTZ_REQ = 0x00001280,
        E_MSG_QUERY_PTZ_RES = 0x00001281,
        E_MSG_CALL_START_REQ = 0x00001300,
        E_MSG_CALL_START_RES = 0x00001301,
        E_MSG_CALL_STOP_REQ = 0x00001302,
        E_MSG_CALL_STOP_RES = 0x00001303,
        E_MSG_INVITE_THIRD_REQ = 0x00001304,
        E_MSG_INVITE_THIRD_RES = 0x00001305,
        E_MSG_GAB_CMD_REQ = 0x00001306,
        E_MSG_GAB_CMD_RES = 0x00001307,
        E_MSG_WARNING_NOTIFY = 0x00001400,
        E_MSG_RECORD_START_REQ = 0x00001500,
        E_MSG_RECORD_START_RES = 0x00001501,
        E_MSG_RECORD_STOP_REQ = 0x00001502,
        E_MSG_RECORD_STOP_RES = 0x00001503,
        E_MSG_RECORD_START_REPLAY_REQ = 0x00001504,
        E_MSG_RECORD_START_REPLAY_RES = 0x00001505,
        E_MSG_RECORD_STOP_REPLAY_REQ = 0x00001506,
        E_MSG_RECORD_STOP_REPLAY_RES = 0x00001507,
        E_MSG_RECORD_START_DOWNLOAD_REQ = 0x00001508,
        E_MSG_RECORD_START_DOWNLOAD_RES = 0x00001509,
        E_MSG_RECORD_STOP_DOWNLOAD_REQ = 0x0000150a,
        E_MSG_RECORD_STOP_DOWNLOAD_RES = 0x0000150b,
        E_MSG_RECORD_DELETE_FILE_REQ = 0x0000150c,
        E_MSG_RECORD_DELETE_FILE_RES = 0x0000150d,
        E_MSG_CONTROL_RECORD_REPLAY_REQ = 0x0000150e,
        E_MSG_CONTROL_RECORD_REPLAY_RES = 0x0000150f,
        E_MSG_CONTROL_RECORD_DOWNLOAD_REQ = 0x00001510,
        E_MSG_CONTROL_RECORD_DOWNLOAD_RES = 0x00001511,
        E_MSG_RECORD_LOCK_FILE_REQ = 0x00001512,
        E_MSG_RECORD_LOCK_FILE_RES = 0x00001513,
        E_MSG_REQUEST_URL_REQ = 0x00001514,
        E_MSG_REQUEST_URL_RES = 0x00001515,
        E_MSG_QUERY_RECORDINFO_REQ = 0x00001600,
        E_MSG_QUERY_RECORDINFO_RES = 0x00001601,
        E_MSG_QUERY_DISKINFO_REQ = 0x00001602,
        E_MSG_QUERY_DISKINFO_RES = 0x00001603,
        E_MSG_QUERY_SYSINFO_REQ = 0x00001604,
        E_MSG_QUERY_SYSINFO_RES = 0x00001605,
        E_MSG_QUERY_CAMINFO_REQ = 0x00001606,
        E_MSG_QUERY_CAMINFO_RES = 0x00001607,
        E_MSG_QUERY_CPSINFO_REQ = 0x00001608,
        E_MSG_QUERY_CPSINFO_RES = 0x00001609,
        E_MSG_QUERY_RECTIME_REQ = 0x0000160a,
        E_MSG_QUERY_RECTIME_RES = 0x0000160b,
        E_MSG_QUERY_VMOTION_REQ = 0x0000160e,
        E_MSG_QUERY_VMOTION_RES = 0x0000160f,
        E_MSG_QUERY_VLOST_REQ = 0x00001610,
        E_MSG_QUERY_VLOST_RES = 0x00001611,
        E_MSG_QUERY_VMOSAIC_REQ = 0x00001612,
        E_MSG_QUERY_VMOSAIC_RES = 0x00001613,
        E_MSG_QUERY_VPARAM_REQ = 0x00001614,
        E_MSG_QUERY_VPARAM_RES = 0x00001615,
        E_MSG_QUERY_STATUS_REQ = 0x00001616,
        E_MSG_QUERY_STATUS_RES = 0x00001617,
        E_MSG_QUERY_MIXTUREVIDEOINCHANNEL_REQ = 0x0000161a,
        E_MSG_QUERY_MIXTUREVIDEOINCHANNEL_RES = 0x0000161b,
        E_MSG_CAPTURE_REQ = 0x0000161c,
        E_MSG_CAPTURE_RES = 0x0000161d,
        E_MSG_QUERY_MATRIX_REQ = 0x0000161e,
        E_MSG_QUERY_MATRIX_RES = 0x0000161f,
        E_MSG_QUERY_FDLOG_REQ = 0x00001620,
        E_MSG_QUERY_FDLOG_RES = 0x00001621,
        E_MSG_QUERY_FDCONFIG_REQ = 0x00001622,
        E_MSG_QUERY_FDCONFIG_RES = 0x00001623,
        E_MSG_CONFIG_SYSINFO_REQ = 0x00001700,
        E_MSG_CONFIG_SYSINFO_RES = 0x00001701,
        E_MSG_CONFIG_CAMINFO_REQ = 0x00001702,
        E_MSG_CONFIG_CAMINFO_RES = 0x00001703,
        E_MSG_CONFIG_RECTIME_REQ = 0x00001704,
        E_MSG_CONFIG_RECTIME_RES = 0x00001705,
        E_MSG_CONFIG_VMOTION_REQ = 0x00001706,
        E_MSG_CONFIG_VMOTION_RES = 0x00001707,
        E_MSG_CONFIG_VLOST_REQ = 0x00001708,
        E_MSG_CONFIG_VLOST_RES = 0x00001709,
        E_MSG_CONFIG_VMOSAIC_REQ = 0x0000170a,
        E_MSG_CONFIG_VMOSAIC_RES = 0x0000170b,
        E_MSG_CONFIG_VPARAM_REQ = 0x0000170c,
        E_MSG_CONFIG_VPARAM_RES = 0x0000170d,
        E_MSG_CONFIG_MIXTUREVIDEOINCHANNEL_REQ = 0x00001712,
        E_MSG_CONFIG_MIXTUREVIDEOINCHANNEL_RES = 0x00001713,
        E_MSG_CMS_SET_PARAMETER_VALUES_REQ = 0x00001714,
        E_MSG_CMS_SET_PARAMETER_VALUES_RES = 0x00001715,
        E_MSG_CMS_GET_PARAMETER_VALUES_REQ = 0x00001716,
        E_MSG_CMS_GET_PARAMETER_VALUES_RES = 0x00001717,
        E_MSG_CMS_GET_PARAMETER_INFOS_REQ = 0x00001718,
        E_MSG_CMS_GET_PARAMETER_INFOS_RES = 0x00001719,
        E_MSG_CMS_SET_PARAMETER_ATTRIBUTES_REQ = 0x0000171a,
        E_MSG_CMS_SET_PARAMETER_ATTRIBUTES_RES = 0x0000171b,
        E_MSG_CMS_GET_PARAMETER_ATTRIBUTES_REQ = 0x0000171c,
        E_MSG_CMS_GET_PARAMETER_ATTRIBUTES_RES = 0x0000171d,
        E_MSG_UPDATE_FDCONFIG_REQ = 0x0000171e,
        E_MSG_UPDATE_FDCONFIG_RES = 0x0000171f,
        E_MSG_MGR_REMOTE_RESTART_REQ = 0x00001800,
        E_MSG_MGR_REMOTE_RESTART_RES = 0x00001801,
        E_MSG_MGR_QUERY_SYSTIME_REQ = 0x00001802,
        E_MSG_MGR_QUERY_SYSTIME_RES = 0x00001803,
        E_MSG_MGR_CONFIG_SYSTIME_REQ = 0x00001804,
        E_MSG_MGR_CONFIG_SYSTIME_RES = 0x00001805,
        E_MSG_MGR_UPGRADE_SOFTWARE_REQ = 0x00001806,
        E_MSG_MGR_UPGRADE_SOFTWARE_RES = 0x00001807,
        E_MSG_NONSTANDARD_CMD = 0x00001900,
        E_MSG_QUERY_ALARMRULE_REQ = 0x00002000,
        E_MSG_QUERY_ALARMRULE_RES = 0x00002001,
        E_MSG_QUERY_LAST_GUARD_STATUS_REQ = 0x00002002,
        E_MSG_QUERY_LAST_GUARD_STATUS_RES = 0x00002003,
        E_MSG_CONFIG_LAST_GUARD_STATUS_REQ = 0x00002004,
        E_MSG_CONFIG_LAST_GUARD_STATUS_RES = 0x00002005,
        E_MSG_QUERY_GUARD_SET_REQ = 0x00002006,
        E_MSG_QUERY_GUARD_SET_RES = 0x00002007,
        E_MSG_CONFIG_GUARD_SET_REQ = 0x00002008,
        E_MSG_CONFIG_GUARD_SET_RES = 0x00002009,
        E_MSG_CONFIG_ALARMRULE_REQ = 0x0000200a,
        E_MSG_CONFIG_ALARMRULE_RES = 0x0000200b,
        E_MSG_CANCEL_ALARM_REQ = 0x0000200c,
        E_MSG_CANCEL_ALARM_RES = 0x0000200d,
        E_MSG_DEAL_ALARM_REQ = 0x00002012,
        E_MSG_DEAL_ALARM_RES = 0x00002013,
        E_MSG_CONFIG_FDALARMHANDLE_REQ = 0x00002014,
        E_MSG_CONFIG_FDALARMHANDLE_RES = 0x00002015,
        E_MSG_SET_ALARMRULE_TIMESPAN_REQ = 0x00002016,
        E_MSG_SET_ALARMRULE_TIMESPAN_RES = 0x00002017,
        E_MSG_QUERY_CENTERALARMHANDLE_REQ = 0x00002018,
        E_MSG_QUERY_CENTERALARMHANDLE_RES = 0x00002019,
        E_MSG_CONFIG_CENTERALARMHANDLE_REQ = 0x0000201a,
        E_MSG_CONFIG_CENTERALARMHANDLE_RES = 0x0000201b,
        E_MSG_MANUAL_ALARM_REQ = 0x0000201c,
        E_MSG_MANUAL_ALARM_RES = 0x0000201d,
        E_MSG_DISABLE_ALARM_REQ = 0x0000201e,
        E_MSG_DISABLE_ALARM_RES = 0x0000201f,
        E_MSG_ALARM_NOTIFY = 0x000020a0,
        E_MSG_ALARM_NOTIFY_UA = 0x000020a2,
        E_MSG_ALARM_NOTIFY_FD = 0x000020a4,
        E_MSG_ALARM_DEAL_NOTIFY = 0x000020a6,
        E_MSG_TRIG_SCHEME_NOTIFY = 0x000020a8,
        E_MSG_GPS_REQ = 0x000020ac,
        E_MSG_GPS_RES = 0x000020ad,
        E_MSG_QUERY_RECORD_PLAN_REQ = 0x00002100,
        E_MSG_QUERY_RECORD_PLAN_RES = 0x00002101,
        E_MSG_CONFIG_RECORD_PLAN_REQ = 0x00002102,
        E_MSG_CONFIG_RECORD_PLAN_RES = 0x00002103,
        E_MSG_RECORD_PLAN_REQ = 0x000021a0,
        E_MSG_RECORD_PLAN_RES = 0x000021a1,
        E_MSG_COMMON_DEVICE_OPERATE_REQ = 0x00003000,
        E_MSG_COMMON_DEVICE_OPERATE_RES = 0x00003001,
        E_MSG_COMMON_REPORT_REQ = 0x00003010,
        E_MSG_COMMON_REPORT_RES = 0x00003011,
        E_MSG_COMMON_DBMS_OPERATE_REQ = 0x00003200,
        E_MSG_COMMON_DBMS_OPERATE_RES = 0x00003201,
        E_MSG_UA_WRITE_LOG_REQ = 0x00003202,
        E_MSG_UA_WRITE_LOG_RES = 0x00003203,
        E_MSG_FD_ACTION_REQ = 0x00003204,
        E_MSG_FD_ACTION_RES = 0x00003205,
        E_MSG_UA_ACTION_REQ = 0x00003206,
        E_MSG_UA_ACTION_RES = 0x00003207,
        E_MSG_UAS_PARALLEL_REGIST_REQ = 0x00005000,
        E_MSG_UAS_PARALLEL_REGIST_RES = 0x00005001,
        E_MSG_UAS_PARALLEL_LIST_CUSTOMER_REQ = 0x00005002,
        E_MSG_UAS_PARALLEL_LIST_CUSTOMER_RES = 0x00005003,
        E_MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_REQ = 0x00005004,
        E_MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_RES = 0x00005005,
        E_MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_REQ = 0x00005006,
        E_MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_RES = 0x00005007,
        E_MSG_UAS_PARALLEL_CUSTOMER_FDCHANNELPRIV_CHANEGED_NOTIFY = 0x00005008,
        E_MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_REQ = 0x0000500a,
        E_MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_RES = 0x0000500b,
        E_MSG_SSU_STARTRECORD_REQ = 0x00006000,
        E_MSG_SSU_STARTRECORD_RES = 0x00006001,
        E_MSG_FDSDK_LOGIN_REQ = 0x00008000,
        E_MSG_FDSDK_LOGIN_RES = 0x00008001,
        E_MSG_FDSDK_LOGOUT_REQ = 0x00008002,
        E_MSG_FDSDK_LOGOUT_RES = 0x00008003,
        E_MSG_FDSDK_NAME_VALUES_REQ = 0x00008004,
        E_MSG_FDSDK_NAME_VALUES_RES = 0x00008005,
        E_MSG_FDSDK_GET_GLOBAL_INFO_REQ = 0x00008100,
        E_MSG_FDSDK_GET_GLOBAL_INFO_RES = 0x00008101,
        E_MSG_FDSDK_GET_GLOBAL_NETWORK_REQ = 0x00008102 /*网络参数*/,
        E_MSG_FDSDK_GET_GLOBAL_NETWORK_RES = 0x00008103,
        E_MSG_FDSDK_GET_GLOBAL_NVIEW_REQ = 0x00008104 /*服务器*/,
        E_MSG_FDSDK_GET_GLOBAL_NVIEW_RES = 0x00008105,
        E_MSG_FDSDK_GET_GLOBAL_SDK_REQ = 0x00008106,
        E_MSG_FDSDK_GET_GLOBAL_SDK_RES = 0x00008107,
        E_MSG_FDSDK_GET_GLOBAL_NTP_REQ = 0x0000810a,
        E_MSG_FDSDK_GET_GLOBAL_NTP_RES = 0x0000810b,
        E_MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_REQ = 0x0000810c,
        E_MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_RES = 0x0000810d,
        E_MSG_FDSDK_GET_NVIEW_LOGIN_INFO_REQ = 0x0000810e,
        E_MSG_FDSDK_GET_NVIEW_LOGIN_INFO_RES = 0x0000810f,
        E_MSG_FDSDK_GET_MEDIA_CAPACITY_REQ = 0x00008110,
        E_MSG_FDSDK_GET_MEDIA_CAPACITY_RES = 0x00008111,
        E_MSG_FDSDK_GET_SERIAL_CAPACITY_REQ = 0x00008112,
        E_MSG_FDSDK_GET_SERIAL_CAPACITY_RES = 0x00008113,
        E_MSG_FDSDK_GET_AUDIO_IN_REQ = 0x00008200,
        E_MSG_FDSDK_GET_AUDIO_IN_RES = 0x00008201,
        E_MSG_FDSDK_GET_AUDIO_OUT_REQ = 0x00008240,
        E_MSG_FDSDK_GET_AUDIO_OUT_RES = 0x00008241,
        E_MSG_FDSDK_GET_VIDEO_IN_REQ = 0x00008300,
        E_MSG_FDSDK_GET_VIDEO_IN_RES = 0x00008301,
        E_MSG_FDSDK_GET_VIDEO_IN_MOSAIC_REQ = 0x00008302,
        E_MSG_FDSDK_GET_VIDEO_IN_MOSAIC_RES = 0x00008303,
        E_MSG_FDSDK_GET_VIDEO_IN_MOTION_REQ = 0x00008304,
        E_MSG_FDSDK_GET_VIDEO_IN_MOTION_RES = 0x00008305,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_REQ = 0x0000830c,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_RES = 0x0000830d,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_REQ = 0x0000830e,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_RES = 0x0000830f,
        E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_REQ = 0x00008310,
        E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_RES = 0x00008311,
        E_MSG_FDSDK_GET_VIDEO_IN_FACE_REQ = 0x00008312,
        E_MSG_FDSDK_GET_VIDEO_IN_FACE_RES = 0x00008313,
        E_MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_REQ = 0x00008314,
        E_MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_RES = 0x00008315,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_REQ = 0x00008316,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_RES = 0x00008317,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_REQ = 0x00008318,
        E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_RES = 0x00008319,
        E_MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_REQ = 0x0000831a,
        E_MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_RES = 0x0000831b,
        E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_REQ = 0x0000831c,
        E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_RES = 0x0000831d,
        E_MSG_FDSDK_GET_VIDEO_OUT_REQ = 0x00008340,
        E_MSG_FDSDK_GET_VIDEO_OUT_RES = 0x00008341,
        E_MSG_FDSDK_GET_ALARM_IN_REQ = 0x00008400,
        E_MSG_FDSDK_GET_ALARM_IN_RES = 0x00008401,
        E_MSG_FDSDK_GET_ALARM_OUT_REQ = 0x00008440,
        E_MSG_FDSDK_GET_ALARM_OUT_RES = 0x00008441,
        E_MSG_FDSDK_GET_ALARM_DEFENCE_REQ = 0x00008480,
        E_MSG_FDSDK_GET_ALARM_DEFENCE_RES = 0x00008481,
        E_MSG_FDSDK_GET_SERIAL_REQ = 0x00008500,
        E_MSG_FDSDK_GET_SERIAL_RES = 0x00008501,
        E_MSG_FDSDK_GET_IO_LIGHT_REQ = 0x00008502,
        E_MSG_FDSDK_GET_IO_LIGHT_RES = 0x00008503,
        E_MSG_FDSDK_GET_RECORD_CHANNEL_REQ = 0x00008702,
        E_MSG_FDSDK_GET_RECORD_CHANNEL_RES = 0x00008703,
        E_MSG_FDSDK_GET_RECORD_NAS_REQ = 0x00008704,
        E_MSG_FDSDK_GET_RECORD_NAS_RES = 0x00008705,
        E_MSG_FDSDK_GET_RECORD_REPLAY_SERVER_REQ = 0x00008706,
        E_MSG_FDSDK_GET_RECORD_REPLAY_SERVER_RES = 0x00008707,
        E_MSG_FDSDK_GET_RECORD_PLAN_REQ = 0x00008708,
        E_MSG_FDSDK_GET_RECORD_PLAN_RES = 0x00008709,
        E_MSG_FDSDK_SET_GLOBAL_INFO_REQ = 0x00009100,
        E_MSG_FDSDK_SET_GLOBAL_INFO_RES = 0x00009101,
        E_MSG_FDSDK_SET_GLOBAL_NETWORK_REQ = 0x00009102,
        E_MSG_FDSDK_SET_GLOBAL_NETWORK_RES = 0x00009103,
        E_MSG_FDSDK_SET_GLOBAL_NVIEW_REQ = 0x00009104,
        E_MSG_FDSDK_SET_GLOBAL_NVIEW_RES = 0x00009105,
        E_MSG_FDSDK_SET_GLOBAL_SDK_REQ = 0x00009106,
        E_MSG_FDSDK_SET_GLOBAL_SDK_RES = 0x00009107,
        E_MSG_FDSDK_SET_GLOBAL_NTP_REQ = 0x0000910a,
        E_MSG_FDSDK_SET_GLOBAL_NTP_RES = 0x0000910b,
        E_MSG_FDSDK_SET_AUDIO_IN_REQ = 0x00009200,
        E_MSG_FDSDK_SET_AUDIO_IN_RES = 0x00009201,
        E_MSG_FDSDK_SET_AUDIO_OUT_REQ = 0x00009240,
        E_MSG_FDSDK_SET_AUDIO_OUT_RES = 0x00009241,
        E_MSG_FDSDK_SET_VIDEO_IN_REQ = 0x00009300,
        E_MSG_FDSDK_SET_VIDEO_IN_RES = 0x00009301,
        E_MSG_FDSDK_SET_VIDEO_IN_MOSAIC_REQ = 0x00009302,
        E_MSG_FDSDK_SET_VIDEO_IN_MOSAIC_RES = 0x00009303,
        E_MSG_FDSDK_SET_VIDEO_IN_MOTION_REQ = 0x00009304,
        E_MSG_FDSDK_SET_VIDEO_IN_MOTION_RES = 0x00009305,
        E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_REQ = 0x0000930c,
        E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_RES = 0x0000930d,
        E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_REQ = 0x0000930e,
        E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_RES = 0x0000930f,
        E_MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_REQ = 0x00009310,
        E_MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_RES = 0x00009311,
        E_MSG_FDSDK_SET_VIDEO_IN_FACE_REQ = 0x00009312,
        E_MSG_FDSDK_SET_VIDEO_IN_FACE_RES = 0x00009313,
        E_MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_REQ = 0x00009314,
        E_MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_RES = 0x00009315,
        E_MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_REQ = 0x00009316,
        E_MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_RES = 0x00009317,
        E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_REQ = 0x00009318,
        E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_RES = 0x00009319,
        E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_REQ = 0x0000931a,
        E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_RES = 0x0000931b,
        E_MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_REQ = 0x0000931c,
        E_MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_RES = 0x0000931d,
        E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_REQ = 0x0000931e,
        E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_RES = 0x0000931f,
        E_MSG_FDSDK_SET_VIDEO_OUT_REQ = 0x00009340,
        E_MSG_FDSDK_SET_VIDEO_OUT_RES = 0x00009341,
        E_MSG_FDSDK_SET_ALARM_IN_REQ = 0x00009400,
        E_MSG_FDSDK_SET_ALARM_IN_RES = 0x00009401,
        E_MSG_FDSDK_SET_ALARM_OUT_REQ = 0x00009440,
        E_MSG_FDSDK_SET_ALARM_OUT_RES = 0x00009441,
        E_MSG_FDSDK_SET_ALARM_DEFENCE_REQ = 0x00009480,
        E_MSG_FDSDK_SET_ALARM_DEFENCE_RES = 0x00009481,
        E_MSG_FDSDK_SET_SERIAL_REQ = 0x00009500,
        E_MSG_FDSDK_SET_SERIAL_RES = 0x00009501,
        E_MSG_FDSDK_SET_IO_LIGHT_REQ = 0x00009502,
        E_MSG_FDSDK_SET_IO_LIGHT_RES = 0x00009503,
        E_MSG_FDSDK_RESTORE_CONFIG_REQ = 0x00009704,
        E_MSG_FDSDK_RESTORE_CONFIG_RES = 0x00009705,
        E_MSG_FDSDK_SET_RECORD_NAS_REQ = 0x00009706,
        E_MSG_FDSDK_SET_RECORD_NAS_RES = 0x00009707,
        E_MSG_FDSDK_SET_RECORD_REPLAY_SERVER_REQ = 0x00009708,
        E_MSG_FDSDK_SET_RECORD_REPLAY_SERVER_RES = 0x00009709,
        E_MSG_FDSDK_SET_RECORD_PLAN_REQ = 0x0000970a,
        E_MSG_FDSDK_SET_RECORD_PLAN_RES = 0x0000970b,
        E_MSG_FDSDK_CAPTURE_REQ = 0x00009800,
        E_MSG_FDSDK_CAPTURE_RES = 0x00009801,
        E_MSG_FDSDK_QUERY_CRUISE_REQ = 0x00009900,
        E_MSG_FDSDK_QUERY_CRUISE_RES = 0x00009901,
        E_MSG_FDSDK_SET_CRUISE_REQ = 0x00009902,
        E_MSG_FDSDK_SET_CRUISE_RES = 0x00009903,
        E_MSG_FDSDK_START_CRUISE_REQ = 0x00009904,
        E_MSG_FDSDK_START_CRUISE_RES = 0x00009905,
        E_MSG_FDSDK_STOP_CRUISE_REQ = 0x00009906,
        E_MSG_FDSDK_STOP_CRUISE_RES = 0x00009907,
        E_MSG_FDSDK_QUERY_WATCH_REQ = 0x00009908,
        E_MSG_FDSDK_QUERY_WATCH_RES = 0x00009909,
        E_MSG_FDSDK_SET_WATCH_REQ = 0x0000990a,
        E_MSG_FDSDK_SET_WATCH_RES = 0x0000990b,
        E_MSG_FD_AUTOFIND_REQ = 0x0000990c,
        E_MSG_FD_AUTOFIND_RES = 0x0000990d,
        E_MSG_FD_GETCHANNEL_REQ = 0x0000990e,
        E_MSG_FD_GETCHANNEL_RES = 0x0000990f,
        E_MSG_FD_SETCHANNEL_REQ = 0x00009910,
        E_MSG_FD_SETCHANNEL_RES = 0x00009911,
        E_MSG_FD_GETHDDINFO_REQ = 0x00009912,
        E_MSG_FD_GETHDDINFO_RES = 0x00009913,
        E_MSG_FD_FORMATHDD_REQ = 0x00009914,
        E_MSG_FD_FORMATHDD_RES = 0x00009915,
        E_MSG_FD_GETFORMATHDDSTATUS_REQ = 0x00009916,
        E_MSG_FD_GETFORMATHDDSTATUS_RES = 0x00009917,
        E_MSG_FD_SETHDDINFO_REQ = 0x00009918,
        E_MSG_FD_SETHDDINFO_RES = 0x00009919,
        E_MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_REQ = 0x0000991a,
        E_MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_RES = 0x0000991b,
        E_MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_REQ = 0x0000991c,
        E_MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_RES = 0x0000991d,
        E_MSG_FD_GET_PICTURE_MERGE_TYPE_REQ = 0x0000991e,
        E_MSG_FD_GET_PICTURE_MERGE_TYPE_RES = 0x0000991f,
        E_MSG_FD_SET_PICTURE_MERGE_TYPE_REQ = 0x00009920,
        E_MSG_FD_SET_PICTURE_MERGE_TYPE_RES = 0x00009921,
        E_MSG_FD_GET_CONFIG_PARAM_REQ = 0x00009922,
        E_MSG_FD_GET_CONFIG_PARAM_RES = 0x00009923,
        E_MSG_FD_SET_CONFIG_PARAM_REQ = 0x00009924,
        E_MSG_FD_SET_CONFIG_PARAM_RES = 0x00009925,
        E_MSG_FDCFG_GLOBAL_INFO = 0x0000a100,
        E_MSG_FDCFG_GLOBAL_NETWORK = 0x0000a101,
        E_MSG_FDCFG_GLOBAL_NVIEW = 0x0000a102,
        E_MSG_FDCFG_GLOBAL_SDK = 0x0000a103,
        E_MSG_FDCFG_GLOBAL_NTP = 0x0000a105,
        E_MSG_FDCFG_MEDIA_CAPACITY = 0x0000a106,
        E_MSG_FDCFG_SERIAL_CAPACITY = 0x0000a107,
        E_MSG_FDCFG_AUDIO_IN = 0x0000a200,
        E_MSG_FDCFG_AUDIO_OUT = 0x0000a240,
        E_MSG_FDCFG_VIDEO_IN = 0x0000a300,
        E_MSG_FDCFG_VIDEO_IN_MOSAIC = 0x0000a301,
        E_MSG_FDCFG_VIDEO_IN_MOTION = 0x0000a302,
        E_MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL = 0x0000a306,
        E_MSG_FDCFG_VIDEO_IN_CAPTURE = 0x0000a307,
        E_MSG_FDCFG_VIDEO_IN_FACE = 0x0000a308,
        E_MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL2 = 0x0000a309,
        E_MSG_FDCFG_VIDEO_IN_CAMERA_GAIN_MAP = 0x0000a30a,
        E_MSG_FDCFG_VIDEO_IN_PERIMETER_DETECT = 0x0000a30b,
        E_MSG_FDCFG_VIDEO_IN_CAPTURE_OSD = 0x0000a30c,
        E_MSG_FDCFG_VIDEO_OUT = 0x0000a340,
        E_MSG_FDCFG_ALARM_IN = 0x0000a400,
        E_MSG_FDCFG_ALARM_OUT = 0x0000a440,
        E_MSG_FDCFG_ALARM_DEFENCE = 0x0000a480,
        E_MSG_FDCFG_SERIAL = 0x0000a500,
        E_MSG_FDCFG_FD_CHANNEL = 0x0000a501,
        E_MSG_FDCFG_IO_LIGHT = 0x0000a502,
        E_MSG_FDCFG_RECORD_TIME = 0x0000a700,
        E_MSG_FDCFG_RECORD_NAS_INFO = 0x0000a701,
        E_MSG_FDCFG_RECORD_REPLAY_SERVER = 0x0000a702,
        E_MSG_FDCFG_CAMERA_PRESET_INFO = 0x0000a800,
        E_MSG_FDCFG_CRUISE = 0x0000a801,
        E_MSG_FDCFG_WATCH = 0x0000a802,
        E_MSG_FDCFG_REMOVABLE_STORAGE = 0x0000a803,
        E_MSG_FDCFG_PICTURE_MERGE_TYPE = 0x0000a804,
        E_MSG_FDCFG_INTELLIGENT_ALGORITHMS_CFG = 0x0000a805,
        E_MSG_FDCFG_CONFIG_PARAM = 0x0000a806,
    };

    struct IE_HEADER
    {
        const static unsigned short IE_TYPE = E_IE_HEADER;

        IE_HEADER()
        :magic(0)
        ,version(0)
        ,compress_flag(0)
        ,msg_type(0)
        ,msg_len(0)
        ,ie_num(0)
        ,seq_num(0)
        ,session_id(0)
        ,reserve(0)
        ,check_sum(0)
        {
        }

        zce_uint16    magic;
        zce_uint16    version;
        zce_uint16    compress_flag;
        zce_uint16    msg_type;
        zce_uint16    msg_len;
        zce_uint16    ie_num;
        zce_uint32    seq_num;
        zce_uint32    session_id;
        zce_astring src_dmn;
        zce_astring src_id;
        zce_astring dst_dmn;
        zce_astring dst_id;
        zce_uint32    reserve;
        zce_uint32    check_sum;
    };
    struct IE_astring64
    {
        const static unsigned short IE_TYPE = E_IE_astring64;
        IE_astring64() { };
        zce_astring desc;
    };
    struct IE_astring254
    {
        const static unsigned short IE_TYPE = E_IE_astring254;
        IE_astring254() { };
        zce_astring desc;
    };
    struct IE_astring
    {
        const static unsigned short IE_TYPE = E_IE_astring;
        IE_astring() { };
        zce_astring desc;
    };
    struct IE_CHAR16
    {
        const static unsigned short IE_TYPE = E_IE_CHAR16;

        IE_CHAR16()
        :ch(0)
        {
        }

        std::vector<zce_char> ch;
    };
    struct IE_ULONG
    {
        const static unsigned short IE_TYPE = E_IE_ULONG;

        IE_ULONG()
        :number(0)
        {
        }

        zce_uint32    number;
    };
    struct IE_UCHAR
    {
        const static unsigned short IE_TYPE = E_IE_UCHAR;

        IE_UCHAR()
        :uc(0)
        {
        }

        zce_byte    uc;
    };
    struct IE_TIME_SECTOR
    {
        const static unsigned short IE_TYPE = E_IE_TIME_SECTOR;

        IE_TIME_SECTOR()
        :begin_time(0)
        ,end_time(0)
        {
        }

        zce_uint32    begin_time;
        zce_uint32    end_time;
    };
    struct IE_USHORT
    {
        const static unsigned short IE_TYPE = E_IE_USHORT;

        IE_USHORT()
        :number(0)
        {
        }

        zce_uint16    number;
    };
    struct IE_NEGOTIATE_REQ
    {
        const static unsigned short IE_TYPE = E_IE_NEGOTIATE_REQ;

        IE_NEGOTIATE_REQ()
        :soft_version(0)
        ,client_type(0)
        {
        }

        zce_astring email/*email*/;
        std::vector<zce_uint16> soft_version/*软件版本号*/;
        zce_char    client_type/*'A' 管理员 'O'操作员*/;
    };
    struct IE_NEGOTIATE_RES
    {
        const static unsigned short IE_TYPE = E_IE_NEGOTIATE_RES;

        IE_NEGOTIATE_RES()
        :encrypt_algrithm(0)
        ,encrypt_seed(0)
        {
        }

        zce_astring domain_id/*域ID*/;
        zce_astring ua_id/*UAID*/;
        zce_char    encrypt_algrithm/*加密算法*/;
        std::vector<zce_char> encrypt_seed/*加密种子*/;
    };
    struct IE_ROLE_ID
    {
        const static unsigned short IE_TYPE = E_IE_ROLE_ID;
        IE_ROLE_ID() { };
        zce_astring id;
    };
    struct IE_UA_ID
    {
        const static unsigned short IE_TYPE = E_IE_UA_ID;
        IE_UA_ID() { };
        zce_astring id;
    };
    struct IE_UA
    {
        const static unsigned short IE_TYPE = E_IE_UA;
        IE_UA() { };
        UA_INFO    info;
    };
    struct IE_ROLE
    {
        const static unsigned short IE_TYPE = E_IE_ROLE;
        IE_ROLE() { };
        ROLE_INFO    info;
    };
    struct IE_UA_MOD_PASSWORD
    {
        const static unsigned short IE_TYPE = E_IE_UA_MOD_PASSWORD;

        IE_UA_MOD_PASSWORD()
        :old_pwd(0)
        ,new_pwd(0)
        {
        }

        zce_astring ua_id/*UAID*/;
        std::vector<zce_char> old_pwd/*用户老密码MD5*/;
        std::vector<zce_char> new_pwd/*用户新密码MD5*/;
    };
    struct IE_ROLE_FD_AUTHENTICATION
    {
        const static unsigned short IE_TYPE = E_IE_ROLE_FD_AUTHENTICATION;
        IE_ROLE_FD_AUTHENTICATION() { };
        ROLE_PRIVILEGE_INFO    info;
    };
    struct IE_UA_FD_AUTHENTICATION
    {
        const static unsigned short IE_TYPE = E_IE_UA_FD_AUTHENTICATION;
        IE_UA_FD_AUTHENTICATION() { };
        UA_PRIVILEGE_INFO    info;
    };
    struct IE_UA_ADD
    {
        const static unsigned short IE_TYPE = E_IE_UA_ADD;
        IE_UA_ADD() { };
        UA_INFO    info;
    };
    struct IE_UA_MODIFY
    {
        const static unsigned short IE_TYPE = E_IE_UA_MODIFY;
        IE_UA_MODIFY() { };
        UA_INFO_NOEMAIL    info;
    };
    struct IE_ROLE_PRIV_ADMIN
    {
        const static unsigned short IE_TYPE = E_IE_ROLE_PRIV_ADMIN;

        IE_ROLE_PRIV_ADMIN()
        :op_type(0)
        {
        }

        zce_char    op_type/*2增加 4删除 1修改*/;
        ROLE_PRIVILEGE_INFO    info/*权限信息*/;
    };
    struct IE_LOG_REQ
    {
        const static unsigned short IE_TYPE = E_IE_LOG_REQ;

        IE_LOG_REQ()
        :start_time(0)
        ,stop_time(0)
        {
        }

        zce_astring ua_id;
        zce_astring fd_id;
        CHANNEL_ID    channel_id;
        zce_uint32    start_time/*开始时间*/;
        zce_uint32    stop_time/*结束时间*/;
    };
    struct IE_QUALITY_REPORT
    {
        const static unsigned short IE_TYPE = E_IE_QUALITY_REPORT;

        IE_QUALITY_REPORT()
        :frame_rate(0)
        ,bit_speed(0)
        ,bytetotal_low(0)
        ,bytetotal_high(0)
        ,lost_frame(0)
        ,recv_frame(0)
        {
        }

        zce_astring fd_id;
        CHANNEL_ID    channel_id;
        zce_int32    frame_rate/*帧率*/;
        zce_int32    bit_speed/*码率*/;
        zce_int32    bytetotal_low/*收到的字节数（低）*/;
        zce_int32    bytetotal_high/*收到的MB字节数（高）*/;
        zce_int32    lost_frame/*丢帧数*/;
        zce_int32    recv_frame/*总帧数*/;
    };
    struct IE_FD_DESCRIBE
    {
        const static unsigned short IE_TYPE = E_IE_FD_DESCRIBE;
        IE_FD_DESCRIBE() { };
        zce_astring desc;
    };
    struct IE_CHANNEL_DESCRIBE
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_DESCRIBE;
        IE_CHANNEL_DESCRIBE() { };
        CHANNEL_ID    channel_id;
        zce_astring desc;
    };
    struct IE_CHANNEL_INFO
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_INFO;
        IE_CHANNEL_INFO() { };
        CHANNEL_INFO    channel_info;
    };
    struct IE_SCHEDULE_NOTIFY
    {
        const static unsigned short IE_TYPE = E_IE_SCHEDULE_NOTIFY;
        IE_SCHEDULE_NOTIFY() { };
        SCHEDULE_NOTIFY    notify/*调度信息*/;
    };
    struct IE_SCHEDULE_NOTIFY_IPV6
    {
        const static unsigned short IE_TYPE = E_IE_SCHEDULE_NOTIFY_IPV6;
        IE_SCHEDULE_NOTIFY_IPV6() { };
        SCHEDULE_NOTIFY_IPV6    notify_ipv6/*调度信息*/;
    };
    struct IE_RECORDSTART_REQ
    {
        const static unsigned short IE_TYPE = E_IE_RECORDSTART_REQ;

        IE_RECORDSTART_REQ()
        :begin_time(0)
        ,end_time(0)
        ,store_mode(0)
        {
        }

        zce_uint32    begin_time/*开始时间*/;
        zce_uint32    end_time/*结束时间*/;
        zce_uint32    store_mode/*存储模式, 0自动，1，满了停，2，循环*/;
    };
    struct IE_PORT_RANGE
    {
        const static unsigned short IE_TYPE = E_IE_PORT_RANGE;

        IE_PORT_RANGE()
        :min_port(0)
        ,max_port(0)
        {
        }

        zce_uint16    min_port;
        zce_uint16    max_port;
    };
    struct IE_FD_LOGIN_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FD_LOGIN_INFO;

        IE_FD_LOGIN_INFO()
        :pwd(0)
        ,seed(0)
        ,net_type(0)
        {
        }

        zce_astring fd_id/*设备编号*/;
        std::vector<zce_char> pwd/*设备登录密码(MD5),密码产生方式为：Md5(RandSeed+Md5(password))*/;
        std::vector<zce_char> seed/*随机种子*/;
        zce_uint16    net_type/*网络状况，第14,15比特位：保留，填0; 13比特位: 置1表示支持多tcp连接（无线设备）; 12比特位：填1表示支持MSG_RECORD_START_REQ指令; 第9,10,11比特位：保留，填0；第8比特位：填1表示支持多码流(QOS不等于1); 7-4比特位：保留，填0; 第0,1,2,3比特位：填1表示使用udp传输码流，填2表示使用tcp*/;
    };
    struct IE_NETADDRESS
    {
        const static unsigned short IE_TYPE = E_IE_NETADDRESS;

        IE_NETADDRESS()
        :addr(0)
        ,port(0)
        ,trans_type(0)
        ,reserve(0)
        {
        }

        zce_uint32    addr/*网络接口地址，IP地址，使用长整型来表示*/;
        zce_uint16    port/*端口*/;
        zce_byte    trans_type/*网络传输类型0：AUTO  1：UDP 2：TCP  3：Multicast*/;
        zce_byte    reserve/*保留字*/;
    };
    struct IE_NETADDRESS_IPV6
    {
        const static unsigned short IE_TYPE = E_IE_NETADDRESS_IPV6;

        IE_NETADDRESS_IPV6()
        :port(0)
        ,trans_type(0)
        ,reserve(0)
        {
        }

        zce_astring addr/*网络接口地址，IP地址，使用astring表示*/;
        zce_uint16    port/*端口*/;
        zce_byte    trans_type/*网络传输类型0：AUTO 1：UDP 2：TCP 3：Multicast*/;
        zce_byte    reserve/*保留字*/;
    };
    struct IE_NETADDRESS_ANY
    {
        const static unsigned short IE_TYPE = E_IE_NETADDRESS_ANY;

        IE_NETADDRESS_ANY()
        :port(0)
        ,trans_type(0)
        ,reserve(0)
        {
        }

        zce_astring addr/*网络接口地址，IP地址，使用astring表示*/;
        zce_uint16    port/*端口*/;
        zce_byte    trans_type/*网络传输类型0：AUTO 1：UDP 2：TCP 3：Multicast*/;
        zce_byte    reserve/*保留字*/;
    };
    struct IE_SERVER
    {
        const static unsigned short IE_TYPE = E_IE_SERVER;

        IE_SERVER()
        :port(0)
        ,trans_type(0)
        ,prefer(0)
        {
        }

        zce_astring addr/*网络接口地址，IP地址，使用astring表示*/;
        zce_uint16    port/*端口*/;
        zce_byte    trans_type/*传输类型0：AUTO 1：UDP 2：TCP 3：Multicast*/;
        zce_byte    prefer/*可用性权重，取值范围1~100，越大越prefer*/;
    };
    struct IE_NET_SCHEDULE_ADDRESS
    {
        const static unsigned short IE_TYPE = E_IE_NET_SCHEDULE_ADDRESS;

        IE_NET_SCHEDULE_ADDRESS()
        :protocol(0)
        ,direction(0)
        ,transport(0)
        ,action(0)
        ,ip(0)
        ,port(0)
        ,reserve(0)
        {
        }

        zce_byte    protocol/*协议: 0x01 UDP; 0x02 TCP*/;
        zce_byte    direction/*传输方向: 0x01 SEND; 0x02 RECV; 0x03 BOTH*/;
        zce_byte    transport/*传输协议: 0x01 RTP; 0x02 RTSP; 0x03 NWP（私有协议）; 0x04 GEP（私有协议）; 0x05 GESHP（私有协议）*/;
        zce_byte    action/*激活标志: 0x00 无需激活; 0x01 主动发送激活; 0x02 被动接收激活*/;
        zce_uint32    ip/*网络接口地址，IP地址，使用长整型来表示*/;
        zce_uint16    port/*本地网络端口*/;
        zce_uint16    reserve/*保留字（必须为两个）*/;
    };
    struct IE_NET_SCHEDULE_ADDRESS_IPV6
    {
        const static unsigned short IE_TYPE = E_IE_NET_SCHEDULE_ADDRESS_IPV6;

        IE_NET_SCHEDULE_ADDRESS_IPV6()
        :protocol(0)
        ,direction(0)
        ,transport(0)
        ,action(0)
        ,port(0)
        ,reserve(0)
        {
        }

        zce_byte    protocol/*协议: 0x01 UDP; 0x02 TCP*/;
        zce_byte    direction/*传输方向: 0x01 SEND; 0x02 RECV; 0x03 BOTH*/;
        zce_byte    transport/*传输协议: 0x01 RTP; 0x02 RTSP; 0x03 NWP（私有协议）; 0x04 GEP（私有协议）; 0x05 GESHP（私有协议）*/;
        zce_byte    action/*激活标志: 0x00 无需激活; 0x01 主动发送激活; 0x02 被动接收激活*/;
        zce_astring addr/*网络接口地址，IP地址，使用astring表示*/;
        zce_uint16    port/*本地网络端口*/;
        zce_uint16    reserve/*保留字（必须为两个）*/;
    };
    struct IE_VIDEOIN_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_VIDEOIN_CHANNEL;
        IE_VIDEOIN_CHANNEL() { };
        VIDEOIN_CHANNEL    vi_channel;
    };
    struct IE_VIDEOOUT_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_VIDEOOUT_CHANNEL;
        IE_VIDEOOUT_CHANNEL() { };
        VIDEOOUT_CHANNEL    vo_channel;
    };
    struct IE_AUDIOIN_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_AUDIOIN_CHANNEL;
        IE_AUDIOIN_CHANNEL() { };
        AUDIOIN_CHANNEL    ai_channel;
    };
    struct IE_AUDIOOUT_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_AUDIOOUT_CHANNEL;
        IE_AUDIOOUT_CHANNEL() { };
        AUDIOOUT_CHANNEL    ao_channel;
    };
    struct IE_WARNIN_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_WARNIN_CHANNEL;
        IE_WARNIN_CHANNEL() { };
        WARNIN_CHANNEL    wi_channel;
    };
    struct IE_WARNOUT_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_WARNOUT_CHANNEL;
        IE_WARNOUT_CHANNEL() { };
        WARNOUT_CHANNEL    wo_channel;
    };
    struct IE_NONSTANDARD_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_NONSTANDARD_CHANNEL;
        IE_NONSTANDARD_CHANNEL() { };
        NONSTANDARD_CHANNEL    ns_channel;
    };
    struct IE_MATRIX
    {
        const static unsigned short IE_TYPE = E_IE_MATRIX;
        IE_MATRIX() { };
        MATRIX_INFO    matrix;
    };
    struct IE_PTZ_CMD
    {
        const static unsigned short IE_TYPE = E_IE_PTZ_CMD;

        IE_PTZ_CMD()
        :action(0)
        ,param(0)
        {
        }

        CHANNEL_ID    channel_id/*通道号*/;
        zce_byte    action/*控制命令,命令定义参见附加说明*/;
        zce_byte    param/*控制参数，速度范围[0, 6]，亮度、对比度、饱和度、色度范围[0, 100]*/;
    };
    struct IE_CTRL_CMD
    {
        const static unsigned short IE_TYPE = E_IE_CTRL_CMD;

        IE_CTRL_CMD()
        :control_type(0)
        ,param(0)
        {
        }

        zce_byte    control_type/*控制类型，取值如下：0x01：快进 0x02：快退 0x03：暂停 0x04：停止 0x05：继续回放 0x06：回放拖动 0x07: 慢进 0x08: 慢退 0x09: 单帧放 0x0a: 以当前倍率向前放 0x0b: 以当前倍率向后放 0x0c: 设置只发I帧模式的倍率 0x0d: pause at*/;
        zce_int32    param/*拖动时填time_t（1970年1月1日以来的秒数）;快进、快退、慢进、慢退时填倍数, (快进、快退:小于100时表示倍率，>100表示param/100.0，如130表示1.3倍率),(慢进、慢退：小于100表示1/param, >100表示100.0/param，如125表示100.0/125=0.8倍率);设置只发I帧倍率时填倍率*100（如4倍速填400)*/;
    };
    struct IE_ALARM_INFO
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_INFO;

        IE_ALARM_INFO()
        :alarm_type(0)
        ,user_data(0)
        {
        }

        zce_uint16    alarm_type/*前端设备告警类型(见6.5告警类型表)*/;
        CHANNEL_ID    alarm_channel_id/*告警通道号*/;
        CHANNEL_ID    video_channel_id/*对应的视频通道号*/;
        std::vector<zce_char> user_data/*与指定告警相关信息*/;
    };
    struct IE_TIME
    {
        const static unsigned short IE_TYPE = E_IE_TIME;

        IE_TIME()
        :time(0)
        {
        }

        zce_uint32    time/*使用长整型来表示*/;
    };
    struct IE_TIME_DETAIL_LIST
    {
        const static unsigned short IE_TYPE = E_IE_TIME_DETAIL_LIST;

        IE_TIME_DETAIL_LIST()
        :workday(0)
        ,begin_hour(0)
        ,begin_minute(0)
        ,end_hour(0)
        ,end_minute(0)
        ,record_flag(0)
        ,timespan(0)
        {
        }

        zce_byte    workday/*表明哪个工作日  星期日=0，星期一=1，星期二=2，星期三=3，星期四=4，星期五=5，星期六=6，特殊值=7,表示每天*/;
        zce_byte    begin_hour/*开始时间之小时，0~23*/;
        zce_byte    begin_minute/*开始时间之分钟，0~59*/;
        zce_byte    end_hour/*结束时间之小时，0~23*/;
        zce_byte    end_minute/*结束时间之分钟，0~59*/;
        zce_byte    record_flag/*是否进行录像 0x00，不进行录像 0x01，进行录像 */;
        zce_int32    timespan/*单个文件的时间片*/;
    };
    struct IE_SYSTEM_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_SYSTEM_CONFIG;

        IE_SYSTEM_CONFIG()
        :server_ip(0)
        ,server_port(0)
        {
        }

        zce_uint32    server_ip/*服务器IP地址*/;
        zce_uint16    server_port/*服务器侦听端口*/;
        zce_astring fd_id/*设备编号*/;
        zce_astring fd_name/*设备名称*/;
    };
    struct IE_SYSTEM_CONFIG_IPV6
    {
        const static unsigned short IE_TYPE = E_IE_SYSTEM_CONFIG_IPV6;

        IE_SYSTEM_CONFIG_IPV6()
        :server_port(0)
        {
        }

        zce_astring server_ip/*服务器IP地址，用astring表示服务器IP地址，用astring表示*/;
        zce_uint16    server_port/*服务器侦听端口*/;
        zce_astring fd_id/*设备编号*/;
        zce_astring fd_name/*设备名称*/;
    };
    struct IE_VIDEO_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_VIDEO_CONFIG;

        IE_VIDEO_CONFIG()
        :channel_type(0)
        ,channel_no(0)
        ,video_format(0)
        ,video_resolution(0)
        ,video_priority(0)
        ,frame_rate(0)
        ,iframe_iterval(0)
        ,bit_rate(0)
        {
        }

        zce_uint16    channel_type/*通道类型*/;
        zce_uint16    channel_no/*通道编号（设备内唯一）*/;
        zce_uint16    video_format/*视频编码格式,参见附表*/;
        zce_uint16    video_resolution/*支持的视频显示格式,参见附表*/;
        zce_byte    video_priority/*视频码率优先格式(速度优先或者是质量优先)0 - 速度优先 1 - 质量优先*/;
        zce_byte    frame_rate/*帧率1～25*/;
        zce_uint16    iframe_iterval/*关键帧间隔2-2500*/;
        zce_uint32    bit_rate/*编码比特率,单位kbps*/;
    };
    struct IE_AUDIO_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_AUDIO_CONFIG;

        IE_AUDIO_CONFIG()
        :channel_type(0)
        ,channel_no(0)
        ,format(0)
        ,volumn(0)
        ,back_mng(0)
        ,mute(0)
        {
        }

        zce_uint16    channel_type/*通道类型*/;
        zce_uint16    channel_no/*通道编号（设备内唯一）*/;
        zce_byte    format/*当前音频编码格式*/;
        zce_uint16    volumn/*编码音量0～25*/;
        zce_byte    back_mng/*是否回声抵消*/;
        zce_byte    mute/*是否哑音*/;
    };
    struct IE_VIDEO_REGION
    {
        const static unsigned short IE_TYPE = E_IE_VIDEO_REGION;

        IE_VIDEO_REGION()
        :region(0)
        {
        }

        std::vector<zce_uint16> region/*视频区域，以bit来代表一个像素宽16点，高12点*/;
    };
    struct IE_VIDEO_MOTION
    {
        const static unsigned short IE_TYPE = E_IE_VIDEO_MOTION;

        IE_VIDEO_MOTION()
        :record_flag(0)
        ,sensitivity(0)
        ,alarm_out(0)
        ,alarm_outport(0)
        ,alarm_time(0)
        ,record_time(0)
        ,video_region(0)
        {
        }

        zce_byte    record_flag/*是否录像*/;
        zce_byte    sensitivity/*灵敏度，1：高灵敏度 2：中灵敏度3：低灵敏度*/;
        zce_byte    alarm_out/*是否告警输出*/;
        zce_byte    alarm_outport/*告警输出端口号*/;
        zce_uint16    alarm_time;
        zce_uint16    record_time;
        std::vector<zce_uint16> video_region/*视频区域，以bit来代表一个像素宽16点，高12点*/;
    };
    struct IE_WARNIN_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_WARNIN_CONFIG;

        IE_WARNIN_CONFIG()
        :type(0)
        {
        }

        zce_byte    type/*类别 0：火警探测设备 1：烟感设备 2：红外设备 3：温度探测设备 4：气体探测设备255：其他告警输入设备*/;
    };
    struct IE_WARNOUT_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_WARNOUT_CONFIG;

        IE_WARNOUT_CONFIG()
        :type(0)
        {
        }

        zce_byte    type/*类别 0：警灯输出设备 1：警铃输出设备 255：其他告警输出设备 */;
    };
    struct IE_CAMERA_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_CAMERA_CONFIG;

        IE_CAMERA_CONFIG()
        :type(0)
        ,video_channel(0)
        ,rs485(0)
        ,data_bits(0)
        ,stop_bits(0)
        ,parity(0)
        ,baudrate(0)
        ,ptz_point(0)
        ,light_ctrl(0)
        ,light_ctrl_485(0)
        ,light_ctrl_point(0)
        ,light_ctrl_databits(0)
        ,light_ctrl_stopbits(0)
        ,light_ctrl_parity(0)
        ,light_ctrl_baudrate(0)
        ,reserve(0)
        {
        }

        zce_astring no/*摄像机编号*/;
        zce_astring name/*摄像机名称*/;
        zce_byte    type/*摄像机类型*/;
        zce_byte    video_channel/*视频通道*/;
        zce_byte    rs485/*摄像机的485地址*/;
        zce_byte    data_bits/*数据位*/;
        zce_byte    stop_bits/*停止位*/;
        zce_byte    parity/*奇偶校验位*/;
        zce_byte    baudrate/*波特率*/;
        zce_byte    ptz_point/*云台控制器的点号*/;
        zce_byte    light_ctrl/*是否有灯光控制*/;
        zce_byte    light_ctrl_485/*灯光控制器485地址*/;
        zce_byte    light_ctrl_point/*对应灯光控制器上的点号*/;
        zce_byte    light_ctrl_databits/*灯光控制器数据位*/;
        zce_byte    light_ctrl_stopbits/*灯光控制器停止位*/;
        zce_byte    light_ctrl_parity/*灯光控制器奇偶校验位*/;
        zce_byte    light_ctrl_baudrate/*灯光控制器波特率*/;
        zce_byte    reserve/*保留字节*/;
    };
    struct IE_CAMERA_PRESET_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_CAMERA_PRESET_CONFIG;

        IE_CAMERA_PRESET_CONFIG()
        :preset_no(0)
        ,reserve(0)
        {
        }

        zce_byte    preset_no/*预置点编号*/;
        zce_byte    reserve/*保留字*/;
        zce_astring preset_name/*预置点名称*/;
    };
    struct IE_POINT_MAGNIFY_PARAM
    {
        const static unsigned short IE_TYPE = E_IE_POINT_MAGNIFY_PARAM;

        IE_POINT_MAGNIFY_PARAM()
        :percent(0)
        ,left(0)
        ,top(0)
        ,right(0)
        ,bottom(0)
        {
        }

        zce_uint16    percent/*低十五位为0表示点击平移；为1表示框选放大；为2表示框选放大返回(矩形参数填0)。最高位为1表示用百分比表示坐标0~100；最高位为0表示用实际坐标表示。*/;
        zce_uint16    left/*左边坐标。点击平移用坐标left和top表示一个点*/;
        zce_uint16    top;
        zce_uint16    right;
        zce_uint16    bottom;
    };
    struct IE_DOMAIN_INFO
    {
        const static unsigned short IE_TYPE = E_IE_DOMAIN_INFO;
        IE_DOMAIN_INFO() { };
        zce_astring domain_id/*域ID*/;
        zce_astring domain_desc/*域描述*/;
    };
    struct IE_FD_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FD_INFO;
        IE_FD_INFO() { };
        FD_INFO    fd;
    };
    struct IE_FD_INFO_V3
    {
        const static unsigned short IE_TYPE = E_IE_FD_INFO_V3;
        IE_FD_INFO_V3() { };
        FD_INFO_V3    fd_info_v3;
    };
    struct IE_FD_INFO_V4
    {
        const static unsigned short IE_TYPE = E_IE_FD_INFO_V4;
        IE_FD_INFO_V4() { };
        FD_INFO_V4    fd_info_v4;
    };
    struct IE_FD_ID
    {
        const static unsigned short IE_TYPE = E_IE_FD_ID;
        IE_FD_ID() { };
        zce_astring id/*设备编号*/;
    };
    struct IE_CHANNEL_ID
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_ID;
        IE_CHANNEL_ID() { };
        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
    };
    struct IE_FD_CHANNEL_ID
    {
        const static unsigned short IE_TYPE = E_IE_FD_CHANNEL_ID;
        IE_FD_CHANNEL_ID() { };
        zce_astring id/*设备编号*/;
        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
    };
    struct IE_TIME_FILE
    {
        const static unsigned short IE_TYPE = E_IE_TIME_FILE;

        IE_TIME_FILE()
        :flag(0)
        ,reserve(0)
        ,begin_time(0)
        ,end_time(0)
        ,size(0)
        {
        }

        zce_byte    flag/*使用方式: 0不使用; 1使用时间; 2使用文件; 3支持回放地址*/;
        zce_byte    reserve/*保留*/;
        zce_uint32    begin_time/*起始时间*/;
        zce_uint32    end_time/*结束时间*/;
        zce_astring name/*文件名称规范: FDID+Channnel+Type+start_yymmddhhmmss+end_yymmddhhmmss,其中Type为：0: 立即录像1: 计划录像2: 告警录像3: 周期录像  如果flag=3为回放模式，文件名为FDID+Channnel+Type+start_yymmddhhmmss+end_yymmddhhmmss+\r\n+url */;
        zce_uint16    size/*文件大小，基本单位：MB*/;
    };
    struct IE_TIME_FILE_V2
    {
        const static unsigned short IE_TYPE = E_IE_TIME_FILE_V2;

        IE_TIME_FILE_V2()
        :flag(0)
        ,status(0)
        ,unlock_time(0)
        ,begin_time(0)
        ,end_time(0)
        ,qos(0)
        ,size(0)
        {
        }

        zce_byte    flag/*使用方式: 0不使用; 
        UA->UAS: 1使用时间; 2使用文件; 3使用时间段，并要求返回直接回放、下载URL; 4使用GUID; 
        平台->UA: 5使用时间段，及类实时监控模式; 6使用文件名，及类实时监控模式; 7使用文件名，及类实时监控模式进行回放和下载*/;
        zce_byte    status/*状态: 0x01锁定标志; 0x02可回放标志; 0x04可下载标志; 0x08星望SSU; 0x10第三方厂家NVR; 0x20支持跨文件回放;0x40GAB协议设备*/;
        zce_uint32    unlock_time/*解锁时间，0或小于当前时间都表明解锁*/;
        zce_uint32    begin_time/*起始时间*/;
        zce_uint32    end_time/*结束时间*/;
        zce_astring id/*设备编号*/;
        CHANNEL_ID    channel_id/*通道编号（设备内）*/;
        zce_byte    qos/*QoS级别*/;
        zce_uint32    size/*文件大小，基本单位：B*/;
        zce_astring area/*存储区域*/;
        zce_astring name/*文件名*/;
        zce_astring playback_url/*直接回放URL*/;
        zce_astring download_url/*直接下载URL*/;
    };
    struct IE_TIME_XML
    {
        const static unsigned short IE_TYPE = E_IE_TIME_XML;

        IE_TIME_XML()
        :tt(0)
        ,ms(0)
        ,type(0)
        {
        }

        zce_uint32    tt/*time_t*/;
        zce_uint32    ms/*毫秒数*/;
        zce_uint32    type/*类型*/;
        zce_astring xml;
    };
    struct IE_RESULT
    {
        const static unsigned short IE_TYPE = E_IE_RESULT;

        IE_RESULT()
        :error_code(0)
        {
        }

        zce_int32    error_code;
    };
    struct IE_VERSION
    {
        const static unsigned short IE_TYPE = E_IE_VERSION;

        IE_VERSION()
        :major_version(0)
        ,minor_version(0)
        ,build_version(0)
        ,revision_version(0)
        {
        }

        zce_byte    major_version/* 主版本*/;
        zce_byte    minor_version/*小版本*/;
        zce_uint16    build_version/*编译版本*/;
        zce_uint16    revision_version/*修订版本*/;
    };
    struct IE_UUDATA
    {
        const static unsigned short IE_TYPE = E_IE_UUDATA;

        IE_UUDATA()
        :reserve(0)
        ,content(0)
        {
        }

        std::vector<zce_char> reserve/*保留*/;
        std::vector<zce_char> content/*不定长的字节流*/;
    };
    struct IE_HARDDISK
    {
        const static unsigned short IE_TYPE = E_IE_HARDDISK;

        IE_HARDDISK()
        :total_capacity(0)
        ,spare_capacity(0)
        {
        }

        zce_uint32    total_capacity/*单个硬盘总容量，单位：MB*/;
        zce_uint32    spare_capacity/*单个硬盘剩余容量，单位：MB*/;
    };
    struct IE_DEAL_ALARM
    {
        const static unsigned short IE_TYPE = E_IE_DEAL_ALARM;

        IE_DEAL_ALARM()
        :sessionid(0)
        ,action(0)
        ,dealtime(0)
        {
        }

        zce_astring fd_id;
        zce_uint32    sessionid/*告警会话id*/;
        zce_char    action/*处理动作 1开始处理 2完成处理*/;
        zce_uint32    dealtime/*处理时间 1970-秒*/;
        zce_astring dealer/*处理人帐号（邮件）*/;
        zce_astring dealmemo/*处理描述*/;
    };
    struct IE_OPERATE_LOG
    {
        const static unsigned short IE_TYPE = E_IE_OPERATE_LOG;

        IE_OPERATE_LOG()
        :time(0)
        {
        }

        zce_astring ua_id;
        zce_astring object;
        zce_astring action;
        zce_uint32    time;
        zce_astring detail;
    };
    struct IE_FD_VERSION
    {
        const static unsigned short IE_TYPE = E_IE_FD_VERSION;

        IE_FD_VERSION()
        :hardware_ver(0)
        ,software_ver(0)
        {
        }

        zce_uint16    hardware_ver;
        zce_uint32    software_ver;
    };
    struct IE_FD_VERSION_V2
    {
        const static unsigned short IE_TYPE = E_IE_FD_VERSION_V2;
        IE_FD_VERSION_V2() { };
        zce_astring hardware_ver;
        zce_astring software_ver;
        zce_astring model;
        zce_astring sn;
        zce_astring hardwareid;
    };
    struct IE_CAPTURE
    {
        const static unsigned short IE_TYPE = E_IE_CAPTURE;

        IE_CAPTURE()
        :capture_time(0)
        ,pic_size(0)
        ,compress_type(0)
        ,pic_type(0)
        ,precision(0)
        {
        }

        zce_uint32    capture_time;
        zce_byte    pic_size;
        zce_byte    compress_type;
        zce_byte    pic_type;
        zce_byte    precision;
    };
    struct IE_PICTURE
    {
        const static unsigned short IE_TYPE = E_IE_PICTURE;

        IE_PICTURE()
        :pic(0)
        {
        }

        std::vector<zce_char> pic;
    };
    struct IE_PICTURE_V2
    {
        const static unsigned short IE_TYPE = E_IE_PICTURE_V2;

        IE_PICTURE_V2()
        :pic(0)
        {
        }

        std::vector<zce_char> pic;
    };
    struct IE_ANY
    {
        const static unsigned short IE_TYPE = E_IE_ANY;

        IE_ANY()
        :any(0)
        {
        }

        std::vector<zce_byte> any;
    };
    struct IE_ANY_V2
    {
        const static unsigned short IE_TYPE = E_IE_ANY_V2;

        IE_ANY_V2()
        :any(0)
        {
        }

        std::vector<zce_byte> any/*小于10MB*/;
    };
    struct IE_MAPINFO
    {
        const static unsigned short IE_TYPE = E_IE_MAPINFO;

        IE_MAPINFO()
        :size(0)
        ,update_time(0)
        {
        }

        zce_astring name;
        zce_astring province;
        zce_astring district;
        zce_astring url;
        zce_uint32    size;
        zce_uint32    update_time;
        zce_astring description;
    };
    struct IE_FD_ACTIVE_STATUS
    {
        const static unsigned short IE_TYPE = E_IE_FD_ACTIVE_STATUS;
        IE_FD_ACTIVE_STATUS() { };
        zce_astring fd_id;
        FD_ACTIVE_STATUS    status;
    };
    struct IE_UAS_EVENT_NOTIFY
    {
        const static unsigned short IE_TYPE = E_IE_UAS_EVENT_NOTIFY;

        IE_UAS_EVENT_NOTIFY()
        :type(0)
        {
        }

        zce_int32    type;
        zce_astring desc;
    };
    struct IE_CHANNEL_NAME
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_NAME;
        IE_CHANNEL_NAME() { };
        CHANNEL_ID    channel_id;
        zce_astring name;
    };
    struct IE_CHANNEL_NAME_V2
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_NAME_V2;
        IE_CHANNEL_NAME_V2() { };
        CHANNEL_ID    channel_id;
        zce_astring name;
    };
    struct IE_UA_ROLE
    {
        const static unsigned short IE_TYPE = E_IE_UA_ROLE;

        IE_UA_ROLE()
        :ua_type(0)
        {
        }

        ROLE_INFO    role_info;
        zce_byte    ua_type;
    };
    struct IE_ROLE_USER
    {
        const static unsigned short IE_TYPE = E_IE_ROLE_USER;

        IE_ROLE_USER()
        :ua_type(0)
        {
        }

        UA_INFO    ua_info;
        zce_byte    ua_type;
    };
    struct IE_UA_PRIV_ADMIN
    {
        const static unsigned short IE_TYPE = E_IE_UA_PRIV_ADMIN;

        IE_UA_PRIV_ADMIN()
        :ua_type(0)
        ,op_type(0)
        {
        }

        zce_astring email;
        zce_astring ua_id;
        zce_astring role_id;
        zce_byte    ua_type;
        zce_byte    op_type;
    };
    struct IE_TIME_SECTOR_WITHGUID
    {
        const static unsigned short IE_TYPE = E_IE_TIME_SECTOR_WITHGUID;

        IE_TIME_SECTOR_WITHGUID()
        :guid(0)
        ,begin_time(0)
        ,end_time(0)
        ,timespan(0)
        {
        }

        std::vector<zce_char> guid/*时间信息的GUID*/;
        zce_uint32    begin_time/*起始时间*/;
        zce_uint32    end_time/*结束时间*/;
        zce_int32    timespan/*单个录像文件的时间长度（秒）*/;
    };
    struct IE_RECORD_STATUS
    {
        const static unsigned short IE_TYPE = E_IE_RECORD_STATUS;

        IE_RECORD_STATUS()
        :status(0)
        ,begin_time(0)
        ,end_time(0)
        ,bytes(0)
        ,timespan(0)
        {
        }

        zce_astring uaid/*uaid*/;
        CHANNEL_ID    channel_id/*通道ID*/;
        zce_char    status/*录像状态 0 正在录像 1 正在准备开始录像 2 没有录像 3 未知状态*/;
        zce_uint32    begin_time/*起始时间*/;
        zce_uint32    end_time/*结束时间*/;
        zce_uint32    bytes/*字节数，本次已经录的兆字节数*/;
        zce_int32    timespan/*=-1 不截断，> 0 多少秒截断一个文件*/;
    };
    struct IE_LONG
    {
        const static unsigned short IE_TYPE = E_IE_LONG;

        IE_LONG()
        :number(0)
        {
        }

        zce_int32    number;
    };
    struct IE_ONLINE_STATUS
    {
        const static unsigned short IE_TYPE = E_IE_ONLINE_STATUS;

        IE_ONLINE_STATUS()
        :is_online(0)
        {
        }

        zce_char    is_online/*0：不在线；1：在线*/;
    };
    struct IE_CHANNEL_PRIVILEGE
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_PRIVILEGE;

        IE_CHANNEL_PRIVILEGE()
        :channel_type(0)
        ,channel_no(0)
        ,priv(0)
        {
        }

        zce_uint16    channel_type/*通道类型*/;
        zce_uint16    channel_no/*通道号*/;
        zce_byte    priv/*权限: Read = 0x0001; Write = 0x0002; Contrl = 0x0004; Manage = 0x0008;*/;
    };
    struct IE_FD_IDNAME
    {
        const static unsigned short IE_TYPE = E_IE_FD_IDNAME;
        IE_FD_IDNAME() { };
        zce_astring fd_id/*客户ID*/;
        zce_astring fd_name/*客户名称*/;
    };
    struct IE_CLIENT_IDNAME
    {
        const static unsigned short IE_TYPE = E_IE_CLIENT_IDNAME;
        IE_CLIENT_IDNAME() { };
        zce_astring client_id/*客户ID*/;
        zce_astring client_name/*客户名称*/;
    };
    struct IE_UPDATE_SOFTWARE
    {
        const static unsigned short IE_TYPE = E_IE_UPDATE_SOFTWARE;

        IE_UPDATE_SOFTWARE()
        :time(0)
        {
        }

        zce_uint32    time/*升级时间,以UTC描述*/;
        zce_astring url/*升级地址,不定长的字节流*/;
    };
    struct IE_CHANNEL_STATUS
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_STATUS;

        IE_CHANNEL_STATUS()
        :channel_type(0)
        ,channel_no(0)
        ,record_status(0)
        ,monitor_status(0)
        ,replay_status(0)
        ,download_status(0)
        ,video_format(0)
        ,video_resolution(0)
        ,store_totalcapacity(0)
        ,store_sparecapacity(0)
        ,bit_rate(0)
        {
        }

        zce_uint16    channel_type/*通道类型*/;
        zce_uint16    channel_no/*通道编号（设备内唯一）*/;
        zce_byte    record_status/*是否正在本地录像0x00:否0x01:是*/;
        zce_byte    monitor_status/*是否正在监控,0x00:否0x01:是*/;
        zce_byte    replay_status/*是否正在回放0x00:否0x01:是*/;
        zce_byte    download_status/*是否正在下载0x00:否0x01:是*/;
        zce_uint16    video_format/*当前视频编码格式 ,参见视频编码格式表*/;
        zce_uint16    video_resolution/*当前视频显示格式, ,参见视频显示格式表*/;
        zce_uint32    store_totalcapacity/*存储总容量，单位：MB*/;
        zce_uint32    store_sparecapacity/*存储剩余容量，单位：MB*/;
        zce_uint32    bit_rate/*当前发送码流,，单位：kbps*/;
    };
    struct IE_CHANNEL_STATUS_V2
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_STATUS_V2;

        IE_CHANNEL_STATUS_V2()
        :video_lost_status(0)
        ,optic_exist_flag(0)
        ,optic_error_flag(0)
        {
        }

        CHANNEL_STATUS    status;
        zce_byte    video_lost_status/*视频丢失状态0x00:正常0x01:丢失*/;
        zce_byte    optic_exist_flag/*是否有光端机0x00:无0x01:有*/;
        zce_byte    optic_error_flag/*光端机异常状态0x00:正常0x01:异常*/;
    };
    struct IE_CHANNEL_STATUS_SIMPLE
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_STATUS_SIMPLE;
        IE_CHANNEL_STATUS_SIMPLE() { };
        CHANNEL_STATUS_SIMPLE    simple_status;
    };
    struct IE_UACONFIG
    {
        const static unsigned short IE_TYPE = E_IE_UACONFIG;

        IE_UACONFIG()
        :config(0)
        {
        }

        std::vector<zce_char> config;
    };
    struct IE_FD_CONFIG
    {
        const static unsigned short IE_TYPE = E_IE_FD_CONFIG;

        IE_FD_CONFIG()
        :config(0)
        {
        }

        std::vector<zce_char> config;
    };
    struct IE_FD_LOG
    {
        const static unsigned short IE_TYPE = E_IE_FD_LOG;

        IE_FD_LOG()
        :config(0)
        {
        }

        std::vector<zce_char> config;
    };
    struct IE_UNSUPPORTCMD_NOTIFY
    {
        const static unsigned short IE_TYPE = E_IE_UNSUPPORTCMD_NOTIFY;

        IE_UNSUPPORTCMD_NOTIFY()
        :cmd_type(0)
        {
        }

        zce_uint16    cmd_type/*指令类型（收到的不支持的消息类型）*/;
    };
    struct IE_MIXTUREVIDEOIN_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_MIXTUREVIDEOIN_CHANNEL;
        IE_MIXTUREVIDEOIN_CHANNEL() { };
        MIXTUREVIDEOIN_CHANNEL    mx_channel;
        GPS_INFO    gps;
    };
    struct IE_PTZLOCK_INFO
    {
        const static unsigned short IE_TYPE = E_IE_PTZLOCK_INFO;

        IE_PTZLOCK_INFO()
        :lock_level(0)
        ,lock_time(0)
        {
        }

        zce_astring lock_email/*锁定者email*/;
        zce_uint32    lock_level/*锁定级别*/;
        zce_uint32    lock_time/*以UTC表示的结束锁定时刻*/;
    };
    struct IE_ALARM_RULE
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_RULE;
        IE_ALARM_RULE() { };
        ALARM_EVENT    alarm_event/*告警事件, KEY*/;
        ALARM_CONDITION    alarm_cond/*告警条件*/;
        std::vector<ALARM_HANDLE> alarm_handle/*告警处理*/;
    };
    struct IE_FDALARM_HANDLE
    {
        const static unsigned short IE_TYPE = E_IE_FDALARM_HANDLE;
        IE_FDALARM_HANDLE() { };
        ALARM_EVENT    alarm_event/*告警事件, KEY*/;
        std::vector<ALARM_HANDLE> alarm_handle/*告警处理*/;
    };
    struct IE_CENTERALARM_HANDLE
    {
        const static unsigned short IE_TYPE = E_IE_CENTERALARM_HANDLE;
        IE_CENTERALARM_HANDLE() { };
        ALARM_HANDLE_CENTER    alarm_handle_center/*告警处理*/;
        ALARM_HANDLE_SHOW    alarm_handle_show;
    };
    struct IE_SET_ALARMRULE_TIMESPAN
    {
        const static unsigned short IE_TYPE = E_IE_SET_ALARMRULE_TIMESPAN;

        IE_SET_ALARMRULE_TIMESPAN()
        :rule_id(0)
        {
        }

        std::vector<zce_char> rule_id;
        std::vector<TASK_SCHEDULE> time_span;
        std::vector<TASK_SCHEDULE> time_span_exclude;
    };
    struct IE_LAST_GUARD_STATUS
    {
        const static unsigned short IE_TYPE = E_IE_LAST_GUARD_STATUS;

        IE_LAST_GUARD_STATUS()
        :guard(0)
        ,last_guard_time(0)
        ,guard_rule_update_time(0)
        ,alarm_rule_update_time(0)
        {
        }

        zce_char    guard/*0，撤防，1，布防*/;
        zce_uint32    last_guard_time/*最后一个布撤防指令时间*/;
        zce_uint32    guard_rule_update_time/*设备布撤防规则的最近更新时间*/;
        zce_uint32    alarm_rule_update_time/*告警事件规则的最近更新时间*/;
    };
    struct IE_PRESET_SCHEDULE
    {
        const static unsigned short IE_TYPE = E_IE_PRESET_SCHEDULE;

        IE_PRESET_SCHEDULE()
        :minutes(0)
        {
        }

        zce_uint16    minutes;
        std::vector<PRESET_PLAN> plans;
    };
    struct IE_GUARD_SET
    {
        const static unsigned short IE_TYPE = E_IE_GUARD_SET;

        IE_GUARD_SET()
        :guard_delay_second(0)
        ,default_time_guard_or_not(0)
        {
        }

        zce_uint16    guard_delay_second/*收到本地布防指令后延迟多少秒布防，避免本地布防后，布防人员不能及时离开防区导致误报*/;
        zce_char    default_time_guard_or_not/*在未定义时段是否布防，0否1是，默认为1*/;
        std::vector<TASK_SCHEDULE> time_span/*如果在未定义时段布防，则timeSpan为撤防时段，timeSpanExclude为撤防时段例外（剪除）*/;
        std::vector<TASK_SCHEDULE> time_span_exclude/*如果在未定义时段撤防，则timeSpan为布防时段，timeSpanExclude为布防时段例外（剪除）*/;
    };
    struct IE_ALARM_CONTENT_HEADER
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_CONTENT_HEADER;

        IE_ALARM_CONTENT_HEADER()
        :alarm_level(0)
        ,alarm_confidence(0)
        ,alarm_session_id(0)
        ,reserved(0)
        ,alarm_sequence_id(0)
        {
        }

        ALARM_EVENT    alarm_event/*告警事件*/;
        zce_char    alarm_level/*告警严重级别(5、10、15、20、25数值越大越严重)*/;
        zce_char    alarm_confidence/*告警置信度*/;
        zce_uint32    alarm_session_id/*告警会话编号，0,保留，1-0xFFFFFFFF*/;
        zce_uint16    reserved/* 保留 */;
        zce_uint16    alarm_sequence_id/*告警序号，0,保留; n第N次告警，0xFFFF销警*/;
    };
    struct IE_ALARM_EVENT
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_EVENT;
        IE_ALARM_EVENT() { };
        ALARM_EVENT    alarm_event/*告警事件*/;
    };
    struct IE_ALARM_CONTENT_TEXT
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_CONTENT_TEXT;
        IE_ALARM_CONTENT_TEXT() { };
        zce_astring content/*文本内容*/;
    };
    struct IE_ALARM_CONTENT_TEXT_UA
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_CONTENT_TEXT_UA;
        IE_ALARM_CONTENT_TEXT_UA() { };
        zce_astring type/*类型*/;
        zce_astring content/*文本内容*/;
    };
    struct IE_ALARM_CONTENT_TEXT_FD
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_CONTENT_TEXT_FD;

        IE_ALARM_CONTENT_TEXT_FD()
        :left(0)
        ,top(0)
        ,right(0)
        ,bottom(0)
        ,confident(0)
        {
        }

        zce_astring type/*类型*/;
        zce_uint16    left/* 车牌矩形*/;
        zce_uint16    top;
        zce_uint16    right;
        zce_uint16    bottom;
        zce_uint16    confident;
        zce_astring content/*文本内容*/;
    };
    struct IE_ALARM_CONTENT_PICTURE
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_CONTENT_PICTURE;

        IE_ALARM_CONTENT_PICTURE()
        :format(0)
        ,reserved(0)
        ,content(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道id*/;
        zce_uint16    format/*图片格式, JPG(0),最高位置1表示特征图片（如车牌的小图）*/;
        zce_uint16    reserved/*保留语意*/;
        std::vector<zce_byte> content/*图片内容，小于2MB*/;
    };
    struct IE_ALARM_CONTENT_PICTURE_WITH_RECT_PARAMETER
    {
        const static unsigned short IE_TYPE = E_IE_ALARM_CONTENT_PICTURE_WITH_RECT_PARAMETER;

        IE_ALARM_CONTENT_PICTURE_WITH_RECT_PARAMETER()
        :format(0)
        ,reserved(0)
        ,content(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道id*/;
        zce_uint16    format/*图片格式, JPG(0)，ASF(1), 最高位置1表示特征图片（如车牌的小图）*/;
        zce_uint16    reserved/*保留语意, &0x01，使用上一副*/;
        RECT_PARAMETER    vehicle/*车辆矩形, 
        vehicle.reserverd[1]为0表示识别失败时是否执行全图搜索依赖于车牌服务器的配置
        vehicle.reserverd[1]为1表示识别失败时不再执行全图搜索
        vehicle.reserverd[1]为2表示识别失败时一定执行全图搜索*/;
        std::vector<RECT_PARAMETER> plate/*车牌矩形*/;
        std::vector<zce_byte> content/*图片内容，小于5MB*/;
    };
    struct IE_SCHEME
    {
        const static unsigned short IE_TYPE = E_IE_SCHEME;

        IE_SCHEME()
        :id(0)
        {
        }

        zce_uint32    id/*预案标识*/;
        zce_astring name/*预案名称*/;
        zce_astring content/*预案内容*/;
        zce_astring memo/*预案备注*/;
    };
    struct IE_FD_PARAMETER_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FD_PARAMETER_INFO;

        IE_FD_PARAMETER_INFO()
        :writable(0)
        {
        }

        zce_astring name/*名称*/;
        zce_byte    writable/*可写*/;
        zce_astring type/*类型名:object astring int unsignedInt boolean dateTime base64*/;
        zce_astring reserved_str1/*保留*/;
        zce_astring reserved_str2/*保留*/;
        std::vector<astring254_WRAPPER> reserved_strarray/*保留*/;
    };
    struct IE_FD_PARAMTER_ATTRIBUTE
    {
        const static unsigned short IE_TYPE = E_IE_FD_PARAMTER_ATTRIBUTE;

        IE_FD_PARAMTER_ATTRIBUTE()
        :notification(0)
        {
        }

        zce_astring name;
        zce_byte    notification/*0:off 1:passive 2:active*/;
        std::vector<astring254_WRAPPER> access_list/*Subscriber*/;
        zce_astring reserved_str1/*保留*/;
        zce_astring reserved_str2/*保留*/;
        std::vector<astring254_WRAPPER> reserved_strarray/*保留*/;
    };
    struct IE_FD_TYPE
    {
        const static unsigned short IE_TYPE = E_IE_FD_TYPE;

        IE_FD_TYPE()
        :factory(0)
        ,type(0)
        {
        }

        zce_uint16    factory/*厂商标识*/;
        zce_uint16    type/*设备类型*/;
    };
    struct IE_FDCHANNEL_RIGHT
    {
        const static unsigned short IE_TYPE = E_IE_FDCHANNEL_RIGHT;

        IE_FDCHANNEL_RIGHT()
        :right(0)
        {
        }

        zce_astring fd_id/*设备id*/;
        CHANNEL_ID    channel_id/*通道id如果通道类型和通道号都为0，表示用户对该设备的所有通道都有权限，且权限相同*/;
        zce_uint32    right/*权限*/;
    };
    struct IE_UAS_VERSION
    {
        const static unsigned short IE_TYPE = E_IE_UAS_VERSION;
        IE_UAS_VERSION() { };
        zce_astring version;
    };
    struct IE_NAME_VALUE
    {
        const static unsigned short IE_TYPE = E_IE_NAME_VALUE;
        IE_NAME_VALUE() { };
        zce_astring name/*名*/;
        zce_astring value/*值*/;
    };
    struct IE_COMPRESS
    {
        const static unsigned short IE_TYPE = E_IE_COMPRESS;

        IE_COMPRESS()
        :compress(0)
        {
        }

        zce_uint16    compress/* 压缩算法, 0: 不压缩, 1: BZIP2 */;
    };
    struct IE_BALANCE_REDIRECT_FLAG
    {
        const static unsigned short IE_TYPE = E_IE_BALANCE_REDIRECT_FLAG;

        IE_BALANCE_REDIRECT_FLAG()
        :balance_redirect_flag(0)
        {
        }

        zce_uint16    balance_redirect_flag/* 1负载均衡重定向后的登录，0非负载均衡重定向登录 */;
    };
    struct IE_RECORD_PLAN
    {
        const static unsigned short IE_TYPE = E_IE_RECORD_PLAN;
        IE_RECORD_PLAN() { };
        RECORD_PLAN    record_plan/*录像计划*/;
    };
    struct IE_COMMON_OPERATION
    {
        const static unsigned short IE_TYPE = E_IE_COMMON_OPERATION;
        IE_COMMON_OPERATION() { };
        zce_astring type/*操作类型*/;
    };
    struct IE_COMMON_CONTENT
    {
        const static unsigned short IE_TYPE = E_IE_COMMON_CONTENT;
        IE_COMMON_CONTENT() { };
        zce_astring key/*字段名称*/;
        zce_astring value/*字段内容*/;
    };
    struct IE_COMMON_RESULT
    {
        const static unsigned short IE_TYPE = E_IE_COMMON_RESULT;
        IE_COMMON_RESULT() { };
        zce_astring result/*操作返回内容*/;
    };
    struct FD_ACTION
    {

        FD_ACTION()
        :cState(0)
        ,directnum(0)
        ,flag(0)
        {
        }

        zce_astring fdid/*设备编号*/;
        zce_astring factory/*厂家代码*/;
        zce_byte    cState/*设备状态：'W'待安装、'A' 正常、'P' 停用*/;
        zce_uint16    directnum/*直连数*/;
        zce_astring ip/*只用于查询，设备的登录ip，不在线设备返回最后一次登录的ip*/;
        zce_uint16    flag/*第0位为1表示在线*/;
    };
    struct IE_FD_ACTION
    {
        const static unsigned short IE_TYPE = E_IE_FD_ACTION;
        IE_FD_ACTION() { };
        FD_ACTION    fd_action;
    };
    struct IE_FD_ACTION_V2
    {
        const static unsigned short IE_TYPE = E_IE_FD_ACTION_V2;

        IE_FD_ACTION_V2()
        :protocol(0)
        {
        }

        FD_ACTION    fd_action;
        zce_uint16    protocol/*0==gep, 1==onvif, 2=GBT28181, 3=RTSP*/;
        zce_astring param/*onvif参数: onvifport=xxx;username=xxxx;password=xxx*/;
    };
    struct IE_FD_ACTION_V3
    {
        const static unsigned short IE_TYPE = E_IE_FD_ACTION_V3;

        IE_FD_ACTION_V3()
        :protocol(0)
        ,timeoffset(0)
        {
        }

        FD_ACTION    fd_action;
        zce_uint16    protocol/*0==gep, 1==onvif, 2=GBT28181, 3=RTSP*/;
        zce_astring param/*onvif参数: onvifport=xxx;username=xxxx;password=xxx*/;
        zce_int32    timeoffset/*时钟偏移, INT_MAX表示NA*/;
    };
    struct IE_CHANNEL_ACTION
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_ACTION;

        IE_CHANNEL_ACTION()
        :cState(0)
        ,type(0)
        ,flag(0)
        ,keeptime(0)
        {
        }

        zce_astring fdid/*设备编号*/;
        CHANNEL_ID    id;
        zce_byte    cState/*通道状态, 'A' 正常、'P' 停用*/;
        zce_uint16    type/*类型：球机，枪机*/;
        zce_uint16    flag/*最高位置1表示不可控，次高位置1表示一直中心录像（否则，视乎录像计划启动录像）*/;
        zce_uint32    keeptime/*录像保存时间（秒）*/;
        zce_astring name/*通道名称*/;
    };
    struct IE_UA_ACTION
    {
        const static unsigned short IE_TYPE = E_IE_UA_ACTION;
        IE_UA_ACTION() { };
        zce_astring uaid/*UA编号*/;
        zce_astring user/*登录帐号email*/;
        zce_astring desc/*描述*/;
    };
    struct SIMPLE_CHANNEL
    {

        SIMPLE_CHANNEL()
        :longitude(0)
        ,latitude(0)
        ,status(0)
        {
        }

        CHANNEL_ID    channel_id;
        zce_astring channel_name;
        zce_uint32    longitude/*经度*/;
        zce_uint32    latitude/*维度*/;
        zce_byte    status/*BIT 1,是否可控，2,正在前端录像，3，正在中心录像，4，视频*/;
    };
    struct IE_FD_SIMPLE
    {
        const static unsigned short IE_TYPE = E_IE_FD_SIMPLE;

        IE_FD_SIMPLE()
        :isonline(0)
        ,factory_code(0)
        {
        }

        zce_astring id;
        zce_astring name;
        zce_byte    isonline/*最低位表示设备在线状态，高7位表示设备的登录协议，见PTL_TYPE*/;
        zce_uint16    factory_code/*查看视频的时候就不用再查详细信息了*/;
        std::vector<SIMPLE_CHANNEL> channels;
    };
    struct SIMPLE_CHANNEL_V2
    {

        SIMPLE_CHANNEL_V2()
        :longitude(0)
        ,latitude(0)
        ,status(0)
        ,reserve(0)
        {
        }

        CHANNEL_ID    channel_id;
        zce_astring channel_name/*通道名称*/;
        zce_uint32    longitude/*经度*/;
        zce_uint32    latitude/*维度*/;
        zce_uint32    status/*BIT 1,是否可控，2,正在前端录像，3，正在中心录像，4，视频, 5，启用中心录像，6，启用前端录像，7~12,前端类型(不可控（枪机）=0,可控（球机）=1,抓拍枪机=2,高清=3,抓拍高清=4)*/;
        zce_uint32    reserve/*保留状态*/;
    };
    struct IE_FD_SIMPLE_V2
    {
        const static unsigned short IE_TYPE = E_IE_FD_SIMPLE_V2;

        IE_FD_SIMPLE_V2()
        :isonline(0)
        ,factory_code(0)
        {
        }

        zce_astring id/*设备代码*/;
        zce_astring name/*设备名称*/;
        zce_byte    isonline/*最低位表示设备在线状态，高7位表示设备的登录协议，见PTL_TYPE*/;
        zce_uint16    factory_code/*厂商代码，查看视频的时候就不用再查详细信息了*/;
        std::vector<SIMPLE_CHANNEL_V2> channels/*简单通道信息*/;
    };
    struct IE_SOFT_VERSION
    {
        const static unsigned short IE_TYPE = E_IE_SOFT_VERSION;

        IE_SOFT_VERSION()
        :soft_version(0)
        {
        }

        std::vector<zce_uint16> soft_version/*软件版本号*/;
    };
    struct IE_UAS_INFO
    {
        const static unsigned short IE_TYPE = E_IE_UAS_INFO;
        IE_UAS_INFO() { };
        zce_astring id/*UAS ID*/;
        zce_astring name/*名称*/;
        zce_astring location/*位置*/;
        zce_astring desc/*备注*/;
    };
    struct IE_CUSTOMER_INFO
    {
        const static unsigned short IE_TYPE = E_IE_CUSTOMER_INFO;
        IE_CUSTOMER_INFO() { };
        CUSTOMER_INFO    customer;
    };
    struct IE_GRANTED_CUSTOMER_INFO
    {
        const static unsigned short IE_TYPE = E_IE_GRANTED_CUSTOMER_INFO;
        IE_GRANTED_CUSTOMER_INFO() { };
        zce_astring grant_id/*授权客户ID*/;
        zce_astring granted_id/*被授权客户ID*/;
    };
    struct IE_FDCHANNELPRIV_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FDCHANNELPRIV_INFO;
        IE_FDCHANNELPRIV_INFO() { };
        FD_INFO_V4_EXT    fd_info_v4_ext;
        std::vector<VIDEOIN_CHANNEL_EXT> vi_channel_ext;
        std::vector<VIDEOOUT_CHANNEL_EXT> vo_channel_ext;
        std::vector<AUDIOIN_CHANNEL_EXT> ai_channel_ext;
        std::vector<AUDIOOUT_CHANNEL_EXT> ao_channel_ext;
        std::vector<WARNIN_CHANNEL_EXT> wi_channel_ext;
        std::vector<WARNOUT_CHANNEL_EXT> wo_channel_ext;
        std::vector<NONSTANDARD_CHANNEL_EXT> ns_channel_ext;
        std::vector<NONSTANDARD_CHANNEL_EXT> cf_channel_ext/*配置通道，共用结构*/;
        std::vector<MIXTUREVIDEOIN_CHANNEL_EXT> mx_channel_ext;
    };
    struct IE_CHANNEL_NUMBER
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_NUMBER;

        IE_CHANNEL_NUMBER()
        :cVideoInNumber(0)
        ,cVideoOutNumber(0)
        ,cAudioInNumber(0)
        ,cAudioOutNumber(0)
        ,cAlarmInNumber(0)
        ,cAlarmOutNumber(0)
        ,cNonStandardNumber(0)
        {
        }

        zce_byte    cVideoInNumber;
        zce_byte    cVideoOutNumber;
        zce_byte    cAudioInNumber;
        zce_byte    cAudioOutNumber;
        zce_byte    cAlarmInNumber;
        zce_byte    cAlarmOutNumber;
        zce_byte    cNonStandardNumber;
    };
    struct IE_VIDEOIN_CAPACITY
    {
        const static unsigned short IE_TYPE = E_IE_VIDEOIN_CAPACITY;
        IE_VIDEOIN_CAPACITY() { };
        CHANNEL_ID    channel_id;
        std::vector<QOS_CAPACITY> qos_capacity;
    };
    struct IE_CHANNEL_MEDIA_CAPACITY
    {
        const static unsigned short IE_TYPE = E_IE_CHANNEL_MEDIA_CAPACITY;

        IE_CHANNEL_MEDIA_CAPACITY()
        :channel_type(0)
        {
        }

        CHANNEL_ID    channel_id/*视频通道号*/;
        zce_uint16    channel_type/*通道类型：0:主通道， 1:从通道*/;
        std::vector<MEDIATYPE_CAPACITY> media_capacity;
    };
    struct IE_SERIAL_CAPACITY
    {
        const static unsigned short IE_TYPE = E_IE_SERIAL_CAPACITY;

        IE_SERIAL_CAPACITY()
        :serial_type(0)
        ,serial_id(0)
        ,baudrate(0)
        ,databit(0)
        ,stopbit(0)
        ,parity(0)
        ,flowcontrol(0)
        {
        }

        zce_uint32    serial_type;
        zce_uint32    serial_id;
        std::vector<zce_uint32> baudrate;
        std::vector<zce_uint32> databit;
        std::vector<zce_uint32> stopbit;
        std::vector<zce_uint32> parity;
        std::vector<zce_uint32> flowcontrol;
    };
    struct IE_HTTP_PROXY
    {
        const static unsigned short IE_TYPE = E_IE_HTTP_PROXY;
        IE_HTTP_PROXY() { };
        zce_astring proxy/*格式"ip=;port=;domainid="，如果没有domainid，表示本代理为所有的domian服务*/;
    };
    struct IE_MONITOR_CHANNEL_PAIR
    {
        const static unsigned short IE_TYPE = E_IE_MONITOR_CHANNEL_PAIR;
        IE_MONITOR_CHANNEL_PAIR() { };
        zce_astring decoder_id;
        CHANNEL_ID    decoder_channel;
        zce_astring encoder_id;
        CHANNEL_ID    encoder_channel;
    };
    struct IE_CRUISE
    {
        const static unsigned short IE_TYPE = E_IE_CRUISE;

        IE_CRUISE()
        :id(0)
        ,reserve(0)
        {
        }

        zce_uint16    id/*巡航记录的ID，必须唯一*/;
        zce_uint16    reserve;
        std::vector<CRUISE_ITEM> ie_cruise_item/*巡航记录*/;
    };
    struct IE_WATCH
    {
        const static unsigned short IE_TYPE = E_IE_WATCH;

        IE_WATCH()
        :id(0)
        ,enable(0)
        ,type(0)
        ,content(0)
        ,begin_hour(0)
        ,begin_min(0)
        ,end_hour(0)
        ,end_min(0)
        {
        }

        zce_uint16    id/*守望编号*/;
        zce_byte    enable/*是否启用*/;
        zce_byte    type/*1:预置点；2：巡航；3：扫描*/;
        zce_byte    content/*若为预置点 表示预置点ID；若为巡航 表示巡航ID；若为扫描 不填*/;
        zce_byte    begin_hour;
        zce_byte    begin_min;
        zce_byte    end_hour;
        zce_byte    end_min;
    };
    struct IE_MUA
    {
        const static unsigned short IE_TYPE = E_IE_MUA;
        IE_MUA() { };
        zce_astring model/*mua型号*/;
    };
    struct IE_STRVERSION
    {
        const static unsigned short IE_TYPE = E_IE_STRVERSION;
        IE_STRVERSION() { };
        zce_astring ver/*版本*/;
    };
    struct MSG_HEADER : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_HEADER;
        static const char* type_name() { return ("MSG_HEADER");}
        GEP_HEADER_T    ie_header/*消息头*/;
    };
    typedef zce_smartptr<MSG_HEADER> MSG_HEADER_PTR;

    struct MSG_NEGOTIATE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_NEGOTIATE_REQ;
        static const char* type_name() { return ("MSG_NEGOTIATE_REQ");}
        IE_UA_ID    ie_ua_id/*UA_ID*/;
        IE_NEGOTIATE_REQ    ie_nego_req/*登陆协商请求*/;
        IE_ULONG    ie_net_type/*填1*/;
        std::vector<IE_UCHAR> ie_by_network/*网络情况，7-4比特位：0x00自动匹配 0x10RTP扩展协议 0x20南望媒体协议，3-0比特位：0x00-AUTO 0x01-UDP 0x02-TCP 0x03-MULTICAST 0x04-UDP_TCP 0x05-TCP_UDP*/;
        std::vector<IE_COMPRESS> ie_compress/* UA端支持的压缩算法，0个（表示不支持压缩）, 1个或者多个（支持多种算法，UAS可以选用任意一种) */;
        std::vector<IE_BALANCE_REDIRECT_FLAG> ie_balance_redirect/*有此可选项表示支持负载均衡重定向，1负载均衡重定向后的登录，0非负载均衡重定向登录，服务器只能对有此可选项且值为0的登录进行负载均衡重定向*/;
        std::vector<IE_NETADDRESS_ANY> ie_ip/*客户端socket connect上uas之后，取本地的ip地址，端口*/;
        std::vector<IE_astring64> ie_mac/*客户端socket connect上uas之后，取本地的ip地址所对应的MAC地址。第二个该结构无锡所网关模式时OCX登录异地网关填入的本地网关id，20位*/;
        std::vector<IE_MUA> ie_mua;
        std::vector<IE_STRVERSION> ie_strversion/*如果存在，使用之作为客户端版本号；如果不存在，使用IE_NEGOTIATE_REQ里面的soft_version作为客户端版本号*/;
    };
    typedef zce_smartptr<MSG_NEGOTIATE_REQ> MSG_NEGOTIATE_REQ_PTR;

    struct MSG_NEGOTIATE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_NEGOTIATE_RES;
        static const char* type_name() { return ("MSG_NEGOTIATE_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码； =0：成功； PTL_SUCCESS_UA_REDIRECT(0x00020002)：重定向*/;
        std::vector<IE_NEGOTIATE_RES> ie_nego_res/*登陆协商响应*/;
        std::vector<IE_NETADDRESS> ie_netaddr/*成功时(=1)填UAS检测到的UA外部地址*/;
        std::vector<IE_astring64> ie_url/*软件升级URL*/;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*成功时(=1)填UAS检测到的UA外部ipv6地址*/;
        std::vector<IE_UAS_VERSION> ie_uas_version;
        std::vector<IE_astring64> ie_web_url/*WEB服务URL*/;
        std::vector<IE_SERVER> ie_server_list/* 可用的服务器地址列表, ipv4, ipv6都用astring来表示*/;
        std::vector<IE_COMPRESS> ie_compress/* UAS支持的压缩算法，0个（表示不支持压缩）或者1个（表示可以采用这种压缩算法） */;
        std::vector<IE_astring254> ie_map_url/*电子地图URL地址*/;
        std::vector<IE_HTTP_PROXY> ie_http_proxy/*http下载代理*/;
        std::vector<IE_ULONG> ie_streaming_time_warn/*流媒体提醒时间，分钟*/;
    };
    typedef zce_smartptr<MSG_NEGOTIATE_RES> MSG_NEGOTIATE_RES_PTR;

    struct MSG_LOGIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_LOGIN_REQ;
        static const char* type_name() { return ("MSG_LOGIN_REQ");}
        IE_CHAR16    ie_pwd/*加密后字符串*/;
    };
    typedef zce_smartptr<MSG_LOGIN_REQ> MSG_LOGIN_REQ_PTR;

    struct MSG_LOGIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_LOGIN_RES;
        static const char* type_name() { return ("MSG_LOGIN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_ULONG> ie_heart_time/*心跳间隔时间*/;
        std::vector<IE_UCHAR> ie_sms_auth_code/*是否需要短信登录验证码*/;
        std::vector<IE_USHORT> ie_ssu_admin_port/*存在时表明是SSU，客户端直接ShellExecute打开url(客户端登录地址，加上这个端口构建成http://ip:port)进入ssu管理页面*/;
    };
    typedef zce_smartptr<MSG_LOGIN_RES> MSG_LOGIN_RES_PTR;

    struct MSG_SMS_AUTH_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_SMS_AUTH_REQ;
        static const char* type_name() { return ("MSG_SMS_AUTH_REQ");}
        IE_astring    ie_sms_auth_code/*短信登录验证码*/;
    };
    typedef zce_smartptr<MSG_SMS_AUTH_REQ> MSG_SMS_AUTH_REQ_PTR;

    struct MSG_SMS_AUTH_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_SMS_AUTH_RES;
        static const char* type_name() { return ("MSG_SMS_AUTH_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_SMS_AUTH_RES> MSG_SMS_AUTH_RES_PTR;

    struct MSG_QUERYastringBYTYPE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERYastringBYTYPE_REQ;
        static const char* type_name() { return ("MSG_QUERYastringBYTYPE_REQ");}
        IE_astring    ie_type;
        IE_astring    ie_key;
    };
    typedef zce_smartptr<MSG_QUERYastringBYTYPE_REQ> MSG_QUERYastringBYTYPE_REQ_PTR;

    struct MSG_QUERYastringBYTYPE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERYastringBYTYPE_RES;
        static const char* type_name() { return ("MSG_QUERYastringBYTYPE_RES");}
        IE_RESULT    ie_result;
        IE_astring    ie_value;
    };
    typedef zce_smartptr<MSG_QUERYastringBYTYPE_RES> MSG_QUERYastringBYTYPE_RES_PTR;

    struct MSG_UA_LIST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_LIST_REQ;
        static const char* type_name() { return ("MSG_UA_LIST_REQ");}
        std::vector<IE_UA_ID> ie_ua_id/*用户ID（不填是获取所有）*/;
    };
    typedef zce_smartptr<MSG_UA_LIST_REQ> MSG_UA_LIST_REQ_PTR;

    struct MSG_UA_LIST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_LIST_RES;
        static const char* type_name() { return ("MSG_UA_LIST_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:用户总数*/;
        std::vector<IE_UA> ie_ua/*0到多个用户实例*/;
    };
    typedef zce_smartptr<MSG_UA_LIST_RES> MSG_UA_LIST_RES_PTR;

    struct MSG_UA_MODIFY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MODIFY_REQ;
        static const char* type_name() { return ("MSG_UA_MODIFY_REQ");}
        IE_UA_MODIFY    ie_ua_modify/*修改用户信息*/;
    };
    typedef zce_smartptr<MSG_UA_MODIFY_REQ> MSG_UA_MODIFY_REQ_PTR;

    struct MSG_UA_MODIFY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MODIFY_RES;
        static const char* type_name() { return ("MSG_UA_MODIFY_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_MODIFY_RES> MSG_UA_MODIFY_RES_PTR;

    struct MSG_UA_PASSWORD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PASSWORD_REQ;
        static const char* type_name() { return ("MSG_UA_PASSWORD_REQ");}
        IE_UA_MOD_PASSWORD    ie_mod_pwd;
    };
    typedef zce_smartptr<MSG_UA_PASSWORD_REQ> MSG_UA_PASSWORD_REQ_PTR;

    struct MSG_UA_PASSWORD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PASSWORD_RES;
        static const char* type_name() { return ("MSG_UA_PASSWORD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_PASSWORD_RES> MSG_UA_PASSWORD_RES_PTR;

    struct MSG_FD_LIST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_LIST_REQ;
        static const char* type_name() { return ("MSG_FD_LIST_REQ");}
        std::vector<IE_UCHAR> ie_fdver/*若3返回IE_FD_INFO_V3列表；4返回IE_FD_INFO_V4列表；为空或者其他值返回IE_FD_INFO列表*/;
    };
    typedef zce_smartptr<MSG_FD_LIST_REQ> MSG_FD_LIST_REQ_PTR;

    struct MSG_FD_LIST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_LIST_RES;
        static const char* type_name() { return ("MSG_FD_LIST_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_INFO> ie_fd_info/*0到多个设备*/;
        std::vector<IE_FD_INFO_V3> ie_fd_info_v3/*0到多个设备*/;
        std::vector<IE_FD_INFO_V4> ie_fd_info_v4/*0到多个设备*/;
    };
    typedef zce_smartptr<MSG_FD_LIST_RES> MSG_FD_LIST_RES_PTR;

    struct MSG_CHANNEL_LIST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHANNEL_LIST_REQ;
        static const char* type_name() { return ("MSG_CHANNEL_LIST_REQ");}
        std::vector<IE_CHANNEL_ID> ie_channel_id/*设备通道索引，IE为空表示查询所有通道*/;
    };
    typedef zce_smartptr<MSG_CHANNEL_LIST_REQ> MSG_CHANNEL_LIST_REQ_PTR;

    struct MSG_CHANNEL_LIST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHANNEL_LIST_RES;
        static const char* type_name() { return ("MSG_CHANNEL_LIST_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:通道信息总数*/;
        std::vector<IE_VIDEOIN_CHANNEL> ie_video_in/*0到多个通道*/;
        std::vector<IE_VIDEOOUT_CHANNEL> ie_video_out/*0到多个通道*/;
        std::vector<IE_AUDIOIN_CHANNEL> ie_audio_in/*0到多个通道*/;
        std::vector<IE_AUDIOOUT_CHANNEL> ie_audio_out/*0到多个通道*/;
        std::vector<IE_WARNIN_CHANNEL> ie_warn_in/*0到多个通道*/;
        std::vector<IE_WARNOUT_CHANNEL> ie_warn_out/*0到多个通道*/;
        std::vector<IE_NONSTANDARD_CHANNEL> ie_non_standard/*0到多个通道*/;
        std::vector<IE_MIXTUREVIDEOIN_CHANNEL> ie_mixture/*0到多个通道*/;
    };
    typedef zce_smartptr<MSG_CHANNEL_LIST_RES> MSG_CHANNEL_LIST_RES_PTR;

    struct MSG_LIST_DOMAIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_LIST_DOMAIN_REQ;
        static const char* type_name() { return ("MSG_LIST_DOMAIN_REQ");}
    };
    typedef zce_smartptr<MSG_LIST_DOMAIN_REQ> MSG_LIST_DOMAIN_REQ_PTR;

    struct MSG_LIST_DOMAIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_LIST_DOMAIN_RES;
        static const char* type_name() { return ("MSG_LIST_DOMAIN_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:域总数*/;
        std::vector<IE_DOMAIN_INFO> ie_domain_info/*域信息*/;
    };
    typedef zce_smartptr<MSG_LIST_DOMAIN_RES> MSG_LIST_DOMAIN_RES_PTR;

    struct MSG_HEART_BEAT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_HEART_BEAT_REQ;
        static const char* type_name() { return ("MSG_HEART_BEAT_REQ");}
        std::vector<IE_CHANNEL_STATUS> ie_channel_status;
        std::vector<IE_CHANNEL_STATUS_V2> ie_channel_status_v2;
        std::vector<IE_TIME> ie_time/*设备系统时间(time_t)*/;
    };
    typedef zce_smartptr<MSG_HEART_BEAT_REQ> MSG_HEART_BEAT_REQ_PTR;

    struct MSG_HEART_BEAT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_HEART_BEAT_RES;
        static const char* type_name() { return ("MSG_HEART_BEAT_RES");}
        IE_TIME    ie_time/*系统时间(time_t)*/;
    };
    typedef zce_smartptr<MSG_HEART_BEAT_RES> MSG_HEART_BEAT_RES_PTR;

    struct MSG_ROLE_LIST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ROLE_LIST_REQ;
        static const char* type_name() { return ("MSG_ROLE_LIST_REQ");}
        std::vector<IE_ROLE_ID> ie_role_id/*角色ID（不填是获取所有）*/;
    };
    typedef zce_smartptr<MSG_ROLE_LIST_REQ> MSG_ROLE_LIST_REQ_PTR;

    struct MSG_ROLE_LIST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ROLE_LIST_RES;
        static const char* type_name() { return ("MSG_ROLE_LIST_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0: 角色总数*/;
        std::vector<IE_ROLE> ie_role/*0到多个角色信息*/;
    };
    typedef zce_smartptr<MSG_ROLE_LIST_RES> MSG_ROLE_LIST_RES_PTR;

    struct MSG_ROLE_FD_PRIVILEGE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ROLE_FD_PRIVILEGE_REQ;
        static const char* type_name() { return ("MSG_ROLE_FD_PRIVILEGE_REQ");}
        IE_ROLE_ID    ie_role_id/*角色ID*/;
    };
    typedef zce_smartptr<MSG_ROLE_FD_PRIVILEGE_REQ> MSG_ROLE_FD_PRIVILEGE_REQ_PTR;

    struct MSG_ROLE_FD_PRIVILEGE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ROLE_FD_PRIVILEGE_RES;
        static const char* type_name() { return ("MSG_ROLE_FD_PRIVILEGE_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0: 用户设备权限总数*/;
        std::vector<IE_ROLE_FD_AUTHENTICATION> ie_auth/*角色权限对应信息*/;
    };
    typedef zce_smartptr<MSG_ROLE_FD_PRIVILEGE_RES> MSG_ROLE_FD_PRIVILEGE_RES_PTR;

    struct MSG_UA_ADD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_ADD_REQ;
        static const char* type_name() { return ("MSG_UA_ADD_REQ");}
        IE_UA_ADD    ie_ua_add;
        IE_CHAR16    ie_pwd/*Md5后的密码*/;
        IE_UCHAR    ie_type/*添加的用户类型:'A':管理员,'O':操作员*/;
        IE_ROLE_ID    ie_role_id/*角色ID*/;
        IE_UCHAR    ie_admin_type/*用户类型: 1 普通人员 3 设备管理员 7 设备管理员加人事管理员*/;
    };
    typedef zce_smartptr<MSG_UA_ADD_REQ> MSG_UA_ADD_REQ_PTR;

    struct MSG_UA_ADD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_ADD_RES;
        static const char* type_name() { return ("MSG_UA_ADD_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_UA_ID> ie_ua_id/*如果添加成功返回UA ID*/;
    };
    typedef zce_smartptr<MSG_UA_ADD_RES> MSG_UA_ADD_RES_PTR;

    struct MSG_UA_DEL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DEL_REQ;
        static const char* type_name() { return ("MSG_UA_DEL_REQ");}
        IE_UA_ID    ie_ua_id;
    };
    typedef zce_smartptr<MSG_UA_DEL_REQ> MSG_UA_DEL_REQ_PTR;

    struct MSG_UA_DEL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DEL_RES;
        static const char* type_name() { return ("MSG_UA_DEL_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_DEL_RES> MSG_UA_DEL_RES_PTR;

    struct MSG_ROLE_PRIVILEGE_ADMIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ROLE_PRIVILEGE_ADMIN_REQ;
        static const char* type_name() { return ("MSG_ROLE_PRIVILEGE_ADMIN_REQ");}
        IE_ROLE_PRIV_ADMIN    ie_admin/*权限修改*/;
    };
    typedef zce_smartptr<MSG_ROLE_PRIVILEGE_ADMIN_REQ> MSG_ROLE_PRIVILEGE_ADMIN_REQ_PTR;

    struct MSG_ROLE_PRIVILEGE_ADMIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ROLE_PRIVILEGE_ADMIN_RES;
        static const char* type_name() { return ("MSG_ROLE_PRIVILEGE_ADMIN_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_ROLE_PRIVILEGE_ADMIN_RES> MSG_ROLE_PRIVILEGE_ADMIN_RES_PTR;

    struct MSG_QUERY_OP_LOG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_OP_LOG_REQ;
        static const char* type_name() { return ("MSG_QUERY_OP_LOG_REQ");}
        IE_LOG_REQ    ie_req;
    };
    typedef zce_smartptr<MSG_QUERY_OP_LOG_REQ> MSG_QUERY_OP_LOG_REQ_PTR;

    struct MSG_QUERY_OP_LOG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_OP_LOG_RES;
        static const char* type_name() { return ("MSG_QUERY_OP_LOG_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:操作日志总数*/;
        std::vector<IE_OPERATE_LOG> ie_res/*日志记录*/;
    };
    typedef zce_smartptr<MSG_QUERY_OP_LOG_RES> MSG_QUERY_OP_LOG_RES_PTR;

    struct MSG_DEAL_ALARM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DEAL_ALARM_REQ;
        static const char* type_name() { return ("MSG_DEAL_ALARM_REQ");}
        IE_DEAL_ALARM    ie_deal_alarm;
        std::vector<IE_CHANNEL_ID> ie_channel_id;
    };
    typedef zce_smartptr<MSG_DEAL_ALARM_REQ> MSG_DEAL_ALARM_REQ_PTR;

    struct MSG_DEAL_ALARM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DEAL_ALARM_RES;
        static const char* type_name() { return ("MSG_DEAL_ALARM_RES");}
        IE_RESULT    ie_result/*<0:错误原因=0: 成功*/;
    };
    typedef zce_smartptr<MSG_DEAL_ALARM_RES> MSG_DEAL_ALARM_RES_PTR;

    struct MSG_FD_DESC_MOD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_DESC_MOD_REQ;
        static const char* type_name() { return ("MSG_FD_DESC_MOD_REQ");}
        IE_FD_DESCRIBE    ie_desc;
    };
    typedef zce_smartptr<MSG_FD_DESC_MOD_REQ> MSG_FD_DESC_MOD_REQ_PTR;

    struct MSG_FD_DESC_MOD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_DESC_MOD_RES;
        static const char* type_name() { return ("MSG_FD_DESC_MOD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FD_DESC_MOD_RES> MSG_FD_DESC_MOD_RES_PTR;

    struct MSG_CHANNEL_DESC_MOD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHANNEL_DESC_MOD_REQ;
        static const char* type_name() { return ("MSG_CHANNEL_DESC_MOD_REQ");}
        IE_CHANNEL_DESCRIBE    ie_desc;
    };
    typedef zce_smartptr<MSG_CHANNEL_DESC_MOD_REQ> MSG_CHANNEL_DESC_MOD_REQ_PTR;

    struct MSG_CHANNEL_DESC_MOD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHANNEL_DESC_MOD_RES;
        static const char* type_name() { return ("MSG_CHANNEL_DESC_MOD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_CHANNEL_DESC_MOD_RES> MSG_CHANNEL_DESC_MOD_RES_PTR;

    struct MSG_UA_PRIVILEGE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PRIVILEGE_REQ;
        static const char* type_name() { return ("MSG_UA_PRIVILEGE_REQ");}
    };
    typedef zce_smartptr<MSG_UA_PRIVILEGE_REQ> MSG_UA_PRIVILEGE_REQ_PTR;

    struct MSG_UA_PRIVILEGE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PRIVILEGE_RES;
        static const char* type_name() { return ("MSG_UA_PRIVILEGE_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0: 用户设备权限总数*/;
        std::vector<IE_UA_FD_AUTHENTICATION> ie_auth/*用户设备操作权限*/;
    };
    typedef zce_smartptr<MSG_UA_PRIVILEGE_RES> MSG_UA_PRIVILEGE_RES_PTR;

    struct MSG_UA_QUALITY_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUALITY_NOTIFY;
        static const char* type_name() { return ("MSG_UA_QUALITY_NOTIFY");}
        IE_QUALITY_REPORT    ie_report/*通道号*/;
    };
    typedef zce_smartptr<MSG_UA_QUALITY_NOTIFY> MSG_UA_QUALITY_NOTIFY_PTR;

    struct MSG_UA_QUERY_PRESETSCHEDULE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERY_PRESETSCHEDULE_REQ;
        static const char* type_name() { return ("MSG_UA_QUERY_PRESETSCHEDULE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_UA_QUERY_PRESETSCHEDULE_REQ> MSG_UA_QUERY_PRESETSCHEDULE_REQ_PTR;

    struct MSG_UA_QUERY_PRESETSCHEDULE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERY_PRESETSCHEDULE_RES;
        static const char* type_name() { return ("MSG_UA_QUERY_PRESETSCHEDULE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_PRESET_SCHEDULE> ie_res;
    };
    typedef zce_smartptr<MSG_UA_QUERY_PRESETSCHEDULE_RES> MSG_UA_QUERY_PRESETSCHEDULE_RES_PTR;

    struct MSG_UA_SET_PRESETSCHEDULE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_SET_PRESETSCHEDULE_REQ;
        static const char* type_name() { return ("MSG_UA_SET_PRESETSCHEDULE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_PRESET_SCHEDULE    ie_schedule;
    };
    typedef zce_smartptr<MSG_UA_SET_PRESETSCHEDULE_REQ> MSG_UA_SET_PRESETSCHEDULE_REQ_PTR;

    struct MSG_UA_SET_PRESETSCHEDULE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_SET_PRESETSCHEDULE_RES;
        static const char* type_name() { return ("MSG_UA_SET_PRESETSCHEDULE_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_SET_PRESETSCHEDULE_RES> MSG_UA_SET_PRESETSCHEDULE_RES_PTR;

    struct MSG_UA_MONITORSTART_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MONITORSTART_REQ;
        static const char* type_name() { return ("MSG_UA_MONITORSTART_REQ");}
        std::vector<IE_NETADDRESS> ie_netaddr/*地址*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
        std::vector<IE_PORT_RANGE> ie_portrange/*端口范围*/;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*地址(IPV6)*/;
        std::vector<IE_NETADDRESS_ANY> ie_netaddress_any/*级联时填ua的真实地址*/;
    };
    typedef zce_smartptr<MSG_UA_MONITORSTART_REQ> MSG_UA_MONITORSTART_REQ_PTR;

    struct MSG_UA_MONITORSTART_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MONITORSTART_RES;
        static const char* type_name() { return ("MSG_UA_MONITORSTART_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_SCHEDULE_NOTIFY> ie_res;
        std::vector<IE_SCHEDULE_NOTIFY_IPV6> ie_res_ipv6;
        std::vector<IE_astring254> ie_url;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_UA_MONITORSTART_RES> MSG_UA_MONITORSTART_RES_PTR;

    struct MSG_UA_MONITORSTOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MONITORSTOP_REQ;
        static const char* type_name() { return ("MSG_UA_MONITORSTOP_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该监控ID*/;
    };
    typedef zce_smartptr<MSG_UA_MONITORSTOP_REQ> MSG_UA_MONITORSTOP_REQ_PTR;

    struct MSG_UA_MONITORSTOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MONITORSTOP_RES;
        static const char* type_name() { return ("MSG_UA_MONITORSTOP_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_MONITORSTOP_RES> MSG_UA_MONITORSTOP_RES_PTR;

    struct MSG_UA_THIRD_MONITORSTART_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_THIRD_MONITORSTART_REQ;
        static const char* type_name() { return ("MSG_UA_THIRD_MONITORSTART_REQ");}
        IE_MONITOR_CHANNEL_PAIR    channel_pair/*通道对*/;
    };
    typedef zce_smartptr<MSG_UA_THIRD_MONITORSTART_REQ> MSG_UA_THIRD_MONITORSTART_REQ_PTR;

    struct MSG_UA_THIRD_MONITORSTART_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_THIRD_MONITORSTART_RES;
        static const char* type_name() { return ("MSG_UA_THIRD_MONITORSTART_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该监控ID*/;
    };
    typedef zce_smartptr<MSG_UA_THIRD_MONITORSTART_RES> MSG_UA_THIRD_MONITORSTART_RES_PTR;

    struct MSG_UA_THIRD_MONITORSTOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_THIRD_MONITORSTOP_REQ;
        static const char* type_name() { return ("MSG_UA_THIRD_MONITORSTOP_REQ");}
        IE_CHAR16    ie_guid/*16字节的guid,标识该监控ID*/;
    };
    typedef zce_smartptr<MSG_UA_THIRD_MONITORSTOP_REQ> MSG_UA_THIRD_MONITORSTOP_REQ_PTR;

    struct MSG_UA_THIRD_MONITORSTOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_THIRD_MONITORSTOP_RES;
        static const char* type_name() { return ("MSG_UA_THIRD_MONITORSTOP_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_THIRD_MONITORSTOP_RES> MSG_UA_THIRD_MONITORSTOP_RES_PTR;

    struct MSG_UA_RECORDSTART_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_RECORDSTART_REQ;
        static const char* type_name() { return ("MSG_UA_RECORDSTART_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
        IE_RECORDSTART_REQ    ie_req;
        std::vector<IE_LONG> ie_timespan;
    };
    typedef zce_smartptr<MSG_UA_RECORDSTART_REQ> MSG_UA_RECORDSTART_REQ_PTR;

    struct MSG_UA_RECORDSTART_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_RECORDSTART_RES;
        static const char* type_name() { return ("MSG_UA_RECORDSTART_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_ULONG> ie_begin_time;
    };
    typedef zce_smartptr<MSG_UA_RECORDSTART_RES> MSG_UA_RECORDSTART_RES_PTR;

    struct MSG_UA_RECORDSTOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_RECORDSTOP_REQ;
        static const char* type_name() { return ("MSG_UA_RECORDSTOP_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_qos;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该录像ID*/;
    };
    typedef zce_smartptr<MSG_UA_RECORDSTOP_REQ> MSG_UA_RECORDSTOP_REQ_PTR;

    struct MSG_UA_RECORDSTOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_RECORDSTOP_RES;
        static const char* type_name() { return ("MSG_UA_RECORDSTOP_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_ULONG> ie_stop_time/*停止时间*/;
    };
    typedef zce_smartptr<MSG_UA_RECORDSTOP_RES> MSG_UA_RECORDSTOP_RES_PTR;

    struct MSG_UA_PLAYBACKSTART_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PLAYBACKSTART_REQ;
        static const char* type_name() { return ("MSG_UA_PLAYBACKSTART_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
        IE_TIME_FILE    ie_time_file/*回放模式参数*/;
        std::vector<IE_NETADDRESS> ie_netaddr;
        std::vector<IE_PORT_RANGE> ie_portrange/*端口范围*/;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*地址(IPV6)*/;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*回放模式参数V2版本*/;
        std::vector<IE_NETADDRESS_ANY> ie_netaddress_any/*级联时填ua的真实地址*/;
    };
    typedef zce_smartptr<MSG_UA_PLAYBACKSTART_REQ> MSG_UA_PLAYBACKSTART_REQ_PTR;

    struct MSG_UA_PLAYBACKSTART_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PLAYBACKSTART_RES;
        static const char* type_name() { return ("MSG_UA_PLAYBACKSTART_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_SCHEDULE_NOTIFY> ie_res/*前端下载调度信息*/;
        std::vector<IE_astring254> ie_url/*中心下载url*/;
        std::vector<IE_SCHEDULE_NOTIFY_IPV6> ie_res_ipv6/*前端下载调度信息*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_UA_PLAYBACKSTART_RES> MSG_UA_PLAYBACKSTART_RES_PTR;

    struct MSG_UA_PLAYBACKSTOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PLAYBACKSTOP_REQ;
        static const char* type_name() { return ("MSG_UA_PLAYBACKSTOP_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该回放ID*/;
    };
    typedef zce_smartptr<MSG_UA_PLAYBACKSTOP_REQ> MSG_UA_PLAYBACKSTOP_REQ_PTR;

    struct MSG_UA_PLAYBACKSTOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_PLAYBACKSTOP_RES;
        static const char* type_name() { return ("MSG_UA_PLAYBACKSTOP_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_PLAYBACKSTOP_RES> MSG_UA_PLAYBACKSTOP_RES_PTR;

    struct MSG_UA_DOWNLOADSTART_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DOWNLOADSTART_REQ;
        static const char* type_name() { return ("MSG_UA_DOWNLOADSTART_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
        IE_TIME_FILE    ie_time_file/*下载模式参数*/;
        std::vector<IE_NETADDRESS> ie_netaddr;
        std::vector<IE_PORT_RANGE> ie_portrange/*端口范围*/;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*地址(IPV6)*/;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*下载模式参数V2版本*/;
        std::vector<IE_astring> ie_storage_area_id/*存储区域ID*/;
        std::vector<IE_NETADDRESS_ANY> ie_netaddress_any/*级联时填ua的真实地址*/;
    };
    typedef zce_smartptr<MSG_UA_DOWNLOADSTART_REQ> MSG_UA_DOWNLOADSTART_REQ_PTR;

    struct MSG_UA_DOWNLOADSTART_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DOWNLOADSTART_RES;
        static const char* type_name() { return ("MSG_UA_DOWNLOADSTART_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_SCHEDULE_NOTIFY> ie_res/*前端下载调度信息*/;
        std::vector<IE_astring254> ie_url/*中心下载url*/;
        std::vector<IE_SCHEDULE_NOTIFY_IPV6> ie_res_ipv6/*前端下载调度信息*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_UA_DOWNLOADSTART_RES> MSG_UA_DOWNLOADSTART_RES_PTR;

    struct MSG_UA_DOWNLOADSTOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DOWNLOADSTOP_REQ;
        static const char* type_name() { return ("MSG_UA_DOWNLOADSTOP_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该下载ID*/;
    };
    typedef zce_smartptr<MSG_UA_DOWNLOADSTOP_REQ> MSG_UA_DOWNLOADSTOP_REQ_PTR;

    struct MSG_UA_DOWNLOADSTOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DOWNLOADSTOP_RES;
        static const char* type_name() { return ("MSG_UA_DOWNLOADSTOP_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_DOWNLOADSTOP_RES> MSG_UA_DOWNLOADSTOP_RES_PTR;

    struct MSG_UA_DELETERECORD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DELETERECORD_REQ;
        static const char* type_name() { return ("MSG_UA_DELETERECORD_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        IE_TIME_FILE    ie_time_file/*删除参数*/;
        std::vector<IE_UCHAR> ie_qos;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*删除参数V2版本*/;
    };
    typedef zce_smartptr<MSG_UA_DELETERECORD_REQ> MSG_UA_DELETERECORD_REQ_PTR;

    struct MSG_UA_DELETERECORD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_DELETERECORD_RES;
        static const char* type_name() { return ("MSG_UA_DELETERECORD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_DELETERECORD_RES> MSG_UA_DELETERECORD_RES_PTR;

    struct MSG_TIME_XML_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_TIME_XML_REQ;
        static const char* type_name() { return ("MSG_TIME_XML_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_astring    ie_ssuid;
        std::vector<IE_TIME_XML> ie_time_xml/*xml==“*”表示删除*/;
    };
    typedef zce_smartptr<MSG_TIME_XML_REQ> MSG_TIME_XML_REQ_PTR;

    struct MSG_TIME_XML_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_TIME_XML_RES;
        static const char* type_name() { return ("MSG_TIME_XML_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_TIME_XML_RES> MSG_TIME_XML_RES_PTR;

    struct MSG_UA_QUERYRECORD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERYRECORD_REQ;
        static const char* type_name() { return ("MSG_UA_QUERYRECORD_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        IE_TIME_FILE    ie_time_file/*查询条件*/;
        std::vector<IE_UCHAR> ie_qos;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*查询参数V2版本*/;
        std::vector<IE_TIME_XML> ie_time_xml/*0或1条查询过滤条件，过滤类型在xml种填入形如'65,48'这样的字符串,xml="0"表示不过滤*/;
    };
    typedef zce_smartptr<MSG_UA_QUERYRECORD_REQ> MSG_UA_QUERYRECORD_REQ_PTR;

    struct MSG_UA_QUERYRECORD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERYRECORD_RES;
        static const char* type_name() { return ("MSG_UA_QUERYRECORD_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0: 录像信息总数*/;
        std::vector<IE_TIME_FILE> ie_list/*返回多个录像信息，如果没有文件结构可以不填本域，仅根据IE_RESULT判断是否录像是否存在*/;
        std::vector<IE_TIME_FILE_V2> ie_list2/*返回多个V2录像信息，如果没有文件结构可以不填本域，仅根据IE_RESULT判断是否录像是否存在*/;
        std::vector<IE_TIME_XML> ie_time_xml;
    };
    typedef zce_smartptr<MSG_UA_QUERYRECORD_RES> MSG_UA_QUERYRECORD_RES_PTR;

    struct MSG_REG_LOGIN_STEP1_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_LOGIN_STEP1_REQ;
        static const char* type_name() { return ("MSG_REG_LOGIN_STEP1_REQ");}
        IE_FD_ID    ie_fd_id/*设备ID，必填*/;
        std::vector<IE_FD_TYPE> ie_fd_type/*设备类型，必填*/;
        std::vector<IE_FD_VERSION> ie_fd_version/*设备版本信息*/;
        std::vector<IE_COMPRESS> ie_compress/* FD端支持的压缩算法: 0个（表示不支持压缩）, 1个或者多个（支持多种算法，FDMS可以选用任意一种) */;
        std::vector<IE_BALANCE_REDIRECT_FLAG> ie_balance_redirect/*有此可选项表示支持负载均衡重定向，1负载均衡重定向后的登录，0非负载均衡重定向登录，服务器只能对有此可选项且值为0的登录进行负载均衡重定向*/;
        std::vector<IE_NETADDRESS_ANY> ie_selfaddr/*填FD自身用于连接平台的IP地址*/;
        std::vector<IE_UCHAR> ie_ssu/* ssu发送record start/stop指令 */;
        std::vector<IE_FD_VERSION_V2> ie_fd_version_v2/*设备版本信息*/;
    };
    typedef zce_smartptr<MSG_REG_LOGIN_STEP1_REQ> MSG_REG_LOGIN_STEP1_REQ_PTR;

    struct MSG_REG_LOGIN_STEP1_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_LOGIN_STEP1_RES;
        static const char* type_name() { return ("MSG_REG_LOGIN_STEP1_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码； =0：需要域间重定向； =1：成功； =2：负载均衡重定向*/;
        std::vector<IE_NETADDRESS> ie_netaddr/*成功时(=1)，填fdms检测到的fd外部地址*/;
        std::vector<IE_CHAR16> ie_seed/*随机种子，16个字节，登陆成功时必填；否则不用。*/;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*成功时(=1)填fdms检测到的fd外部ipv6地址*/;
        std::vector<IE_VERSION> ie_max_version/* FDMS 支持的最高协议版本号*/;
        std::vector<IE_SERVER> ie_server_list/* 可用的服务器地址列表, ipv4, ipv6都用astring来表示*/;
        std::vector<IE_COMPRESS> ie_compress/* FDMS支持的压缩算法，0个（表示不支持压缩）或者1个（表示可以采用这种压缩算法） */;
    };
    typedef zce_smartptr<MSG_REG_LOGIN_STEP1_RES> MSG_REG_LOGIN_STEP1_RES_PTR;

    struct MSG_REG_LOGIN_STEP2_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_LOGIN_STEP2_REQ;
        static const char* type_name() { return ("MSG_REG_LOGIN_STEP2_REQ");}
        IE_FD_LOGIN_INFO    ie_info;
        std::vector<IE_astring64> ie_validate;
        std::vector<IE_VIDEOIN_CAPACITY> ie_videoin_capacity/*上报视频输入通道的能力。channelno填0，使用0语义，表示所有视频输入通道具有相同的能力*/;
        std::vector<IE_ANY> ie_spec/*保留标识*/;
        std::vector<IE_astring254> ie_adminurl/*设备管理URL*/;
    };
    typedef zce_smartptr<MSG_REG_LOGIN_STEP2_REQ> MSG_REG_LOGIN_STEP2_REQ_PTR;

    struct MSG_REG_LOGIN_STEP2_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_LOGIN_STEP2_RES;
        static const char* type_name() { return ("MSG_REG_LOGIN_STEP2_RES");}
        IE_RESULT    ie_result/*操作结果<0，登录失败，给出失败码=0：登录成功*/;
        std::vector<IE_TIME> ie_heart_interval/*心跳间隔时间*/;
        std::vector<IE_CHANNEL_NUMBER> ie_channel_number/*通道数*/;
    };
    typedef zce_smartptr<MSG_REG_LOGIN_STEP2_RES> MSG_REG_LOGIN_STEP2_RES_PTR;

    struct MSG_REG_LOGOUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_LOGOUT_REQ;
        static const char* type_name() { return ("MSG_REG_LOGOUT_REQ");}
        IE_FD_ID    ie_fd_id/*设备ID，必填*/;
    };
    typedef zce_smartptr<MSG_REG_LOGOUT_REQ> MSG_REG_LOGOUT_REQ_PTR;

    struct MSG_REG_LOGOUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_LOGOUT_RES;
        static const char* type_name() { return ("MSG_REG_LOGOUT_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_REG_LOGOUT_RES> MSG_REG_LOGOUT_RES_PTR;

    struct MSG_MONITOR_START_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MONITOR_START_REQ;
        static const char* type_name() { return ("MSG_MONITOR_START_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_NET_SCHEDULE_ADDRESS> ie_schedule_addr/*视频调度地址*/;
        IE_CHAR16    ie_guid/*16字节的guid,激活ID*/;
        std::vector<IE_NET_SCHEDULE_ADDRESS_IPV6> ie_schedule_addr_ipv6/*视频调度地址ipv6*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
        std::vector<IE_UCHAR> ie_uchar/*第0个uchar为1表示接收端支持无线多TCP连接*/;
    };
    typedef zce_smartptr<MSG_MONITOR_START_REQ> MSG_MONITOR_START_REQ_PTR;

    struct MSG_MONITOR_START_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MONITOR_START_RES;
        static const char* type_name() { return ("MSG_MONITOR_START_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
        std::vector<IE_NETADDRESS> ie_netaddr/*接收地址*/;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*接收地址*/;
        std::vector<IE_astring254> ie_url;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_MONITOR_START_RES> MSG_MONITOR_START_RES_PTR;

    struct MSG_MONITOR_STOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MONITOR_STOP_REQ;
        static const char* type_name() { return ("MSG_MONITOR_STOP_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CHAR16    ie_guid/*16字节的guid,标识该监控ID*/;
    };
    typedef zce_smartptr<MSG_MONITOR_STOP_REQ> MSG_MONITOR_STOP_REQ_PTR;

    struct MSG_MONITOR_STOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MONITOR_STOP_RES;
        static const char* type_name() { return ("MSG_MONITOR_STOP_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_MONITOR_STOP_RES> MSG_MONITOR_STOP_RES_PTR;

    struct MSG_CONTROL_PTZ_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_PTZ_REQ;
        static const char* type_name() { return ("MSG_CONTROL_PTZ_REQ");}
        IE_PTZ_CMD    ie_cmd/*设备控制操作*/;
        std::vector<IE_PTZLOCK_INFO> ie_ptzlock_info/*设备锁定信息*/;
    };
    typedef zce_smartptr<MSG_CONTROL_PTZ_REQ> MSG_CONTROL_PTZ_REQ_PTR;

    struct MSG_CONTROL_PTZ_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_PTZ_RES;
        static const char* type_name() { return ("MSG_CONTROL_PTZ_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_PTZLOCK_INFO> ie_ptzlock_info/*设备锁定信息*/;
    };
    typedef zce_smartptr<MSG_CONTROL_PTZ_RES> MSG_CONTROL_PTZ_RES_PTR;

    struct MSG_CONTROL_MATRIX_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_MATRIX_REQ;
        static const char* type_name() { return ("MSG_CONTROL_MATRIX_REQ");}
        IE_MATRIX    ie_matrix/*矩阵级联控制参数*/;
    };
    typedef zce_smartptr<MSG_CONTROL_MATRIX_REQ> MSG_CONTROL_MATRIX_REQ_PTR;

    struct MSG_CONTROL_MATRIX_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_MATRIX_RES;
        static const char* type_name() { return ("MSG_CONTROL_MATRIX_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_MATRIX_RES> MSG_CONTROL_MATRIX_RES_PTR;

    struct MSG_CONTROL_ADDCPS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_ADDCPS_REQ;
        static const char* type_name() { return ("MSG_CONTROL_ADDCPS_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CAMERA_PRESET_CONFIG    ie_config/*摄像机预置点配置信息*/;
    };
    typedef zce_smartptr<MSG_CONTROL_ADDCPS_REQ> MSG_CONTROL_ADDCPS_REQ_PTR;

    struct MSG_CONTROL_ADDCPS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_ADDCPS_RES;
        static const char* type_name() { return ("MSG_CONTROL_ADDCPS_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_ADDCPS_RES> MSG_CONTROL_ADDCPS_RES_PTR;

    struct MSG_CONTROL_DELCPS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_DELCPS_REQ;
        static const char* type_name() { return ("MSG_CONTROL_DELCPS_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CAMERA_PRESET_CONFIG    ie_config/*摄像机预置点配置信息，（除预置点号外，其他信息可不填）*/;
    };
    typedef zce_smartptr<MSG_CONTROL_DELCPS_REQ> MSG_CONTROL_DELCPS_REQ_PTR;

    struct MSG_CONTROL_DELCPS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_DELCPS_RES;
        static const char* type_name() { return ("MSG_CONTROL_DELCPS_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_DELCPS_RES> MSG_CONTROL_DELCPS_RES_PTR;

    struct MSG_CONTROL_GOTOCPS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_GOTOCPS_REQ;
        static const char* type_name() { return ("MSG_CONTROL_GOTOCPS_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CAMERA_PRESET_CONFIG    ie_config/*摄像机预置点信息（除预置点号外，其他信息可不填）*/;
    };
    typedef zce_smartptr<MSG_CONTROL_GOTOCPS_REQ> MSG_CONTROL_GOTOCPS_REQ_PTR;

    struct MSG_CONTROL_GOTOCPS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_GOTOCPS_RES;
        static const char* type_name() { return ("MSG_CONTROL_GOTOCPS_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_GOTOCPS_RES> MSG_CONTROL_GOTOCPS_RES_PTR;

    struct MSG_CONTROL_CLRCPS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_CLRCPS_REQ;
        static const char* type_name() { return ("MSG_CONTROL_CLRCPS_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_CONTROL_CLRCPS_REQ> MSG_CONTROL_CLRCPS_REQ_PTR;

    struct MSG_CONTROL_CLRCPS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_CLRCPS_RES;
        static const char* type_name() { return ("MSG_CONTROL_CLRCPS_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_CLRCPS_RES> MSG_CONTROL_CLRCPS_RES_PTR;

    struct MSG_QUERY_PTZ_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_PTZ_REQ;
        static const char* type_name() { return ("MSG_QUERY_PTZ_REQ");}
        IE_PTZ_CMD    ie_cmd/*指定查询的控制命令*/;
    };
    typedef zce_smartptr<MSG_QUERY_PTZ_REQ> MSG_QUERY_PTZ_REQ_PTR;

    struct MSG_QUERY_PTZ_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_PTZ_RES;
        static const char* type_name() { return ("MSG_QUERY_PTZ_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_PTZ_CMD> ie_cmd/*返回查询的控制参数*/;
    };
    typedef zce_smartptr<MSG_QUERY_PTZ_RES> MSG_QUERY_PTZ_RES_PTR;

    struct MSG_POINT_MAGNIFY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_POINT_MAGNIFY_REQ;
        static const char* type_name() { return ("MSG_POINT_MAGNIFY_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_POINT_MAGNIFY_PARAM    ie_param/*摄像机点击放大参数*/;
    };
    typedef zce_smartptr<MSG_POINT_MAGNIFY_REQ> MSG_POINT_MAGNIFY_REQ_PTR;

    struct MSG_POINT_MAGNIFY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_POINT_MAGNIFY_RES;
        static const char* type_name() { return ("MSG_POINT_MAGNIFY_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_POINT_MAGNIFY_RES> MSG_POINT_MAGNIFY_RES_PTR;

    struct MSG_CALL_START_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CALL_START_REQ;
        static const char* type_name() { return ("MSG_CALL_START_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_NETADDRESS> ie_netaddr;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*音频调度地址ipv6*/;
    };
    typedef zce_smartptr<MSG_CALL_START_REQ> MSG_CALL_START_REQ_PTR;

    struct MSG_CALL_START_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CALL_START_RES;
        static const char* type_name() { return ("MSG_CALL_START_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
        std::vector<IE_NETADDRESS> ie_netaddr;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6;
    };
    typedef zce_smartptr<MSG_CALL_START_RES> MSG_CALL_START_RES_PTR;

    struct MSG_CALL_STOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CALL_STOP_REQ;
        static const char* type_name() { return ("MSG_CALL_STOP_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_CALL_STOP_REQ> MSG_CALL_STOP_REQ_PTR;

    struct MSG_CALL_STOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CALL_STOP_RES;
        static const char* type_name() { return ("MSG_CALL_STOP_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CALL_STOP_RES> MSG_CALL_STOP_RES_PTR;

    struct MSG_WARNING_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_WARNING_NOTIFY;
        static const char* type_name() { return ("MSG_WARNING_NOTIFY");}
        IE_ALARM_INFO    ie_alarm_info/*告警信息*/;
        std::vector<IE_ALARM_CONTENT_PICTURE> alarm_content_picture/*图片告警内容*/;
        std::vector<IE_UUDATA> ie_data/*用户的用户数据*/;
    };
    typedef zce_smartptr<MSG_WARNING_NOTIFY> MSG_WARNING_NOTIFY_PTR;

    struct MSG_RECORD_START_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_START_REQ;
        static const char* type_name() { return ("MSG_RECORD_START_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
        IE_RECORDSTART_REQ    ie_req/*录像的开始时间和结束时间*/;
        std::vector<IE_LONG> ie_timespan/*单个录像文件的时间长度（秒）：number=0：使用服务器默认的时间长度；number=-1：不限定单个录像文件的时间长度；number>0：若在有效范围内，则使用用户指定的时间长度，否则使用服务器的范围边界（5分钟～2小时），该设置只对当次录像有效*/;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,激活ID*/;
        std::vector<IE_NET_SCHEDULE_ADDRESS_IPV6> ie_schedule_addr_ipv6/*视频调度地址ipv6*/;
    };
    typedef zce_smartptr<MSG_RECORD_START_REQ> MSG_RECORD_START_REQ_PTR;

    struct MSG_RECORD_START_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_START_RES;
        static const char* type_name() { return ("MSG_RECORD_START_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_RECORD_START_RES> MSG_RECORD_START_RES_PTR;

    struct MSG_RECORD_STOP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_STOP_REQ;
        static const char* type_name() { return ("MSG_RECORD_STOP_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_qos;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该录像ID*/;
    };
    typedef zce_smartptr<MSG_RECORD_STOP_REQ> MSG_RECORD_STOP_REQ_PTR;

    struct MSG_RECORD_STOP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_STOP_RES;
        static const char* type_name() { return ("MSG_RECORD_STOP_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_RECORD_STOP_RES> MSG_RECORD_STOP_RES_PTR;

    struct MSG_RECORD_START_REPLAY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_START_REPLAY_REQ;
        static const char* type_name() { return ("MSG_RECORD_START_REPLAY_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_TIME_FILE    ie_file/*回放模式参数*/;
        std::vector<IE_NET_SCHEDULE_ADDRESS> ie_scheduler_addr/*期望的接收地址，指示后续码流发往何处*/;
        IE_CHAR16    ie_guid/*16字节的guid,激活ID*/;
        std::vector<IE_ULONG> ie_uaip;
        std::vector<IE_astring64> ie_uaip_ipv6;
        std::vector<IE_NET_SCHEDULE_ADDRESS_IPV6> ie_schedule_addr_ipv6/*期望的接收地址ipv6*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_RECORD_START_REPLAY_REQ> MSG_RECORD_START_REPLAY_REQ_PTR;

    struct MSG_RECORD_START_REPLAY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_START_REPLAY_RES;
        static const char* type_name() { return ("MSG_RECORD_START_REPLAY_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
        std::vector<IE_NETADDRESS> ie_netaddr/*接收地址*/;
        std::vector<IE_astring254> ie_url;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*接收地址*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_RECORD_START_REPLAY_RES> MSG_RECORD_START_REPLAY_RES_PTR;

    struct MSG_RECORD_STOP_REPLAY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_STOP_REPLAY_REQ;
        static const char* type_name() { return ("MSG_RECORD_STOP_REPLAY_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该回放ID*/;
    };
    typedef zce_smartptr<MSG_RECORD_STOP_REPLAY_REQ> MSG_RECORD_STOP_REPLAY_REQ_PTR;

    struct MSG_RECORD_STOP_REPLAY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_STOP_REPLAY_RES;
        static const char* type_name() { return ("MSG_RECORD_STOP_REPLAY_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
    };
    typedef zce_smartptr<MSG_RECORD_STOP_REPLAY_RES> MSG_RECORD_STOP_REPLAY_RES_PTR;

    struct MSG_RECORD_START_DOWNLOAD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_START_DOWNLOAD_REQ;
        static const char* type_name() { return ("MSG_RECORD_START_DOWNLOAD_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_TIME_FILE    ie_file/*下载模式参数*/;
        std::vector<IE_NET_SCHEDULE_ADDRESS> ie_scheduler_addr/*期望接收的地址*/;
        IE_CHAR16    ie_guid/*16字节的guid,激活ID*/;
        std::vector<IE_ULONG> ie_uaip;
        std::vector<IE_astring64> ie_uaip_ipv6;
        std::vector<IE_NET_SCHEDULE_ADDRESS_IPV6> ie_schedule_addr_ipv6/*期望的接收地址ipv6*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_RECORD_START_DOWNLOAD_REQ> MSG_RECORD_START_DOWNLOAD_REQ_PTR;

    struct MSG_RECORD_START_DOWNLOAD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_START_DOWNLOAD_RES;
        static const char* type_name() { return ("MSG_RECORD_START_DOWNLOAD_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
        std::vector<IE_NETADDRESS> ie_netaddr/*接收地址*/;
        std::vector<IE_astring254> ie_url;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6/*接收地址*/;
        std::vector<IE_CHANNEL_INFO> ie_channel_info;
    };
    typedef zce_smartptr<MSG_RECORD_START_DOWNLOAD_RES> MSG_RECORD_START_DOWNLOAD_RES_PTR;

    struct MSG_RECORD_STOP_DOWNLOAD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_STOP_DOWNLOAD_REQ;
        static const char* type_name() { return ("MSG_RECORD_STOP_DOWNLOAD_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该下载ID*/;
    };
    typedef zce_smartptr<MSG_RECORD_STOP_DOWNLOAD_REQ> MSG_RECORD_STOP_DOWNLOAD_REQ_PTR;

    struct MSG_RECORD_STOP_DOWNLOAD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_STOP_DOWNLOAD_RES;
        static const char* type_name() { return ("MSG_RECORD_STOP_DOWNLOAD_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
    };
    typedef zce_smartptr<MSG_RECORD_STOP_DOWNLOAD_RES> MSG_RECORD_STOP_DOWNLOAD_RES_PTR;

    struct MSG_RECORD_DELETE_FILE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_DELETE_FILE_REQ;
        static const char* type_name() { return ("MSG_RECORD_DELETE_FILE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_TIME_FILE    ie_file/*删除参数*/;
        std::vector<IE_UCHAR> ie_qos;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*删除参数V2版本*/;
    };
    typedef zce_smartptr<MSG_RECORD_DELETE_FILE_REQ> MSG_RECORD_DELETE_FILE_REQ_PTR;

    struct MSG_RECORD_DELETE_FILE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_DELETE_FILE_RES;
        static const char* type_name() { return ("MSG_RECORD_DELETE_FILE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_RECORD_DELETE_FILE_RES> MSG_RECORD_DELETE_FILE_RES_PTR;

    struct MSG_CONTROL_RECORD_REPLAY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_RECORD_REPLAY_REQ;
        static const char* type_name() { return ("MSG_CONTROL_RECORD_REPLAY_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CTRL_CMD    ie_cmd/*回放控制命令*/;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该回放ID*/;
    };
    typedef zce_smartptr<MSG_CONTROL_RECORD_REPLAY_REQ> MSG_CONTROL_RECORD_REPLAY_REQ_PTR;

    struct MSG_CONTROL_RECORD_REPLAY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_RECORD_REPLAY_RES;
        static const char* type_name() { return ("MSG_CONTROL_RECORD_REPLAY_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_RECORD_REPLAY_RES> MSG_CONTROL_RECORD_REPLAY_RES_PTR;

    struct MSG_CONTROL_RECORD_DOWNLOAD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_RECORD_DOWNLOAD_REQ;
        static const char* type_name() { return ("MSG_CONTROL_RECORD_DOWNLOAD_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CTRL_CMD    ie_cmd/*下载控制命令*/;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该回放ID*/;
    };
    typedef zce_smartptr<MSG_CONTROL_RECORD_DOWNLOAD_REQ> MSG_CONTROL_RECORD_DOWNLOAD_REQ_PTR;

    struct MSG_CONTROL_RECORD_DOWNLOAD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTROL_RECORD_DOWNLOAD_RES;
        static const char* type_name() { return ("MSG_CONTROL_RECORD_DOWNLOAD_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONTROL_RECORD_DOWNLOAD_RES> MSG_CONTROL_RECORD_DOWNLOAD_RES_PTR;

    struct MSG_RECORD_LOCK_FILE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_LOCK_FILE_REQ;
        static const char* type_name() { return ("MSG_RECORD_LOCK_FILE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*锁定参数V2版本*/;
    };
    typedef zce_smartptr<MSG_RECORD_LOCK_FILE_REQ> MSG_RECORD_LOCK_FILE_REQ_PTR;

    struct MSG_RECORD_LOCK_FILE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_LOCK_FILE_RES;
        static const char* type_name() { return ("MSG_RECORD_LOCK_FILE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_RECORD_LOCK_FILE_RES> MSG_RECORD_LOCK_FILE_RES_PTR;

    struct MSG_QUERY_RECORDINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECORDINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_RECORDINFO_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_TIME_FILE    ie_file/*查询条件。（可以通过指定Flag字段来指明通过时间还是通过文件来查询）*/;
        std::vector<IE_ULONG> ie_uaip;
        std::vector<IE_astring64> ie_uaip_ipv6/*uas检测到的ua ip地址*/;
        std::vector<IE_UCHAR> ie_qos;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*查询参数V2版本*/;
    };
    typedef zce_smartptr<MSG_QUERY_RECORDINFO_REQ> MSG_QUERY_RECORDINFO_REQ_PTR;

    struct MSG_QUERY_RECORDINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECORDINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_RECORDINFO_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码 >=0：表示总个数*/;
        std::vector<IE_TIME_FILE> ie_file/*返回多个录像信息，如果没有文件结构可以不填本域，仅根据IE_RESULT判断是否录像是否存在*/;
        std::vector<IE_TIME_FILE_V2> ie_list2/*返回多个V2录像信息，如果没有文件结构可以不填本域，仅根据IE_RESULT判断是否录像是否存在*/;
    };
    typedef zce_smartptr<MSG_QUERY_RECORDINFO_RES> MSG_QUERY_RECORDINFO_RES_PTR;

    struct MSG_QUERY_DISKINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_DISKINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_DISKINFO_REQ");}
    };
    typedef zce_smartptr<MSG_QUERY_DISKINFO_REQ> MSG_QUERY_DISKINFO_REQ_PTR;

    struct MSG_QUERY_DISKINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_DISKINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_DISKINFO_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码 >=0：表示总个数*/;
        std::vector<IE_HARDDISK> ie_info/*磁盘信息列表操作失败无此域，成功填写单个磁盘信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_DISKINFO_RES> MSG_QUERY_DISKINFO_RES_PTR;

    struct MSG_QUERY_SYSINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_SYSINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_SYSINFO_REQ");}
    };
    typedef zce_smartptr<MSG_QUERY_SYSINFO_REQ> MSG_QUERY_SYSINFO_REQ_PTR;

    struct MSG_QUERY_SYSINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_SYSINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_SYSINFO_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_SYSTEM_CONFIG> ie_info/*操作失败无此域，成功填写系统配置信息，其中保密的信息（如密码）可不填*/;
        std::vector<IE_SYSTEM_CONFIG_IPV6> ie_info_ipv6/*操作失败无此域，成功填写系统配置信息，其中保密的信息（如密码）可不填*/;
    };
    typedef zce_smartptr<MSG_QUERY_SYSINFO_RES> MSG_QUERY_SYSINFO_RES_PTR;

    struct MSG_QUERY_CAMINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_CAMINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_CAMINFO_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_CAMINFO_REQ> MSG_QUERY_CAMINFO_REQ_PTR;

    struct MSG_QUERY_CAMINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_CAMINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_CAMINFO_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_CAMERA_CONFIG> ie_info/*操作失败无此域，成功填写摄像机配置信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_CAMINFO_RES> MSG_QUERY_CAMINFO_RES_PTR;

    struct MSG_QUERY_CPSINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_CPSINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_CPSINFO_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_CPSINFO_REQ> MSG_QUERY_CPSINFO_REQ_PTR;

    struct MSG_QUERY_CPSINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_CPSINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_CPSINFO_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码>=0：表示总个数*/;
        std::vector<IE_CAMERA_PRESET_CONFIG> ie_info/*操作失败无此域，成功填写摄像机预置点配置信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_CPSINFO_RES> MSG_QUERY_CPSINFO_RES_PTR;

    struct MSG_QUERY_RECTIME_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECTIME_REQ;
        static const char* type_name() { return ("MSG_QUERY_RECTIME_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_QUERY_RECTIME_REQ> MSG_QUERY_RECTIME_REQ_PTR;

    struct MSG_QUERY_RECTIME_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECTIME_RES;
        static const char* type_name() { return ("MSG_QUERY_RECTIME_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码>=0：表示总个数*/;
        std::vector<IE_TIME_DETAIL_LIST> ie_list/*操作失败无此域，成功填写录像时间表，可能有多个，视具体情况*/;
    };
    typedef zce_smartptr<MSG_QUERY_RECTIME_RES> MSG_QUERY_RECTIME_RES_PTR;

    struct MSG_QUERY_VMOTION_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VMOTION_REQ;
        static const char* type_name() { return ("MSG_QUERY_VMOTION_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_VMOTION_REQ> MSG_QUERY_VMOTION_REQ_PTR;

    struct MSG_QUERY_VMOTION_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VMOTION_RES;
        static const char* type_name() { return ("MSG_QUERY_VMOTION_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码，无后续内容=0：成功，必须填写后续内容*/;
        std::vector<IE_VIDEO_MOTION> ie_config/*视频参数*/;
    };
    typedef zce_smartptr<MSG_QUERY_VMOTION_RES> MSG_QUERY_VMOTION_RES_PTR;

    struct MSG_QUERY_VLOST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VLOST_REQ;
        static const char* type_name() { return ("MSG_QUERY_VLOST_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_VLOST_REQ> MSG_QUERY_VLOST_REQ_PTR;

    struct MSG_QUERY_VLOST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VLOST_RES;
        static const char* type_name() { return ("MSG_QUERY_VLOST_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码，无后续内容=0：成功，必须填写后续内容*/;
        std::vector<IE_UCHAR> ie_uc/*查询视频丢失检测配置0：已取消视频丢失检测1：已启用视频丢失检测*/;
    };
    typedef zce_smartptr<MSG_QUERY_VLOST_RES> MSG_QUERY_VLOST_RES_PTR;

    struct MSG_QUERY_VMOSAIC_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VMOSAIC_REQ;
        static const char* type_name() { return ("MSG_QUERY_VMOSAIC_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_VMOSAIC_REQ> MSG_QUERY_VMOSAIC_REQ_PTR;

    struct MSG_QUERY_VMOSAIC_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VMOSAIC_RES;
        static const char* type_name() { return ("MSG_QUERY_VMOSAIC_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码，无后续内容=0：成功，必须填写后续内容*/;
        std::vector<IE_VIDEO_REGION> ie_region/*视频区域*/;
    };
    typedef zce_smartptr<MSG_QUERY_VMOSAIC_RES> MSG_QUERY_VMOSAIC_RES_PTR;

    struct MSG_QUERY_VPARAM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VPARAM_REQ;
        static const char* type_name() { return ("MSG_QUERY_VPARAM_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_VPARAM_REQ> MSG_QUERY_VPARAM_REQ_PTR;

    struct MSG_QUERY_VPARAM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_VPARAM_RES;
        static const char* type_name() { return ("MSG_QUERY_VPARAM_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码，无后续内容=0：成功，必须填写后续内容*/;
        std::vector<IE_VIDEO_CONFIG> ie_config/*视频图像参数信息列表*/;
    };
    typedef zce_smartptr<MSG_QUERY_VPARAM_RES> MSG_QUERY_VPARAM_RES_PTR;

    struct MSG_CONFIG_SYSINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_SYSINFO_REQ;
        static const char* type_name() { return ("MSG_CONFIG_SYSINFO_REQ");}
        std::vector<IE_SYSTEM_CONFIG> ie_config/*系统配置信息*/;
        std::vector<IE_SYSTEM_CONFIG_IPV6> ie_config_ipv6/*系统配置信息*/;
    };
    typedef zce_smartptr<MSG_CONFIG_SYSINFO_REQ> MSG_CONFIG_SYSINFO_REQ_PTR;

    struct MSG_CONFIG_SYSINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_SYSINFO_RES;
        static const char* type_name() { return ("MSG_CONFIG_SYSINFO_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_SYSINFO_RES> MSG_CONFIG_SYSINFO_RES_PTR;

    struct MSG_CONFIG_CAMINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_CAMINFO_REQ;
        static const char* type_name() { return ("MSG_CONFIG_CAMINFO_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CAMERA_CONFIG    ie_config/*摄像机配置信息*/;
    };
    typedef zce_smartptr<MSG_CONFIG_CAMINFO_REQ> MSG_CONFIG_CAMINFO_REQ_PTR;

    struct MSG_CONFIG_CAMINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_CAMINFO_RES;
        static const char* type_name() { return ("MSG_CONFIG_CAMINFO_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_CAMINFO_RES> MSG_CONFIG_CAMINFO_RES_PTR;

    struct MSG_CONFIG_RECTIME_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_RECTIME_REQ;
        static const char* type_name() { return ("MSG_CONFIG_RECTIME_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_type/*存储类型: 0前端; 1中心; 不填该IE默认为0*/;
        std::vector<IE_TIME_DETAIL_LIST> ie_list/*录像时间表，可能有多个，视具体情况*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_CONFIG_RECTIME_REQ> MSG_CONFIG_RECTIME_REQ_PTR;

    struct MSG_CONFIG_RECTIME_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_RECTIME_RES;
        static const char* type_name() { return ("MSG_CONFIG_RECTIME_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_RECTIME_RES> MSG_CONFIG_RECTIME_RES_PTR;

    struct MSG_CONFIG_VMOTION_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VMOTION_REQ;
        static const char* type_name() { return ("MSG_CONFIG_VMOTION_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_VIDEO_MOTION    ie_config/*视频侦测参数*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VMOTION_REQ> MSG_CONFIG_VMOTION_REQ_PTR;

    struct MSG_CONFIG_VMOTION_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VMOTION_RES;
        static const char* type_name() { return ("MSG_CONFIG_VMOTION_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VMOTION_RES> MSG_CONFIG_VMOTION_RES_PTR;

    struct MSG_CONFIG_VLOST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VLOST_REQ;
        static const char* type_name() { return ("MSG_CONFIG_VLOST_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_uc/*配置视频丢失检测操作0：取消该通道的视频丢失检测1：设置该通道的视频丢失检测*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VLOST_REQ> MSG_CONFIG_VLOST_REQ_PTR;

    struct MSG_CONFIG_VLOST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VLOST_RES;
        static const char* type_name() { return ("MSG_CONFIG_VLOST_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VLOST_RES> MSG_CONFIG_VLOST_RES_PTR;

    struct MSG_CONFIG_VMOSAIC_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VMOSAIC_REQ;
        static const char* type_name() { return ("MSG_CONFIG_VMOSAIC_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_VIDEO_REGION    ie_region/*视频区域*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VMOSAIC_REQ> MSG_CONFIG_VMOSAIC_REQ_PTR;

    struct MSG_CONFIG_VMOSAIC_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VMOSAIC_RES;
        static const char* type_name() { return ("MSG_CONFIG_VMOSAIC_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VMOSAIC_RES> MSG_CONFIG_VMOSAIC_RES_PTR;

    struct MSG_CONFIG_VPARAM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VPARAM_REQ;
        static const char* type_name() { return ("MSG_CONFIG_VPARAM_REQ");}
        std::vector<IE_VIDEO_CONFIG> ie_config/*视频图像参数信息列表*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VPARAM_REQ> MSG_CONFIG_VPARAM_REQ_PTR;

    struct MSG_CONFIG_VPARAM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_VPARAM_RES;
        static const char* type_name() { return ("MSG_CONFIG_VPARAM_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_VPARAM_RES> MSG_CONFIG_VPARAM_RES_PTR;

    struct MSG_MGR_REMOTE_RESTART_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_REMOTE_RESTART_REQ;
        static const char* type_name() { return ("MSG_MGR_REMOTE_RESTART_REQ");}
        IE_ULONG    ie_time/*以UTC表示的重启时刻,0表示立即重启*/;
    };
    typedef zce_smartptr<MSG_MGR_REMOTE_RESTART_REQ> MSG_MGR_REMOTE_RESTART_REQ_PTR;

    struct MSG_MGR_REMOTE_RESTART_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_REMOTE_RESTART_RES;
        static const char* type_name() { return ("MSG_MGR_REMOTE_RESTART_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_MGR_REMOTE_RESTART_RES> MSG_MGR_REMOTE_RESTART_RES_PTR;

    struct MSG_MGR_QUERY_SYSTIME_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_QUERY_SYSTIME_REQ;
        static const char* type_name() { return ("MSG_MGR_QUERY_SYSTIME_REQ");}
    };
    typedef zce_smartptr<MSG_MGR_QUERY_SYSTIME_REQ> MSG_MGR_QUERY_SYSTIME_REQ_PTR;

    struct MSG_MGR_QUERY_SYSTIME_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_QUERY_SYSTIME_RES;
        static const char* type_name() { return ("MSG_MGR_QUERY_SYSTIME_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_ULONG> ie_time/*时间，以长整型表示，精确到秒*/;
    };
    typedef zce_smartptr<MSG_MGR_QUERY_SYSTIME_RES> MSG_MGR_QUERY_SYSTIME_RES_PTR;

    struct MSG_MGR_CONFIG_SYSTIME_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_CONFIG_SYSTIME_REQ;
        static const char* type_name() { return ("MSG_MGR_CONFIG_SYSTIME_REQ");}
        IE_TIME    ie_time/*时间，精确到秒*/;
    };
    typedef zce_smartptr<MSG_MGR_CONFIG_SYSTIME_REQ> MSG_MGR_CONFIG_SYSTIME_REQ_PTR;

    struct MSG_MGR_CONFIG_SYSTIME_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_CONFIG_SYSTIME_RES;
        static const char* type_name() { return ("MSG_MGR_CONFIG_SYSTIME_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_MGR_CONFIG_SYSTIME_RES> MSG_MGR_CONFIG_SYSTIME_RES_PTR;

    struct MSG_MGR_UPGRADE_SOFTWARE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_UPGRADE_SOFTWARE_REQ;
        static const char* type_name() { return ("MSG_MGR_UPGRADE_SOFTWARE_REQ");}
        IE_UPDATE_SOFTWARE    ie_update/*升级详细信息*/;
        std::vector<IE_ANY_V2> ie_file/*升级文件*/;
    };
    typedef zce_smartptr<MSG_MGR_UPGRADE_SOFTWARE_REQ> MSG_MGR_UPGRADE_SOFTWARE_REQ_PTR;

    struct MSG_MGR_UPGRADE_SOFTWARE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MGR_UPGRADE_SOFTWARE_RES;
        static const char* type_name() { return ("MSG_MGR_UPGRADE_SOFTWARE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_MGR_UPGRADE_SOFTWARE_RES> MSG_MGR_UPGRADE_SOFTWARE_RES_PTR;

    struct MSG_NONSTANDARD_CMD : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_NONSTANDARD_CMD;
        static const char* type_name() { return ("MSG_NONSTANDARD_CMD");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UUDATA    ie_data/*用户的用户数据*/;
    };
    typedef zce_smartptr<MSG_NONSTANDARD_CMD> MSG_NONSTANDARD_CMD_PTR;

    struct MSG_FDMS_LOG_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDMS_LOG_NOTIFY;
        static const char* type_name() { return ("MSG_FDMS_LOG_NOTIFY");}
        IE_UCHAR    ie_type/*0:登出 1:登陆, (高7位表示设备的登录协议，见PTL_TYPE)*/;
    };
    typedef zce_smartptr<MSG_FDMS_LOG_NOTIFY> MSG_FDMS_LOG_NOTIFY_PTR;

    struct MSG_UA_QUERYFDSTATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERYFDSTATUS_REQ;
        static const char* type_name() { return ("MSG_UA_QUERYFDSTATUS_REQ");}
    };
    typedef zce_smartptr<MSG_UA_QUERYFDSTATUS_REQ> MSG_UA_QUERYFDSTATUS_REQ_PTR;

    struct MSG_UA_QUERYFDSTATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERYFDSTATUS_RES;
        static const char* type_name() { return ("MSG_UA_QUERYFDSTATUS_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_ACTIVE_STATUS> ie_status;
    };
    typedef zce_smartptr<MSG_UA_QUERYFDSTATUS_RES> MSG_UA_QUERYFDSTATUS_RES_PTR;

    struct MSG_UAS_EVENT_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_EVENT_NOTIFY;
        static const char* type_name() { return ("MSG_UAS_EVENT_NOTIFY");}
        IE_UAS_EVENT_NOTIFY    ie_notify;
    };
    typedef zce_smartptr<MSG_UAS_EVENT_NOTIFY> MSG_UAS_EVENT_NOTIFY_PTR;

    struct MSG_FD_STATUS_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_STATUS_NOTIFY;
        static const char* type_name() { return ("MSG_FD_STATUS_NOTIFY");}
        IE_ULONG    ie_event/*0, 设备上下线通知，1，通道状态变化通知*/;
        std::vector<IE_ONLINE_STATUS> ie_fd_online_status/*ie_event=0时填写*/;
        std::vector<IE_CHANNEL_STATUS_SIMPLE> ie_channel_status_simple/*ie_event=1时填写*/;
    };
    typedef zce_smartptr<MSG_FD_STATUS_NOTIFY> MSG_FD_STATUS_NOTIFY_PTR;

    struct MSG_UA_QUERYCAMERAPRESET_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERYCAMERAPRESET_REQ;
        static const char* type_name() { return ("MSG_UA_QUERYCAMERAPRESET_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_UA_QUERYCAMERAPRESET_REQ> MSG_UA_QUERYCAMERAPRESET_REQ_PTR;

    struct MSG_UA_QUERYCAMERAPRESET_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERYCAMERAPRESET_RES;
        static const char* type_name() { return ("MSG_UA_QUERYCAMERAPRESET_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0: 摄像机预置点配置信息个数*/;
        std::vector<IE_CAMERA_PRESET_CONFIG> ie_preset_list;
    };
    typedef zce_smartptr<MSG_UA_QUERYCAMERAPRESET_RES> MSG_UA_QUERYCAMERAPRESET_RES_PTR;

    struct MSG_FD_NAME_MOD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_NAME_MOD_REQ;
        static const char* type_name() { return ("MSG_FD_NAME_MOD_REQ");}
        IE_astring64    ie_fd_name;
    };
    typedef zce_smartptr<MSG_FD_NAME_MOD_REQ> MSG_FD_NAME_MOD_REQ_PTR;

    struct MSG_FD_NAME_MOD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_NAME_MOD_RES;
        static const char* type_name() { return ("MSG_FD_NAME_MOD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FD_NAME_MOD_RES> MSG_FD_NAME_MOD_RES_PTR;

    struct MSG_CHANNEL_NAME_MOD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHANNEL_NAME_MOD_REQ;
        static const char* type_name() { return ("MSG_CHANNEL_NAME_MOD_REQ");}
        IE_CHANNEL_NAME    ie_channel_name;
        std::vector<IE_CHANNEL_NAME_V2> ie_channel_name_v2;
    };
    typedef zce_smartptr<MSG_CHANNEL_NAME_MOD_REQ> MSG_CHANNEL_NAME_MOD_REQ_PTR;

    struct MSG_CHANNEL_NAME_MOD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHANNEL_NAME_MOD_RES;
        static const char* type_name() { return ("MSG_CHANNEL_NAME_MOD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_CHANNEL_NAME_MOD_RES> MSG_CHANNEL_NAME_MOD_RES_PTR;

    struct MSG_QUERY_UAROLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_UAROLE_REQ;
        static const char* type_name() { return ("MSG_QUERY_UAROLE_REQ");}
        IE_UA_ID    ie_ua_id/*用户ID:全0表示自己*/;
    };
    typedef zce_smartptr<MSG_QUERY_UAROLE_REQ> MSG_QUERY_UAROLE_REQ_PTR;

    struct MSG_QUERY_UAROLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_UAROLE_RES;
        static const char* type_name() { return ("MSG_QUERY_UAROLE_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:该用户对应的根管理单元个数*/;
        std::vector<IE_UA_ROLE> ie_ua_role/*角色及对应用户类型列表*/;
    };
    typedef zce_smartptr<MSG_QUERY_UAROLE_RES> MSG_QUERY_UAROLE_RES_PTR;

    struct MSG_QUERY_SUBROLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_SUBROLE_REQ;
        static const char* type_name() { return ("MSG_QUERY_SUBROLE_REQ");}
        IE_ROLE_ID    ie_role_id/*角色ID */;
    };
    typedef zce_smartptr<MSG_QUERY_SUBROLE_REQ> MSG_QUERY_SUBROLE_REQ_PTR;

    struct MSG_QUERY_SUBROLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_SUBROLE_RES;
        static const char* type_name() { return ("MSG_QUERY_SUBROLE_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:该角色对应的子单元个数*/;
        std::vector<IE_ROLE> ie_role/*子单元列表,不递归*/;
    };
    typedef zce_smartptr<MSG_QUERY_SUBROLE_RES> MSG_QUERY_SUBROLE_RES_PTR;

    struct MSG_QUERY_SUBUAROLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_SUBUAROLE_REQ;
        static const char* type_name() { return ("MSG_QUERY_SUBUAROLE_REQ");}
        IE_UA_ID    ie_ua_id/*用户ID:全0表示*/;
        IE_ROLE_ID    ie_role_id/*角色ID */;
        IE_UCHAR    ie_ua_type/*用户类型:1 普通人员关系 2 设备管理权关系 4 人事管理权关系*/;
    };
    typedef zce_smartptr<MSG_QUERY_SUBUAROLE_REQ> MSG_QUERY_SUBUAROLE_REQ_PTR;

    struct MSG_QUERY_SUBUAROLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_SUBUAROLE_RES;
        static const char* type_name() { return ("MSG_QUERY_SUBUAROLE_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:该角色对应的子单元个数*/;
        std::vector<IE_UA_ROLE> ie_ua_role;
    };
    typedef zce_smartptr<MSG_QUERY_SUBUAROLE_RES> MSG_QUERY_SUBUAROLE_RES_PTR;

    struct MSG_QUERY_ROLEUSER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_ROLEUSER_REQ;
        static const char* type_name() { return ("MSG_QUERY_ROLEUSER_REQ");}
        IE_ROLE_ID    ie_role_id/*角色ID */;
        IE_UCHAR    ie_ua_type/*用户类型: 1 普通人员关系 2 设备管理权关系 4 人事管理权关系,按位或*/;
        std::vector<IE_UCHAR> ie_recursive/*是否递归查询角色的子角色相关的用户:1,递归;0不递归;如果没有该IE则不递归*/;
    };
    typedef zce_smartptr<MSG_QUERY_ROLEUSER_REQ> MSG_QUERY_ROLEUSER_REQ_PTR;

    struct MSG_QUERY_ROLEUSER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_ROLEUSER_RES;
        static const char* type_name() { return ("MSG_QUERY_ROLEUSER_RES");}
        IE_RESULT    ie_result/*<0:错误原因>=0:该角色对应的用户个数*/;
        std::vector<IE_ROLE_USER> ie_role_user/*用户列表*/;
        std::vector<IE_ROLE_ID> ie_role_id/*用户对应的角色列表*/;
    };
    typedef zce_smartptr<MSG_QUERY_ROLEUSER_RES> MSG_QUERY_ROLEUSER_RES_PTR;

    struct MSG_ADD_ROLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ADD_ROLE_REQ;
        static const char* type_name() { return ("MSG_ADD_ROLE_REQ");}
        IE_ROLE_ID    ie_parent_role_id/*父角色ID*/;
        IE_ROLE    ie_role/*角色信息*/;
    };
    typedef zce_smartptr<MSG_ADD_ROLE_REQ> MSG_ADD_ROLE_REQ_PTR;

    struct MSG_ADD_ROLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ADD_ROLE_RES;
        static const char* type_name() { return ("MSG_ADD_ROLE_RES");}
        IE_RESULT    ie_result/*<0:错误原因=0: 创建成功*/;
        std::vector<IE_ROLE_ID> ie_role_id/*创建成功的角色ID*/;
    };
    typedef zce_smartptr<MSG_ADD_ROLE_RES> MSG_ADD_ROLE_RES_PTR;

    struct MSG_DELETE_ROLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DELETE_ROLE_REQ;
        static const char* type_name() { return ("MSG_DELETE_ROLE_REQ");}
        IE_ROLE_ID    ie_role_id/*要删除的角色ID*/;
    };
    typedef zce_smartptr<MSG_DELETE_ROLE_REQ> MSG_DELETE_ROLE_REQ_PTR;

    struct MSG_DELETE_ROLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DELETE_ROLE_RES;
        static const char* type_name() { return ("MSG_DELETE_ROLE_RES");}
        IE_RESULT    ie_result/*<0:错误原因=0: 删除成功*/;
    };
    typedef zce_smartptr<MSG_DELETE_ROLE_RES> MSG_DELETE_ROLE_RES_PTR;

    struct MSG_MODIFY_ROLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MODIFY_ROLE_REQ;
        static const char* type_name() { return ("MSG_MODIFY_ROLE_REQ");}
        IE_ROLE    ie_role;
    };
    typedef zce_smartptr<MSG_MODIFY_ROLE_REQ> MSG_MODIFY_ROLE_REQ_PTR;

    struct MSG_MODIFY_ROLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MODIFY_ROLE_RES;
        static const char* type_name() { return ("MSG_MODIFY_ROLE_RES");}
        IE_RESULT    ie_result/*<0:错误原因=0: 删除成功*/;
    };
    typedef zce_smartptr<MSG_MODIFY_ROLE_RES> MSG_MODIFY_ROLE_RES_PTR;

    struct MSG_UAPRIVILEGE_ADMIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAPRIVILEGE_ADMIN_REQ;
        static const char* type_name() { return ("MSG_UAPRIVILEGE_ADMIN_REQ");}
        IE_UA_PRIV_ADMIN    ie_ua_priv_admin;
    };
    typedef zce_smartptr<MSG_UAPRIVILEGE_ADMIN_REQ> MSG_UAPRIVILEGE_ADMIN_REQ_PTR;

    struct MSG_UAPRIVILEGE_ADMIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAPRIVILEGE_ADMIN_RES;
        static const char* type_name() { return ("MSG_UAPRIVILEGE_ADMIN_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UAPRIVILEGE_ADMIN_RES> MSG_UAPRIVILEGE_ADMIN_RES_PTR;

    struct MSG_ONCERECORDSCHEDULE_ADMIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ONCERECORDSCHEDULE_ADMIN_REQ;
        static const char* type_name() { return ("MSG_ONCERECORDSCHEDULE_ADMIN_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_admin_type/*操作类型：1：修改；2：添加；4：删除*/;
        std::vector<IE_UCHAR> ie_type/*存储类型: 0前端; 1中心; 不填该IE默认为0*/;
        std::vector<IE_TIME_SECTOR_WITHGUID> ie_list/*IE_TIME_SECTOR_WITHGUID列表（添加时，GUID值填全0；删除时：根据GUID来删除计划：begintime和endtime值填0；列表为空时，表示删除该通道所有的一次性计划）*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_ONCERECORDSCHEDULE_ADMIN_REQ> MSG_ONCERECORDSCHEDULE_ADMIN_REQ_PTR;

    struct MSG_ONCERECORDSCHEDULE_ADMIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ONCERECORDSCHEDULE_ADMIN_RES;
        static const char* type_name() { return ("MSG_ONCERECORDSCHEDULE_ADMIN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CHAR16> ie_guid/*GUID列表（添加成功：返回各时间段对应的GUID；）*/;
    };
    typedef zce_smartptr<MSG_ONCERECORDSCHEDULE_ADMIN_RES> MSG_ONCERECORDSCHEDULE_ADMIN_RES_PTR;

    struct MSG_QUERY_ONCERECORDSCHEDULE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_ONCERECORDSCHEDULE_REQ;
        static const char* type_name() { return ("MSG_QUERY_ONCERECORDSCHEDULE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_type/*存储类型: 0前端; 1中心; 不填该IE默认为0*/;
        std::vector<IE_TIME_SECTOR> ie_list/*查询的时间段，begintime=0:表示查询endtime之前的所有计划；endtime＝0：表示查询begintime之后的所有计划；没有该IE：表示查询所有的一次性计划*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_QUERY_ONCERECORDSCHEDULE_REQ> MSG_QUERY_ONCERECORDSCHEDULE_REQ_PTR;

    struct MSG_QUERY_ONCERECORDSCHEDULE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_ONCERECORDSCHEDULE_RES;
        static const char* type_name() { return ("MSG_QUERY_ONCERECORDSCHEDULE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_TIME_SECTOR_WITHGUID> ie_list;
    };
    typedef zce_smartptr<MSG_QUERY_ONCERECORDSCHEDULE_RES> MSG_QUERY_ONCERECORDSCHEDULE_RES_PTR;

    struct MSG_QUERY_RECORDSTATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECORDSTATUS_REQ;
        static const char* type_name() { return ("MSG_QUERY_RECORDSTATUS_REQ");}
        std::vector<IE_CHANNEL_ID> ie_channel_id/*设备通道索引，IE为空表示查询所有通道*/;
        std::vector<IE_UCHAR> ie_type/*存储类型: 0前端; 1中心; 不填该IE默认为0*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_QUERY_RECORDSTATUS_REQ> MSG_QUERY_RECORDSTATUS_REQ_PTR;

    struct MSG_QUERY_RECORDSTATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECORDSTATUS_RES;
        static const char* type_name() { return ("MSG_QUERY_RECORDSTATUS_RES");}
        IE_RESULT    ie_result/*<0,表示错误码；＝0表示所查询的通道都不在录像状态；>0,表示有录像状态（正在录像、正准备录像等）的通道个数*/;
        std::vector<IE_RECORD_STATUS> ie_status;
    };
    typedef zce_smartptr<MSG_QUERY_RECORDSTATUS_RES> MSG_QUERY_RECORDSTATUS_RES_PTR;

    struct MSG_RECORDSTOP_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORDSTOP_NOTIFY;
        static const char* type_name() { return ("MSG_RECORDSTOP_NOTIFY");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_RECORDSTOP_NOTIFY> MSG_RECORDSTOP_NOTIFY_PTR;

    struct MSG_RECORDSTART_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORDSTART_NOTIFY;
        static const char* type_name() { return ("MSG_RECORDSTART_NOTIFY");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_RECORDSTART_NOTIFY> MSG_RECORDSTART_NOTIFY_PTR;

    struct MSG_QUERY_UASTATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_UASTATUS_REQ;
        static const char* type_name() { return ("MSG_QUERY_UASTATUS_REQ");}
        std::vector<IE_UA_ID> ie_ua_id/*指定查询的用户ID*/;
        std::vector<IE_astring64> ie_email/*Email，id和email两者选其一；若两个都有，以id为准；若两个都没有，返回错误*/;
    };
    typedef zce_smartptr<MSG_QUERY_UASTATUS_REQ> MSG_QUERY_UASTATUS_REQ_PTR;

    struct MSG_QUERY_UASTATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_UASTATUS_RES;
        static const char* type_name() { return ("MSG_QUERY_UASTATUS_RES");}
        IE_RESULT    ie_result/*<0,查询失败；=0,查询成功 */;
        std::vector<IE_ONLINE_STATUS> ie_ua_status;
    };
    typedef zce_smartptr<MSG_QUERY_UASTATUS_RES> MSG_QUERY_UASTATUS_RES_PTR;

    struct MSG_UA_FDACCREDIT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_FDACCREDIT_REQ;
        static const char* type_name() { return ("MSG_UA_FDACCREDIT_REQ");}
        IE_FD_IDNAME    ie_fd_idname/*设备ID及name*/;
        IE_CLIENT_IDNAME    ie_client_idname/*客户id及name*/;
        std::vector<IE_CHANNEL_PRIVILEGE> ie_channel_priv/*设备通道及对应的权限*/;
    };
    typedef zce_smartptr<MSG_UA_FDACCREDIT_REQ> MSG_UA_FDACCREDIT_REQ_PTR;

    struct MSG_UA_FDACCREDIT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_FDACCREDIT_RES;
        static const char* type_name() { return ("MSG_UA_FDACCREDIT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_FDACCREDIT_RES> MSG_UA_FDACCREDIT_RES_PTR;

    struct MSG_QUERY_STATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_STATUS_REQ;
        static const char* type_name() { return ("MSG_QUERY_STATUS_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_STATUS_REQ> MSG_QUERY_STATUS_REQ_PTR;

    struct MSG_QUERY_STATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_STATUS_RES;
        static const char* type_name() { return ("MSG_QUERY_STATUS_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码，无后续内容=0：成功，必须填写后续内容*/;
        std::vector<IE_CHANNEL_STATUS> ie_channel_status/*0或多个该结构.对应通道的运行状态信息,如果查询所有,则填所有通道状态信息*/;
        std::vector<IE_CHANNEL_STATUS_V2> ie_channel_status_v2/*0或多个该结构.对应通道的运行状态信息,如果查询所有,则填所有通道状态信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_STATUS_RES> MSG_QUERY_STATUS_RES_PTR;

    struct MSG_REG_REPORT_CHANNEL_INFO : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REG_REPORT_CHANNEL_INFO;
        static const char* type_name() { return ("MSG_REG_REPORT_CHANNEL_INFO");}
        std::vector<IE_SYSTEM_CONFIG> ie_system_config/*简单的系统信息*/;
        std::vector<IE_VIDEO_CONFIG> ie_video_config/*视频通道信息列表,0或多个*/;
        std::vector<IE_AUDIO_CONFIG> ie_audio_config/*音频通道信息列表,0或多个*/;
        std::vector<IE_SYSTEM_CONFIG_IPV6> ie_system_config_ipv6/*简单的系统信息*/;
    };
    typedef zce_smartptr<MSG_REG_REPORT_CHANNEL_INFO> MSG_REG_REPORT_CHANNEL_INFO_PTR;

    struct MSG_PTZ_ACT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_PTZ_ACT_REQ;
        static const char* type_name() { return ("MSG_PTZ_ACT_REQ");}
        IE_UCHAR    ie_action/*0 重设；1 增加；2 删除*/;
        std::vector<IE_FD_ID> ie_fd_id/*FDID代理*/;
    };
    typedef zce_smartptr<MSG_PTZ_ACT_REQ> MSG_PTZ_ACT_REQ_PTR;

    struct MSG_PTZ_ACT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_PTZ_ACT_RES;
        static const char* type_name() { return ("MSG_PTZ_ACT_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码>=0：表示总个数*/;
    };
    typedef zce_smartptr<MSG_PTZ_ACT_RES> MSG_PTZ_ACT_RES_PTR;

    struct MSG_UACONFIG_QUERY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UACONFIG_QUERY_REQ;
        static const char* type_name() { return ("MSG_UACONFIG_QUERY_REQ");}
        std::vector<IE_UCHAR> ie_default/*是否请求该用户所属客户的默认配置：0：否；1：是*/;
    };
    typedef zce_smartptr<MSG_UACONFIG_QUERY_REQ> MSG_UACONFIG_QUERY_REQ_PTR;

    struct MSG_UACONFIG_QUERY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UACONFIG_QUERY_RES;
        static const char* type_name() { return ("MSG_UACONFIG_QUERY_RES");}
        IE_RESULT    ie_result/*<0:失败; 0:没有配置信息; =1:成功*/;
        std::vector<IE_UACONFIG> ie_uaconfig;
    };
    typedef zce_smartptr<MSG_UACONFIG_QUERY_RES> MSG_UACONFIG_QUERY_RES_PTR;

    struct MSG_UACONFIG_ADMIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UACONFIG_ADMIN_REQ;
        static const char* type_name() { return ("MSG_UACONFIG_ADMIN_REQ");}
        IE_UCHAR    ie_as_default/*是否将该配置作为该用户所属客户的默认配置：0：否；1：是*/;
        IE_UACONFIG    ie_uaconfig/*配置信息*/;
    };
    typedef zce_smartptr<MSG_UACONFIG_ADMIN_REQ> MSG_UACONFIG_ADMIN_REQ_PTR;

    struct MSG_UACONFIG_ADMIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UACONFIG_ADMIN_RES;
        static const char* type_name() { return ("MSG_UACONFIG_ADMIN_RES");}
        IE_RESULT    ie_result/*<0:失败; =0:成功*/;
    };
    typedef zce_smartptr<MSG_UACONFIG_ADMIN_RES> MSG_UACONFIG_ADMIN_RES_PTR;

    struct MSG_CAPTURE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CAPTURE_REQ;
        static const char* type_name() { return ("MSG_CAPTURE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_CAPTURE    ie_capture/*用户指定的抓拍参数*/;
    };
    typedef zce_smartptr<MSG_CAPTURE_REQ> MSG_CAPTURE_REQ_PTR;

    struct MSG_CAPTURE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CAPTURE_RES;
        static const char* type_name() { return ("MSG_CAPTURE_RES");}
        IE_RESULT    ie_result/*<0:失败; =0:成功*/;
        std::vector<IE_CAPTURE> ie_capture/*设备端采用的抓拍参数*/;
        std::vector<IE_PICTURE> ie_picture/*图片内容*/;
        std::vector<IE_PICTURE_V2> ie_picture_v2/*图片内容*/;
    };
    typedef zce_smartptr<MSG_CAPTURE_RES> MSG_CAPTURE_RES_PTR;

    struct MSG_QUERY_MATRIX_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_MATRIX_REQ;
        static const char* type_name() { return ("MSG_QUERY_MATRIX_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_QUERY_MATRIX_REQ> MSG_QUERY_MATRIX_REQ_PTR;

    struct MSG_QUERY_MATRIX_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_MATRIX_RES;
        static const char* type_name() { return ("MSG_QUERY_MATRIX_RES");}
        IE_RESULT    ie_result/*操作结果 <0:失败，给出失败码; =0:成功*/;
        std::vector<IE_MATRIX> ie_matrix/*操作失败无此域，成功填写矩阵级联信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_MATRIX_RES> MSG_QUERY_MATRIX_RES_PTR;

    struct MSG_QUERY_MAPINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_MAPINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_MAPINFO_REQ");}
        std::vector<IE_MAPINFO> ie_mapinfo/*没有该IE，表示查询所有的电子地图；如果有多个，服务器只取第一个IE中的name、province和district用于指定查询条件，若某个条件不指定，则设置该字段为空。其余项无需填写。*/;
    };
    typedef zce_smartptr<MSG_QUERY_MAPINFO_REQ> MSG_QUERY_MAPINFO_REQ_PTR;

    struct MSG_QUERY_MAPINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_MAPINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_MAPINFO_RES");}
        IE_RESULT    ie_result/*<0:失败；＝0:成功*/;
        std::vector<IE_MAPINFO> ie_mapinfo/*符合查询条件的电子地图信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_MAPINFO_RES> MSG_QUERY_MAPINFO_RES_PTR;

    struct MSG_UNSUPPORTCMD_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UNSUPPORTCMD_NOTIFY;
        static const char* type_name() { return ("MSG_UNSUPPORTCMD_NOTIFY");}
        IE_UNSUPPORTCMD_NOTIFY    ie_notify;
    };
    typedef zce_smartptr<MSG_UNSUPPORTCMD_NOTIFY> MSG_UNSUPPORTCMD_NOTIFY_PTR;

    struct MSG_MODIFY_FDINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MODIFY_FDINFO_REQ;
        static const char* type_name() { return ("MSG_MODIFY_FDINFO_REQ");}
        IE_FD_INFO_V3    ie_fdinfo_v3;
        IE_ULONG    ie_key/*修改的信息项id，修改多项按位或*/;
    };
    typedef zce_smartptr<MSG_MODIFY_FDINFO_REQ> MSG_MODIFY_FDINFO_REQ_PTR;

    struct MSG_MODIFY_FDINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MODIFY_FDINFO_RES;
        static const char* type_name() { return ("MSG_MODIFY_FDINFO_RES");}
        IE_RESULT    ie_result/*<0:失败；＝0:成功*/;
    };
    typedef zce_smartptr<MSG_MODIFY_FDINFO_RES> MSG_MODIFY_FDINFO_RES_PTR;

    struct MSG_QUERY_MIXTUREVIDEOINCHANNEL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_MIXTUREVIDEOINCHANNEL_REQ;
        static const char* type_name() { return ("MSG_QUERY_MIXTUREVIDEOINCHANNEL_REQ");}
        std::vector<IE_CHANNEL_ID> ie_channel_id/*设备通道索引，IE为空表示查询所有通道*/;
    };
    typedef zce_smartptr<MSG_QUERY_MIXTUREVIDEOINCHANNEL_REQ> MSG_QUERY_MIXTUREVIDEOINCHANNEL_REQ_PTR;

    struct MSG_QUERY_MIXTUREVIDEOINCHANNEL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_MIXTUREVIDEOINCHANNEL_RES;
        static const char* type_name() { return ("MSG_QUERY_MIXTUREVIDEOINCHANNEL_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码，无后续内容=0：成功，必须填写后续内容*/;
        std::vector<IE_MIXTUREVIDEOIN_CHANNEL> ie_mixture/*0或多个该结构.视频输入合成通道信息列表*/;
    };
    typedef zce_smartptr<MSG_QUERY_MIXTUREVIDEOINCHANNEL_RES> MSG_QUERY_MIXTUREVIDEOINCHANNEL_RES_PTR;

    struct MSG_CONFIG_MIXTUREVIDEOINCHANNEL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_MIXTUREVIDEOINCHANNEL_REQ;
        static const char* type_name() { return ("MSG_CONFIG_MIXTUREVIDEOINCHANNEL_REQ");}
        IE_MIXTUREVIDEOIN_CHANNEL    ie_mixture/*视频输入合成通道信息*/;
    };
    typedef zce_smartptr<MSG_CONFIG_MIXTUREVIDEOINCHANNEL_REQ> MSG_CONFIG_MIXTUREVIDEOINCHANNEL_REQ_PTR;

    struct MSG_CONFIG_MIXTUREVIDEOINCHANNEL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_MIXTUREVIDEOINCHANNEL_RES;
        static const char* type_name() { return ("MSG_CONFIG_MIXTUREVIDEOINCHANNEL_RES");}
        IE_RESULT    ie_result/*操作结果: <0失败，给出失败码 =0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_MIXTUREVIDEOINCHANNEL_RES> MSG_CONFIG_MIXTUREVIDEOINCHANNEL_RES_PTR;

    struct MSG_QUERY_USERFDCHANNELRIGHT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_USERFDCHANNELRIGHT_REQ;
        static const char* type_name() { return ("MSG_QUERY_USERFDCHANNELRIGHT_REQ");}
        std::vector<IE_CHANNEL_ID> ie_channel_id/*设备通道索引，IE为空表示查询所有通道*/;
    };
    typedef zce_smartptr<MSG_QUERY_USERFDCHANNELRIGHT_REQ> MSG_QUERY_USERFDCHANNELRIGHT_REQ_PTR;

    struct MSG_QUERY_USERFDCHANNELRIGHT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_USERFDCHANNELRIGHT_RES;
        static const char* type_name() { return ("MSG_QUERY_USERFDCHANNELRIGHT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCHANNEL_RIGHT> ie_fdchannel_right/*设备通道权限*/;
    };
    typedef zce_smartptr<MSG_QUERY_USERFDCHANNELRIGHT_RES> MSG_QUERY_USERFDCHANNELRIGHT_RES_PTR;

    struct MSG_QUERY_LOCKINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_LOCKINFO_REQ;
        static const char* type_name() { return ("MSG_QUERY_LOCKINFO_REQ");}
        std::vector<IE_CHANNEL_ID> ie_channel_id/*设备通道索引，IE为空表示查询所有通道*/;
    };
    typedef zce_smartptr<MSG_QUERY_LOCKINFO_REQ> MSG_QUERY_LOCKINFO_REQ_PTR;

    struct MSG_QUERY_LOCKINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_LOCKINFO_RES;
        static const char* type_name() { return ("MSG_QUERY_LOCKINFO_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_PTZLOCK_INFO> ie_ptzlock_info/*设备锁定信息*/;
    };
    typedef zce_smartptr<MSG_QUERY_LOCKINFO_RES> MSG_QUERY_LOCKINFO_RES_PTR;

    struct MSG_QUERY_ALARMRULE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_ALARMRULE_REQ;
        static const char* type_name() { return ("MSG_QUERY_ALARMRULE_REQ");}
        IE_CHANNEL_ID    chan_id;
    };
    typedef zce_smartptr<MSG_QUERY_ALARMRULE_REQ> MSG_QUERY_ALARMRULE_REQ_PTR;

    struct MSG_QUERY_ALARMRULE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_ALARMRULE_RES;
        static const char* type_name() { return ("MSG_QUERY_ALARMRULE_RES");}
        IE_RESULT    ie_result/*查询结果*/;
        std::vector<IE_ALARM_RULE> ie_alarm_rule/*规则*/;
    };
    typedef zce_smartptr<MSG_QUERY_ALARMRULE_RES> MSG_QUERY_ALARMRULE_RES_PTR;

    struct MSG_CONFIG_ALARMRULE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_ALARMRULE_REQ;
        static const char* type_name() { return ("MSG_CONFIG_ALARMRULE_REQ");}
        IE_UCHAR    action/*'A' Add, 'M' Modify, 'D' Delete*/;
        IE_ALARM_RULE    ie_alarm_rule/*规则*/;
    };
    typedef zce_smartptr<MSG_CONFIG_ALARMRULE_REQ> MSG_CONFIG_ALARMRULE_REQ_PTR;

    struct MSG_CONFIG_ALARMRULE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_ALARMRULE_RES;
        static const char* type_name() { return ("MSG_CONFIG_ALARMRULE_RES");}
        IE_RESULT    ie_result/*配置结果*/;
    };
    typedef zce_smartptr<MSG_CONFIG_ALARMRULE_RES> MSG_CONFIG_ALARMRULE_RES_PTR;

    struct MSG_QUERY_GUARD_SET_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_GUARD_SET_REQ;
        static const char* type_name() { return ("MSG_QUERY_GUARD_SET_REQ");}
    };
    typedef zce_smartptr<MSG_QUERY_GUARD_SET_REQ> MSG_QUERY_GUARD_SET_REQ_PTR;

    struct MSG_QUERY_GUARD_SET_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_GUARD_SET_RES;
        static const char* type_name() { return ("MSG_QUERY_GUARD_SET_RES");}
        IE_RESULT    ie_result/*查询结果*/;
        std::vector<IE_GUARD_SET> ie_guard_set/*设备布撤防参数*/;
    };
    typedef zce_smartptr<MSG_QUERY_GUARD_SET_RES> MSG_QUERY_GUARD_SET_RES_PTR;

    struct MSG_CONFIG_GUARD_SET_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_GUARD_SET_REQ;
        static const char* type_name() { return ("MSG_CONFIG_GUARD_SET_REQ");}
        IE_GUARD_SET    ie_guard_set/*设备布撤防参数*/;
    };
    typedef zce_smartptr<MSG_CONFIG_GUARD_SET_REQ> MSG_CONFIG_GUARD_SET_REQ_PTR;

    struct MSG_CONFIG_GUARD_SET_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_GUARD_SET_RES;
        static const char* type_name() { return ("MSG_CONFIG_GUARD_SET_RES");}
        IE_RESULT    ie_result/*配置结果*/;
    };
    typedef zce_smartptr<MSG_CONFIG_GUARD_SET_RES> MSG_CONFIG_GUARD_SET_RES_PTR;

    struct MSG_QUERY_LAST_GUARD_STATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_LAST_GUARD_STATUS_REQ;
        static const char* type_name() { return ("MSG_QUERY_LAST_GUARD_STATUS_REQ");}
    };
    typedef zce_smartptr<MSG_QUERY_LAST_GUARD_STATUS_REQ> MSG_QUERY_LAST_GUARD_STATUS_REQ_PTR;

    struct MSG_QUERY_LAST_GUARD_STATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_LAST_GUARD_STATUS_RES;
        static const char* type_name() { return ("MSG_QUERY_LAST_GUARD_STATUS_RES");}
        IE_RESULT    ie_result/*查询结果*/;
        std::vector<IE_LAST_GUARD_STATUS> ie_last_guard_status/*最后布撤防指令*/;
    };
    typedef zce_smartptr<MSG_QUERY_LAST_GUARD_STATUS_RES> MSG_QUERY_LAST_GUARD_STATUS_RES_PTR;

    struct MSG_CONFIG_LAST_GUARD_STATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_LAST_GUARD_STATUS_REQ;
        static const char* type_name() { return ("MSG_CONFIG_LAST_GUARD_STATUS_REQ");}
        IE_LAST_GUARD_STATUS    ie_last_guard_status/*最后布撤防指令*/;
    };
    typedef zce_smartptr<MSG_CONFIG_LAST_GUARD_STATUS_REQ> MSG_CONFIG_LAST_GUARD_STATUS_REQ_PTR;

    struct MSG_CONFIG_LAST_GUARD_STATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_LAST_GUARD_STATUS_RES;
        static const char* type_name() { return ("MSG_CONFIG_LAST_GUARD_STATUS_RES");}
        IE_RESULT    ie_result/*设置结果*/;
    };
    typedef zce_smartptr<MSG_CONFIG_LAST_GUARD_STATUS_RES> MSG_CONFIG_LAST_GUARD_STATUS_RES_PTR;

    struct MSG_QUERY_CENTERALARMHANDLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_CENTERALARMHANDLE_REQ;
        static const char* type_name() { return ("MSG_QUERY_CENTERALARMHANDLE_REQ");}
        IE_FD_ID    fd_id;
        IE_CHANNEL_ID    chan_id;
    };
    typedef zce_smartptr<MSG_QUERY_CENTERALARMHANDLE_REQ> MSG_QUERY_CENTERALARMHANDLE_REQ_PTR;

    struct MSG_QUERY_CENTERALARMHANDLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_CENTERALARMHANDLE_RES;
        static const char* type_name() { return ("MSG_QUERY_CENTERALARMHANDLE_RES");}
        IE_RESULT    ie_result/*配置结果*/;
        std::vector<IE_CENTERALARM_HANDLE> ie_alarm_handle/*中心处警*/;
    };
    typedef zce_smartptr<MSG_QUERY_CENTERALARMHANDLE_RES> MSG_QUERY_CENTERALARMHANDLE_RES_PTR;

    struct MSG_CONFIG_CENTERALARMHANDLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_CENTERALARMHANDLE_REQ;
        static const char* type_name() { return ("MSG_CONFIG_CENTERALARMHANDLE_REQ");}
        IE_UCHAR    action/*'A' Add, 'M' Modify, 'D' Delete*/;
        IE_CENTERALARM_HANDLE    ie_alarm_handle/*中心处警*/;
    };
    typedef zce_smartptr<MSG_CONFIG_CENTERALARMHANDLE_REQ> MSG_CONFIG_CENTERALARMHANDLE_REQ_PTR;

    struct MSG_CONFIG_CENTERALARMHANDLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_CENTERALARMHANDLE_RES;
        static const char* type_name() { return ("MSG_CONFIG_CENTERALARMHANDLE_RES");}
        IE_RESULT    ie_result/*配置结果*/;
    };
    typedef zce_smartptr<MSG_CONFIG_CENTERALARMHANDLE_RES> MSG_CONFIG_CENTERALARMHANDLE_RES_PTR;

    struct MSG_CONFIG_FDALARMHANDLE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_FDALARMHANDLE_REQ;
        static const char* type_name() { return ("MSG_CONFIG_FDALARMHANDLE_REQ");}
        IE_UCHAR    action/*'A' Add, 'M' Modify, 'D' Delete*/;
        IE_FDALARM_HANDLE    ie_fdalarm_handle/*处警*/;
    };
    typedef zce_smartptr<MSG_CONFIG_FDALARMHANDLE_REQ> MSG_CONFIG_FDALARMHANDLE_REQ_PTR;

    struct MSG_CONFIG_FDALARMHANDLE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_FDALARMHANDLE_RES;
        static const char* type_name() { return ("MSG_CONFIG_FDALARMHANDLE_RES");}
        IE_RESULT    ie_result/*配置结果*/;
    };
    typedef zce_smartptr<MSG_CONFIG_FDALARMHANDLE_RES> MSG_CONFIG_FDALARMHANDLE_RES_PTR;

    struct MSG_SET_ALARMRULE_TIMESPAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_SET_ALARMRULE_TIMESPAN_REQ;
        static const char* type_name() { return ("MSG_SET_ALARMRULE_TIMESPAN_REQ");}
        IE_SET_ALARMRULE_TIMESPAN    ie_set;
    };
    typedef zce_smartptr<MSG_SET_ALARMRULE_TIMESPAN_REQ> MSG_SET_ALARMRULE_TIMESPAN_REQ_PTR;

    struct MSG_SET_ALARMRULE_TIMESPAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_SET_ALARMRULE_TIMESPAN_RES;
        static const char* type_name() { return ("MSG_SET_ALARMRULE_TIMESPAN_RES");}
        IE_RESULT    ie_result/*配置结果*/;
    };
    typedef zce_smartptr<MSG_SET_ALARMRULE_TIMESPAN_RES> MSG_SET_ALARMRULE_TIMESPAN_RES_PTR;

    struct MSG_MANUAL_ALARM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MANUAL_ALARM_REQ;
        static const char* type_name() { return ("MSG_MANUAL_ALARM_REQ");}
        IE_ALARM_EVENT    ie_alarm_event/*告警事件*/;
    };
    typedef zce_smartptr<MSG_MANUAL_ALARM_REQ> MSG_MANUAL_ALARM_REQ_PTR;

    struct MSG_MANUAL_ALARM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_MANUAL_ALARM_RES;
        static const char* type_name() { return ("MSG_MANUAL_ALARM_RES");}
        IE_RESULT    ie_result/*手动告警结果*/;
    };
    typedef zce_smartptr<MSG_MANUAL_ALARM_RES> MSG_MANUAL_ALARM_RES_PTR;

    struct MSG_DISABLE_ALARM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DISABLE_ALARM_REQ;
        static const char* type_name() { return ("MSG_DISABLE_ALARM_REQ");}
        std::vector<IE_UCHAR> ie_enable/*是否接收告警，1, 重新开始接受，0，取消，如果不填，理解为取消告警*/;
    };
    typedef zce_smartptr<MSG_DISABLE_ALARM_REQ> MSG_DISABLE_ALARM_REQ_PTR;

    struct MSG_DISABLE_ALARM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DISABLE_ALARM_RES;
        static const char* type_name() { return ("MSG_DISABLE_ALARM_RES");}
        IE_RESULT    ie_result/*设置结果*/;
    };
    typedef zce_smartptr<MSG_DISABLE_ALARM_RES> MSG_DISABLE_ALARM_RES_PTR;

    struct MSG_CANCEL_ALARM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CANCEL_ALARM_REQ;
        static const char* type_name() { return ("MSG_CANCEL_ALARM_REQ");}
        IE_ALARM_EVENT    ie_alarm_event/*告警事件*/;
    };
    typedef zce_smartptr<MSG_CANCEL_ALARM_REQ> MSG_CANCEL_ALARM_REQ_PTR;

    struct MSG_CANCEL_ALARM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CANCEL_ALARM_RES;
        static const char* type_name() { return ("MSG_CANCEL_ALARM_RES");}
        IE_RESULT    ie_result/*销警结果*/;
    };
    typedef zce_smartptr<MSG_CANCEL_ALARM_RES> MSG_CANCEL_ALARM_RES_PTR;

    struct MSG_ALARM_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ALARM_NOTIFY;
        static const char* type_name() { return ("MSG_ALARM_NOTIFY");}
        IE_ALARM_CONTENT_HEADER    alarm_content_header/*告警基本内容*/;
        std::vector<IE_ALARM_CONTENT_TEXT> alarm_content_text/*文本内容*/;
        std::vector<IE_ALARM_CONTENT_PICTURE> alarm_content_picture/*图片告警内容*/;
        std::vector<IE_ALARM_CONTENT_PICTURE_WITH_RECT_PARAMETER> alarm_content_picture_with_rect_parameter/*图片告警内容, 带有感兴趣区域车辆+车牌矩形*/;
        std::vector<IE_UA_ID> ie_ua_id/*指定接收设备告警的用户ID*/;
        std::vector<IE_TIME> ie_alarm_time/*告警时间*/;
    };
    typedef zce_smartptr<MSG_ALARM_NOTIFY> MSG_ALARM_NOTIFY_PTR;

    struct MSG_ALARM_NOTIFY_UA : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ALARM_NOTIFY_UA;
        static const char* type_name() { return ("MSG_ALARM_NOTIFY_UA");}
        IE_ALARM_CONTENT_HEADER    ie_alarm_content_header/*告警基本内容*/;
        IE_CHAR16    ie_alarm_guid/*告警GUID，UA通过此GUID向服务器查询具体告警信息*/;
        std::vector<IE_ALARM_CONTENT_TEXT_UA> ie_alarm_content_text/*告警相关文本信息*/;
        std::vector<IE_ULONG> ie_alarm_flag/*告警标志：1:存在告警图片*/;
        std::vector<IE_TIME> ie_alarm_time/*告警时间*/;
        std::vector<IE_astring> ie_storage_area_id/*告警图片存储的AreaId*/;
    };
    typedef zce_smartptr<MSG_ALARM_NOTIFY_UA> MSG_ALARM_NOTIFY_UA_PTR;

    struct MSG_ALARM_NOTIFY_FD : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ALARM_NOTIFY_FD;
        static const char* type_name() { return ("MSG_ALARM_NOTIFY_FD");}
        IE_ALARM_CONTENT_HEADER    ie_alarm_content_header/*告警基本内容*/;
        IE_CHAR16    ie_alarm_guid/*告警GUID，FD通过此GUID向服务器查询具体告警信息*/;
        std::vector<IE_ALARM_CONTENT_TEXT_FD> ie_alarm_content_text/*告警相关文本信息*/;
    };
    typedef zce_smartptr<MSG_ALARM_NOTIFY_FD> MSG_ALARM_NOTIFY_FD_PTR;

    struct MSG_ALARM_DEAL_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_ALARM_DEAL_NOTIFY;
        static const char* type_name() { return ("MSG_ALARM_DEAL_NOTIFY");}
        IE_DEAL_ALARM    ie_deal_alarm;
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_ALARM_DEAL_NOTIFY> MSG_ALARM_DEAL_NOTIFY_PTR;

    struct MSG_TRIG_SCHEME_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_TRIG_SCHEME_NOTIFY;
        static const char* type_name() { return ("MSG_TRIG_SCHEME_NOTIFY");}
        IE_astring    ie_trigger_describe;
        std::vector<IE_SCHEME> ie_schme;
    };
    typedef zce_smartptr<MSG_TRIG_SCHEME_NOTIFY> MSG_TRIG_SCHEME_NOTIFY_PTR;

    struct MSG_CMS_SET_PARAMETER_VALUES_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_SET_PARAMETER_VALUES_REQ;
        static const char* type_name() { return ("MSG_CMS_SET_PARAMETER_VALUES_REQ");}
        std::vector<IE_NAME_VALUE> ie_params/*可有多项*/;
        IE_astring254    ie_key/*唯一标识该此修改的值，可为空串*/;
    };
    typedef zce_smartptr<MSG_CMS_SET_PARAMETER_VALUES_REQ> MSG_CMS_SET_PARAMETER_VALUES_REQ_PTR;

    struct MSG_CMS_SET_PARAMETER_VALUES_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_SET_PARAMETER_VALUES_RES;
        static const char* type_name() { return ("MSG_CMS_SET_PARAMETER_VALUES_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_CMS_SET_PARAMETER_VALUES_RES> MSG_CMS_SET_PARAMETER_VALUES_RES_PTR;

    struct MSG_CMS_GET_PARAMETER_VALUES_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_GET_PARAMETER_VALUES_REQ;
        static const char* type_name() { return ("MSG_CMS_GET_PARAMETER_VALUES_REQ");}
        IE_astring254    ie_names/*节点名称，可为空串，空串返回所有节点*/;
    };
    typedef zce_smartptr<MSG_CMS_GET_PARAMETER_VALUES_REQ> MSG_CMS_GET_PARAMETER_VALUES_REQ_PTR;

    struct MSG_CMS_GET_PARAMETER_VALUES_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_GET_PARAMETER_VALUES_RES;
        static const char* type_name() { return ("MSG_CMS_GET_PARAMETER_VALUES_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_NAME_VALUE> ie_param_values/*可有多项，对应查询的节点名称、值对*/;
    };
    typedef zce_smartptr<MSG_CMS_GET_PARAMETER_VALUES_RES> MSG_CMS_GET_PARAMETER_VALUES_RES_PTR;

    struct MSG_CMS_GET_PARAMETER_INFOS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_GET_PARAMETER_INFOS_REQ;
        static const char* type_name() { return ("MSG_CMS_GET_PARAMETER_INFOS_REQ");}
        IE_astring254    ie_names/*节点名称，可为空串，空串返回所有节点*/;
        IE_UCHAR    ie_nextlevel/*是否展开子节点*/;
    };
    typedef zce_smartptr<MSG_CMS_GET_PARAMETER_INFOS_REQ> MSG_CMS_GET_PARAMETER_INFOS_REQ_PTR;

    struct MSG_CMS_GET_PARAMETER_INFOS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_GET_PARAMETER_INFOS_RES;
        static const char* type_name() { return ("MSG_CMS_GET_PARAMETER_INFOS_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_PARAMETER_INFO> ie_param_infos/*可有多项，对应查询的节点的信息*/;
    };
    typedef zce_smartptr<MSG_CMS_GET_PARAMETER_INFOS_RES> MSG_CMS_GET_PARAMETER_INFOS_RES_PTR;

    struct MSG_CMS_SET_PARAMETER_ATTRIBUTES_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_SET_PARAMETER_ATTRIBUTES_REQ;
        static const char* type_name() { return ("MSG_CMS_SET_PARAMETER_ATTRIBUTES_REQ");}
        std::vector<IE_FD_PARAMTER_ATTRIBUTE> ie_param_infos/*可有多项*/;
    };
    typedef zce_smartptr<MSG_CMS_SET_PARAMETER_ATTRIBUTES_REQ> MSG_CMS_SET_PARAMETER_ATTRIBUTES_REQ_PTR;

    struct MSG_CMS_SET_PARAMETER_ATTRIBUTES_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_SET_PARAMETER_ATTRIBUTES_RES;
        static const char* type_name() { return ("MSG_CMS_SET_PARAMETER_ATTRIBUTES_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_CMS_SET_PARAMETER_ATTRIBUTES_RES> MSG_CMS_SET_PARAMETER_ATTRIBUTES_RES_PTR;

    struct MSG_CMS_GET_PARAMETER_ATTRIBUTES_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_GET_PARAMETER_ATTRIBUTES_REQ;
        static const char* type_name() { return ("MSG_CMS_GET_PARAMETER_ATTRIBUTES_REQ");}
        IE_astring254    ie_names/*节点名称，可为空串，空串返回所有节点*/;
    };
    typedef zce_smartptr<MSG_CMS_GET_PARAMETER_ATTRIBUTES_REQ> MSG_CMS_GET_PARAMETER_ATTRIBUTES_REQ_PTR;

    struct MSG_CMS_GET_PARAMETER_ATTRIBUTES_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CMS_GET_PARAMETER_ATTRIBUTES_RES;
        static const char* type_name() { return ("MSG_CMS_GET_PARAMETER_ATTRIBUTES_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_PARAMTER_ATTRIBUTE> ie_param_infos;
    };
    typedef zce_smartptr<MSG_CMS_GET_PARAMETER_ATTRIBUTES_RES> MSG_CMS_GET_PARAMETER_ATTRIBUTES_RES_PTR;

    struct MSG_QUERY_FDLOG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_FDLOG_REQ;
        static const char* type_name() { return ("MSG_QUERY_FDLOG_REQ");}
        IE_TIME_SECTOR    ie_time_sector/*时间区间*/;
    };
    typedef zce_smartptr<MSG_QUERY_FDLOG_REQ> MSG_QUERY_FDLOG_REQ_PTR;

    struct MSG_QUERY_FDLOG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_FDLOG_RES;
        static const char* type_name() { return ("MSG_QUERY_FDLOG_RES");}
        IE_RESULT    ie_result;
        IE_UCHAR    ie_zip/*压缩方式，0:无压缩，1:bzip2压缩*/;
        std::vector<IE_FD_LOG> ie_log;
    };
    typedef zce_smartptr<MSG_QUERY_FDLOG_RES> MSG_QUERY_FDLOG_RES_PTR;

    struct MSG_QUERY_FDCONFIG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_FDCONFIG_REQ;
        static const char* type_name() { return ("MSG_QUERY_FDCONFIG_REQ");}
    };
    typedef zce_smartptr<MSG_QUERY_FDCONFIG_REQ> MSG_QUERY_FDCONFIG_REQ_PTR;

    struct MSG_QUERY_FDCONFIG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_FDCONFIG_RES;
        static const char* type_name() { return ("MSG_QUERY_FDCONFIG_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_CONFIG> ie_config;
    };
    typedef zce_smartptr<MSG_QUERY_FDCONFIG_RES> MSG_QUERY_FDCONFIG_RES_PTR;

    struct MSG_UPDATE_FDCONFIG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UPDATE_FDCONFIG_REQ;
        static const char* type_name() { return ("MSG_UPDATE_FDCONFIG_REQ");}
        IE_FD_CONFIG    ie_config;
    };
    typedef zce_smartptr<MSG_UPDATE_FDCONFIG_REQ> MSG_UPDATE_FDCONFIG_REQ_PTR;

    struct MSG_UPDATE_FDCONFIG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UPDATE_FDCONFIG_RES;
        static const char* type_name() { return ("MSG_UPDATE_FDCONFIG_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UPDATE_FDCONFIG_RES> MSG_UPDATE_FDCONFIG_RES_PTR;

    struct MSG_QUERY_RECORD_PLAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECORD_PLAN_REQ;
        static const char* type_name() { return ("MSG_QUERY_RECORD_PLAN_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
    };
    typedef zce_smartptr<MSG_QUERY_RECORD_PLAN_REQ> MSG_QUERY_RECORD_PLAN_REQ_PTR;

    struct MSG_QUERY_RECORD_PLAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_QUERY_RECORD_PLAN_RES;
        static const char* type_name() { return ("MSG_QUERY_RECORD_PLAN_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
        std::vector<IE_RECORD_PLAN> ie_record_plan/*录像计划时间表，可能有多个*/;
    };
    typedef zce_smartptr<MSG_QUERY_RECORD_PLAN_RES> MSG_QUERY_RECORD_PLAN_RES_PTR;

    struct MSG_CONFIG_RECORD_PLAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_RECORD_PLAN_REQ;
        static const char* type_name() { return ("MSG_CONFIG_RECORD_PLAN_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_UCHAR    ie_op_type/*操作类型：1：修改；2：添加；4：删除*/;
        std::vector<IE_RECORD_PLAN> ie_record_plan/*录像计划时间表，可能有多个*/;
    };
    typedef zce_smartptr<MSG_CONFIG_RECORD_PLAN_REQ> MSG_CONFIG_RECORD_PLAN_REQ_PTR;

    struct MSG_CONFIG_RECORD_PLAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONFIG_RECORD_PLAN_RES;
        static const char* type_name() { return ("MSG_CONFIG_RECORD_PLAN_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_CONFIG_RECORD_PLAN_RES> MSG_CONFIG_RECORD_PLAN_RES_PTR;

    struct MSG_RECORD_PLAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_PLAN_REQ;
        static const char* type_name() { return ("MSG_RECORD_PLAN_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_RECORD_PLAN> ie_record_plan/*录像计划时间表，可能有多个*/;
    };
    typedef zce_smartptr<MSG_RECORD_PLAN_REQ> MSG_RECORD_PLAN_REQ_PTR;

    struct MSG_RECORD_PLAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_RECORD_PLAN_RES;
        static const char* type_name() { return ("MSG_RECORD_PLAN_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_RECORD_PLAN_RES> MSG_RECORD_PLAN_RES_PTR;

    struct MSG_COMMON_DEVICE_OPERATE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_COMMON_DEVICE_OPERATE_REQ;
        static const char* type_name() { return ("MSG_COMMON_DEVICE_OPERATE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_COMMON_OPERATION    ie_op;
        std::vector<IE_COMMON_CONTENT> ie_content;
    };
    typedef zce_smartptr<MSG_COMMON_DEVICE_OPERATE_REQ> MSG_COMMON_DEVICE_OPERATE_REQ_PTR;

    struct MSG_COMMON_DEVICE_OPERATE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_COMMON_DEVICE_OPERATE_RES;
        static const char* type_name() { return ("MSG_COMMON_DEVICE_OPERATE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_COMMON_RESULT> ie_common_result;
    };
    typedef zce_smartptr<MSG_COMMON_DEVICE_OPERATE_RES> MSG_COMMON_DEVICE_OPERATE_RES_PTR;

    struct MSG_COMMON_REPORT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_COMMON_REPORT_REQ;
        static const char* type_name() { return ("MSG_COMMON_REPORT_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_COMMON_OPERATION    ie_op;
        std::vector<IE_COMMON_CONTENT> ie_content;
    };
    typedef zce_smartptr<MSG_COMMON_REPORT_REQ> MSG_COMMON_REPORT_REQ_PTR;

    struct MSG_COMMON_REPORT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_COMMON_REPORT_RES;
        static const char* type_name() { return ("MSG_COMMON_REPORT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_COMMON_RESULT> ie_common_result;
    };
    typedef zce_smartptr<MSG_COMMON_REPORT_RES> MSG_COMMON_REPORT_RES_PTR;

    struct MSG_COMMON_DBMS_OPERATE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_COMMON_DBMS_OPERATE_REQ;
        static const char* type_name() { return ("MSG_COMMON_DBMS_OPERATE_REQ");}
        IE_COMMON_OPERATION    ie_op;
        std::vector<IE_COMMON_CONTENT> ie_content;
    };
    typedef zce_smartptr<MSG_COMMON_DBMS_OPERATE_REQ> MSG_COMMON_DBMS_OPERATE_REQ_PTR;

    struct MSG_COMMON_DBMS_OPERATE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_COMMON_DBMS_OPERATE_RES;
        static const char* type_name() { return ("MSG_COMMON_DBMS_OPERATE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_COMMON_RESULT> ie_common_result;
    };
    typedef zce_smartptr<MSG_COMMON_DBMS_OPERATE_RES> MSG_COMMON_DBMS_OPERATE_RES_PTR;

    struct MSG_FD_SIMPLE_LIST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SIMPLE_LIST_REQ;
        static const char* type_name() { return ("MSG_FD_SIMPLE_LIST_REQ");}
        std::vector<IE_UCHAR> ie_getchannel/*要取的通道类型,不填的话默认返回视频输入通道, 若0返回所有通道, 1为视频输入通道...*/;
        std::vector<IE_UA_ID> ie_ua_id/*填了的话表明取其他帐号的设备列表，只有超级管理员可用,主要用于pda等应用*/;
        std::vector<IE_UCHAR> ie_version/*若2返回IE_FD_SIMPLE_V2列表；为空或者其他值返回IE_FD_SIMPLE列表*/;
    };
    typedef zce_smartptr<MSG_FD_SIMPLE_LIST_REQ> MSG_FD_SIMPLE_LIST_REQ_PTR;

    struct MSG_FD_SIMPLE_LIST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SIMPLE_LIST_RES;
        static const char* type_name() { return ("MSG_FD_SIMPLE_LIST_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_SIMPLE> ie_fd_simple/*0到多个设备*/;
        std::vector<IE_FD_SIMPLE_V2> ie_fd_simple_v2/*0到多个设备*/;
    };
    typedef zce_smartptr<MSG_FD_SIMPLE_LIST_RES> MSG_FD_SIMPLE_LIST_RES_PTR;

    struct MSG_UA_MEDIAAUTH_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MEDIAAUTH_REQ;
        static const char* type_name() { return ("MSG_UA_MEDIAAUTH_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_ULONG    ie_auth_type/*鉴权类型, 0x01读,0x02写,0x04控,0x08授权,0x10配,0x20fd登录,0x40设密码*/;
        std::vector<IE_UA_ID> ie_ua_id/*填了的话表明判断该ua_id的权限*/;
    };
    typedef zce_smartptr<MSG_UA_MEDIAAUTH_REQ> MSG_UA_MEDIAAUTH_REQ_PTR;

    struct MSG_UA_MEDIAAUTH_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_MEDIAAUTH_RES;
        static const char* type_name() { return ("MSG_UA_MEDIAAUTH_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_MEDIAAUTH_RES> MSG_UA_MEDIAAUTH_RES_PTR;

    struct MSG_CHECK_UPDATE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHECK_UPDATE_REQ;
        static const char* type_name() { return ("MSG_CHECK_UPDATE_REQ");}
        IE_SOFT_VERSION    ie_soft_version/*软件版本*/;
    };
    typedef zce_smartptr<MSG_CHECK_UPDATE_REQ> MSG_CHECK_UPDATE_REQ_PTR;

    struct MSG_CHECK_UPDATE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CHECK_UPDATE_RES;
        static const char* type_name() { return ("MSG_CHECK_UPDATE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_astring64> ie_url/*软件升级URL*/;
    };
    typedef zce_smartptr<MSG_CHECK_UPDATE_RES> MSG_CHECK_UPDATE_RES_PTR;

    struct MSG_UAS_PARALLEL_REGIST_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_REGIST_REQ;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_REGIST_REQ");}
        IE_UAS_INFO    ie_uas_info/*UAS 信息*/;
        IE_CHAR16    ie_guid/*16字节的GUID,UAS本次运行的GUID*/;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_REGIST_REQ> MSG_UAS_PARALLEL_REGIST_REQ_PTR;

    struct MSG_UAS_PARALLEL_REGIST_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_REGIST_RES;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_REGIST_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CHAR16> ie_guid/*16字节的GUID,UAS本次运行的GUID*/;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_REGIST_RES> MSG_UAS_PARALLEL_REGIST_RES_PTR;

    struct MSG_UAS_PARALLEL_LIST_CUSTOMER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_LIST_CUSTOMER_REQ;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_LIST_CUSTOMER_REQ");}
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_LIST_CUSTOMER_REQ> MSG_UAS_PARALLEL_LIST_CUSTOMER_REQ_PTR;

    struct MSG_UAS_PARALLEL_LIST_CUSTOMER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_LIST_CUSTOMER_RES;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_LIST_CUSTOMER_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CUSTOMER_INFO> ie_customer_info;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_LIST_CUSTOMER_RES> MSG_UAS_PARALLEL_LIST_CUSTOMER_RES_PTR;

    struct MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_REQ;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_REQ");}
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_REQ> MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_REQ_PTR;

    struct MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_RES;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_GRANTED_CUSTOMER_INFO> ie_granted_customer_info;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_RES> MSG_UAS_PARALLEL_LIST_GRANTED_CUSTOMER_RES_PTR;

    struct MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_REQ;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_REQ");}
        std::vector<IE_GRANTED_CUSTOMER_INFO> ie_granted_customer_info/*授权客户，如果为空表示查询设备通道信息*/;
        std::vector<IE_FD_ID> ie_fd_id/*设备ID，ie_granted_customer_info为空时必须填写*/;
        std::vector<IE_CHANNEL_ID> ie_channel_id/*通道ID*/;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_REQ> MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_REQ_PTR;

    struct MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_RES;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCHANNELPRIV_INFO> ie_fdchannel_priv_info;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_RES> MSG_UAS_PARALLEL_QUERY_CUSTOMER_FDCHANNELPRIV_RES_PTR;

    struct MSG_UAS_PARALLEL_CUSTOMER_FDCHANNELPRIV_CHANEGED_NOTIFY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_CUSTOMER_FDCHANNELPRIV_CHANEGED_NOTIFY;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_CUSTOMER_FDCHANNELPRIV_CHANEGED_NOTIFY");}
        IE_ULONG    ie_notify_type/*BYTE 0: 通知类型; BYTE 1: Action*/;
        std::vector<IE_GRANTED_CUSTOMER_INFO> ie_granted_customer_info/*授权被授权客户ID*/;
        std::vector<IE_FD_ID> ie_fd_id/*设备ID*/;
        std::vector<IE_CHANNEL_ID> ie_channel_id/*通道ID*/;
        std::vector<IE_ULONG> ie_privilege/*权限*/;
        std::vector<IE_astring254> ie_astring_ex/*预留扩展信息*/;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_CUSTOMER_FDCHANNELPRIV_CHANEGED_NOTIFY> MSG_UAS_PARALLEL_CUSTOMER_FDCHANNELPRIV_CHANEGED_NOTIFY_PTR;

    struct MSG_UA_CONTROL_RECORD_PLAYBACK_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_CONTROL_RECORD_PLAYBACK_REQ;
        static const char* type_name() { return ("MSG_UA_CONTROL_RECORD_PLAYBACK_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        IE_CTRL_CMD    ie_cmd/*回放控制命令*/;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该回放ID*/;
    };
    typedef zce_smartptr<MSG_UA_CONTROL_RECORD_PLAYBACK_REQ> MSG_UA_CONTROL_RECORD_PLAYBACK_REQ_PTR;

    struct MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_REQ;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_REQ");}
        std::vector<IE_GRANTED_CUSTOMER_INFO> ie_granted_customer_info/*授权客户，目前最多只支持一对*/;
        std::vector<IE_FDCHANNELPRIV_INFO> ie_fdchannel_priv_info/*授权设备信息*/;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_REQ> MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_REQ_PTR;

    struct MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_RES;
        static const char* type_name() { return ("MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_RES> MSG_UAS_PARALLEL_SET_CUSTOMER_FDCHANNELPRIV_RES_PTR;

    struct MSG_UA_CONTROL_RECORD_PLAYBACK_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_CONTROL_RECORD_PLAYBACK_RES;
        static const char* type_name() { return ("MSG_UA_CONTROL_RECORD_PLAYBACK_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
    };
    typedef zce_smartptr<MSG_UA_CONTROL_RECORD_PLAYBACK_RES> MSG_UA_CONTROL_RECORD_PLAYBACK_RES_PTR;

    struct MSG_UA_CONTROL_RECORD_DOWNLOAD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_CONTROL_RECORD_DOWNLOAD_REQ;
        static const char* type_name() { return ("MSG_UA_CONTROL_RECORD_DOWNLOAD_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        IE_CTRL_CMD    ie_cmd/*下载控制命令*/;
        std::vector<IE_CHAR16> ie_guid/*16字节的guid,标识该回放ID*/;
    };
    typedef zce_smartptr<MSG_UA_CONTROL_RECORD_DOWNLOAD_REQ> MSG_UA_CONTROL_RECORD_DOWNLOAD_REQ_PTR;

    struct MSG_UA_CONTROL_RECORD_DOWNLOAD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_CONTROL_RECORD_DOWNLOAD_RES;
        static const char* type_name() { return ("MSG_UA_CONTROL_RECORD_DOWNLOAD_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功，必须填后续字段*/;
    };
    typedef zce_smartptr<MSG_UA_CONTROL_RECORD_DOWNLOAD_RES> MSG_UA_CONTROL_RECORD_DOWNLOAD_RES_PTR;

    struct MSG_UA_LOCKRECORD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_LOCKRECORD_REQ;
        static const char* type_name() { return ("MSG_UA_LOCKRECORD_REQ");}
        IE_UCHAR    ie_type/*存储类型: 0前端; 1中心*/;
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_TIME_FILE_V2> ie_time_file_v2/*锁定参数V2版本*/;
    };
    typedef zce_smartptr<MSG_UA_LOCKRECORD_REQ> MSG_UA_LOCKRECORD_REQ_PTR;

    struct MSG_UA_LOCKRECORD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_LOCKRECORD_RES;
        static const char* type_name() { return ("MSG_UA_LOCKRECORD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_LOCKRECORD_RES> MSG_UA_LOCKRECORD_RES_PTR;

    struct MSG_UA_BATLOCKRECORD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_BATLOCKRECORD_REQ;
        static const char* type_name() { return ("MSG_UA_BATLOCKRECORD_REQ");}
        IE_TIME_SECTOR    ie_time_sector;
        IE_TIME    ie_time/*锁定时间*/;
        std::vector<IE_FD_CHANNEL_ID> ie_fd_channel_id;
    };
    typedef zce_smartptr<MSG_UA_BATLOCKRECORD_REQ> MSG_UA_BATLOCKRECORD_REQ_PTR;

    struct MSG_UA_BATLOCKRECORD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_BATLOCKRECORD_RES;
        static const char* type_name() { return ("MSG_UA_BATLOCKRECORD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_BATLOCKRECORD_RES> MSG_UA_BATLOCKRECORD_RES_PTR;

    struct MSG_SSU_STARTRECORD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_SSU_STARTRECORD_REQ;
        static const char* type_name() { return ("MSG_SSU_STARTRECORD_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_ULONG    ie_end_time;
        IE_NET_SCHEDULE_ADDRESS_IPV6    ie_schedule_addr_ipv6;
        IE_CHANNEL_INFO    ie_channel_info;
    };
    typedef zce_smartptr<MSG_SSU_STARTRECORD_REQ> MSG_SSU_STARTRECORD_REQ_PTR;

    struct MSG_SSU_STARTRECORD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_SSU_STARTRECORD_RES;
        static const char* type_name() { return ("MSG_SSU_STARTRECORD_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CHAR16> ie_guid;
        std::vector<IE_NETADDRESS_IPV6> ie_netaddr_ipv6;
    };
    typedef zce_smartptr<MSG_SSU_STARTRECORD_RES> MSG_SSU_STARTRECORD_RES_PTR;

    struct MSG_GPS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_GPS_REQ;
        static const char* type_name() { return ("MSG_GPS_REQ");}
        IE_ULONG    ie_enable/*0: 禁用; 1: 启用*/;
        IE_ULONG    ie_interval/*时间间隔，秒数*/;
    };
    typedef zce_smartptr<MSG_GPS_REQ> MSG_GPS_REQ_PTR;

    struct MSG_GPS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_GPS_RES;
        static const char* type_name() { return ("MSG_GPS_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_GPS_RES> MSG_GPS_RES_PTR;

    struct MSG_UA_QUERY_VIDEOIN_CAPACITY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERY_VIDEOIN_CAPACITY_REQ;
        static const char* type_name() { return ("MSG_UA_QUERY_VIDEOIN_CAPACITY_REQ");}
    };
    typedef zce_smartptr<MSG_UA_QUERY_VIDEOIN_CAPACITY_REQ> MSG_UA_QUERY_VIDEOIN_CAPACITY_REQ_PTR;

    struct MSG_UA_QUERY_VIDEOIN_CAPACITY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_QUERY_VIDEOIN_CAPACITY_RES;
        static const char* type_name() { return ("MSG_UA_QUERY_VIDEOIN_CAPACITY_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_VIDEOIN_CAPACITY> ie_videoin_capacity;
    };
    typedef zce_smartptr<MSG_UA_QUERY_VIDEOIN_CAPACITY_RES> MSG_UA_QUERY_VIDEOIN_CAPACITY_RES_PTR;

    struct MSG_UA_RADIUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_RADIUS_REQ;
        static const char* type_name() { return ("MSG_UA_RADIUS_REQ");}
        IE_ANY    ie_any;
    };
    typedef zce_smartptr<MSG_UA_RADIUS_REQ> MSG_UA_RADIUS_REQ_PTR;

    struct MSG_UA_RADIUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_RADIUS_RES;
        static const char* type_name() { return ("MSG_UA_RADIUS_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_RADIUS_RES> MSG_UA_RADIUS_RES_PTR;

    struct MSG_UA_TOUA_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_TOUA_REQ;
        static const char* type_name() { return ("MSG_UA_TOUA_REQ");}
        IE_ANY    ie_any;
    };
    typedef zce_smartptr<MSG_UA_TOUA_REQ> MSG_UA_TOUA_REQ_PTR;

    struct MSG_UA_TOUA_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_TOUA_RES;
        static const char* type_name() { return ("MSG_UA_TOUA_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_TOUA_RES> MSG_UA_TOUA_RES_PTR;

    struct MSG_REQUEST_URL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REQUEST_URL_REQ;
        static const char* type_name() { return ("MSG_REQUEST_URL_REQ");}
        IE_astring    ie_url/*url*/;
        IE_astring    ie_ip/*代理服务器ip*/;
        IE_USHORT    ie_port/*代理服务器端口*/;
    };
    typedef zce_smartptr<MSG_REQUEST_URL_REQ> MSG_REQUEST_URL_REQ_PTR;

    struct MSG_REQUEST_URL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_REQUEST_URL_RES;
        static const char* type_name() { return ("MSG_REQUEST_URL_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_REQUEST_URL_RES> MSG_REQUEST_URL_RES_PTR;

    struct MSG_INVITE_THIRD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_INVITE_THIRD_REQ;
        static const char* type_name() { return ("MSG_INVITE_THIRD_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_UCHAR    ie_uchar/*0=invite, 1=bye, 2=ack*/;
        std::vector<IE_astring> ie_astring/*至少3个astring, 分别是callid, subject, sdp*/;
    };
    typedef zce_smartptr<MSG_INVITE_THIRD_REQ> MSG_INVITE_THIRD_REQ_PTR;

    struct MSG_INVITE_THIRD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_INVITE_THIRD_RES;
        static const char* type_name() { return ("MSG_INVITE_THIRD_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_astring> ie_astring/*至少3个astring, 分别是应答回来的callid, to tag, sdp*/;
    };
    typedef zce_smartptr<MSG_INVITE_THIRD_RES> MSG_INVITE_THIRD_RES_PTR;

    struct MSG_GAB_CMD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_GAB_CMD_REQ;
        static const char* type_name() { return ("MSG_GAB_CMD_REQ");}
        std::vector<IE_astring> ie_astring/*2astring,分别是cmd, 通道id（如果有的话就填通道id,没有填空）*/;
    };
    typedef zce_smartptr<MSG_GAB_CMD_REQ> MSG_GAB_CMD_REQ_PTR;

    struct MSG_GAB_CMD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_GAB_CMD_RES;
        static const char* type_name() { return ("MSG_GAB_CMD_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_astring> ie_astring/*xml*/;
    };
    typedef zce_smartptr<MSG_GAB_CMD_RES> MSG_GAB_CMD_RES_PTR;

    struct FDSDK_VIDEO_IN_MAIN
    {

        FDSDK_VIDEO_IN_MAIN()
        :qos(0)
        ,payload(0)
        ,width(0)
        ,height(0)
        ,frame_interval(0)
        ,max_bitrate(0)
        ,frame_rate(0)
        ,bitrate_type(0)
        ,video_type(0)
        ,audio_bind(0)
        ,quality(0)
        {
        }

        zce_byte    qos;
        zce_byte    payload/*编码格式H.264/MPEG4/G.711/G.7231等*/;
        zce_uint16    width;
        zce_uint16    height;
        zce_uint16    frame_interval/*关键帧间隔*/;
        zce_uint32    max_bitrate/*编码比特率,单位kbps*/;
        zce_byte    frame_rate/*视频帧率1～25, 0x81表示全帧率,0x82表示1/2帧率,0x83表示1/3帧率等*/;
        zce_byte    bitrate_type;
        zce_byte    video_type;
        zce_byte    audio_bind;
        zce_byte    quality;
    };
    struct FDSDK_VIDEO_IN_SUB
    {

        FDSDK_VIDEO_IN_SUB()
        :qos(0)
        ,payload(0)
        ,width(0)
        ,height(0)
        ,frame_interval(0)
        ,max_bitrate(0)
        ,frame_rate(0)
        ,bitrate_type(0)
        ,video_type(0)
        ,audio_bind(0)
        ,quality(0)
        {
        }

        zce_astring id;
        zce_byte    qos;
        zce_byte    payload/*编码格式H.264/MPEG4/G.711/G.7231等*/;
        zce_uint16    width;
        zce_uint16    height;
        zce_uint16    frame_interval/*关键帧间隔*/;
        zce_uint32    max_bitrate/*编码比特率,单位kbps*/;
        zce_byte    frame_rate/*视频帧率1～25, 0x81表示全帧率,0x82表示1/2帧率,0x83表示1/3帧率等*/;
        zce_byte    bitrate_type;
        zce_byte    video_type;
        zce_byte    audio_bind;
        zce_byte    quality;
    };
    struct FDSDK_VIDEO_IN_PTZ
    {

        FDSDK_VIDEO_IN_PTZ()
        :enable(0)
        {
        }

        zce_byte    enable;
        zce_astring protocol;
        zce_astring serial_id;
    };
    struct FDSDK_VIDEO_IN_VIDEO_PARAM
    {

        FDSDK_VIDEO_IN_VIDEO_PARAM()
        :brightness(0)
        ,hue(0)
        ,saturation(0)
        ,contrast(0)
        {
        }

        zce_byte    brightness/*亮度*/;
        zce_byte    hue/*色度*/;
        zce_byte    saturation/*饱和度*/;
        zce_byte    contrast/*对比度*/;
    };
    struct FDSDK_VIDEO_IN_SUBTITLE
    {

        FDSDK_VIDEO_IN_SUBTITLE()
        :time_enable(0)
        ,time_style(0)
        ,time_x(0)
        ,time_y(0)
        ,text_enable(0)
        ,text_x(0)
        ,text_y(0)
        ,text_transparent(0)
        ,logo_enable(0)
        {
        }

        zce_byte    time_enable;
        zce_byte    time_style;
        zce_uint16    time_x;
        zce_uint16    time_y;
        zce_byte    text_enable;
        zce_uint16    text_x;
        zce_uint16    text_y;
        zce_astring text_content;
        zce_byte    text_transparent;
        zce_byte    logo_enable;
    };
    struct FDSDK_VIDEO_IN_LOST
    {

        FDSDK_VIDEO_IN_LOST()
        :enable(0)
        {
        }

        zce_byte    enable;
    };
    struct FDSDK_VIDEO_IN_CAMERA
    {

        FDSDK_VIDEO_IN_CAMERA()
        :horizontal_mirror(0)
        ,vertical_mirror(0)
        {
        }

        zce_byte    horizontal_mirror;
        zce_byte    vertical_mirror;
    };
    struct FDSDK_VIDEO_IN_ROW_BITMAP
    {

        FDSDK_VIDEO_IN_ROW_BITMAP()
        :bitmap(0)
        {
        }

        zce_astring id/*序号，从0开始*/;
        std::vector<zce_uint32> bitmap;
    };
    struct FDSDK_VIDEO_IN_MOTION_RECT
    {

        FDSDK_VIDEO_IN_MOTION_RECT()
        :x(0)
        ,y(0)
        ,width(0)
        ,height(0)
        {
        }

        zce_astring id;
        zce_uint16    x;
        zce_uint16    y;
        zce_uint16    width;
        zce_uint16    height;
    };
    struct FDSDK_VIDEO_IN_CAR_RECT
    {

        FDSDK_VIDEO_IN_CAR_RECT()
        :x(0)
        ,y(0)
        ,width(0)
        ,height(0)
        {
        }

        zce_astring id;
        zce_astring type;
        zce_uint16    x;
        zce_uint16    y;
        zce_uint16    width;
        zce_uint16    height;
    };
    struct FDSDK_VIDEO_IN_CAR_BITMAP
    {

        FDSDK_VIDEO_IN_CAR_BITMAP()
        :bitmap(0)
        {
        }

        zce_astring id;
        zce_astring type;
        std::vector<zce_uint16> bitmap;
    };
    struct FDSDK_VIDEO_IN_FACE_RECT
    {

        FDSDK_VIDEO_IN_FACE_RECT()
        :x(0)
        ,y(0)
        ,width(0)
        ,height(0)
        {
        }

        zce_astring id;
        zce_astring type;
        zce_uint16    x;
        zce_uint16    y;
        zce_uint16    width;
        zce_uint16    height;
    };
    struct FDSDK_VIDEO_IN_FACE_BITMAP
    {

        FDSDK_VIDEO_IN_FACE_BITMAP()
        :bitmap(0)
        {
        }

        zce_astring id;
        zce_astring type;
        std::vector<zce_uint16> bitmap;
    };
    struct FDSDK_VIDEO_IN_MIXTURE_CHANNEL
    {

        FDSDK_VIDEO_IN_MIXTURE_CHANNEL()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
    };
    struct FDSDK_VIDEO_OUT_MAIN
    {

        FDSDK_VIDEO_OUT_MAIN()
        :qos(0)
        ,payload(0)
        ,resolution(0)
        ,frame(0)
        ,frame_interval(0)
        ,quality(0)
        ,max_bitrate(0)
        ,bitrate_type(0)
        {
        }

        zce_byte    qos;
        zce_byte    payload;
        zce_byte    resolution;
        zce_byte    frame;
        zce_uint16    frame_interval;
        zce_byte    quality;
        zce_uint32    max_bitrate;
        zce_byte    bitrate_type;
    };
    struct FDSDK_ALARM_DEFENCE_RECORD
    {

        FDSDK_ALARM_DEFENCE_RECORD()
        :enable(0)
        ,pre_record_time(0)
        ,record_time_after_cancel_alarm(0)
        ,record_channel_id(0)
        {
        }

        zce_byte    enable;
        zce_uint16    pre_record_time;
        zce_uint32    record_time_after_cancel_alarm;
        zce_byte    record_channel_id;
    };
    struct FDSDK_ALARM_DEFENCE_PTZ_LINKAGE
    {

        FDSDK_ALARM_DEFENCE_PTZ_LINKAGE()
        :enable(0)
        ,channel_id(0)
        ,type(0)
        ,preset(0)
        ,cruise(0)
        {
        }

        zce_byte    enable;
        zce_byte    channel_id;
        zce_byte    type;
        zce_byte    preset;
        zce_byte    cruise;
    };
    struct FDSDK_ALARM_DEFENCE_CENTER
    {

        FDSDK_ALARM_DEFENCE_CENTER()
        :enable(0)
        ,port(0)
        {
        }

        zce_byte    enable;
        zce_astring ip;
        zce_uint16    port;
    };
    struct FDSDK_ALARM_DEFENCE_OUTPUT
    {

        FDSDK_ALARM_DEFENCE_OUTPUT()
        :enable(0)
        ,output_port(0)
        ,duration(0)
        {
        }

        zce_byte    enable;
        zce_byte    output_port;
        zce_uint32    duration;
    };
    struct FDSDK_ALARM_DEFENCE_AUDIO
    {

        FDSDK_ALARM_DEFENCE_AUDIO()
        :enable(0)
        ,channel_id(0)
        ,duration(0)
        {
        }

        zce_byte    enable;
        zce_byte    channel_id;
        zce_uint32    duration;
    };
    struct FDSDK_ALARM_DEFENCE_UPLOAD
    {

        FDSDK_ALARM_DEFENCE_UPLOAD()
        :enable(0)
        {
        }

        zce_byte    enable;
    };
    struct FDSDK_ALARM_DEFENCE_TIME
    {

        FDSDK_ALARM_DEFENCE_TIME()
        :week(0)
        ,begin_time(0)
        ,end_time(0)
        {
        }

        zce_astring id;
        zce_byte    week;
        zce_uint32    begin_time;
        zce_uint32    end_time;
    };
    struct IE_FDSDK_USER
    {
        const static unsigned short IE_TYPE = E_IE_FDSDK_USER;
        IE_FDSDK_USER() { };
        zce_astring name;
        zce_astring passwd;
    };
    struct IE_FDSDK_VIDEO_TRANSCEIVER_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FDSDK_VIDEO_TRANSCEIVER_INFO;

        IE_FDSDK_VIDEO_TRANSCEIVER_INFO()
        :guid(0)
        ,action(0)
        ,start_time(0)
        ,packet_num(0)
        {
        }

        CHANNEL_ID    channel_id;
        IP_ADDRESS    addr;
        std::vector<zce_byte> guid/*16字节的guid,激活ID*/;
        zce_byte    action/*标志: 0x00 监控; 0x01 录像; */;
        zce_uint32    start_time/*开始时间*/;
        zce_uint32    packet_num/*数据包数*/;
    };
    struct IE_FDSDK_NVIEW_LOGIN_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FDSDK_NVIEW_LOGIN_INFO;

        IE_FDSDK_NVIEW_LOGIN_INFO()
        :login(0)
        {
        }

        zce_byte    login/*是否登录平台：0:未登录；1:已登录*/;
        zce_astring addr/*平台地址*/;
    };
    struct IE_FDCFG_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_INFO;
        IE_FDCFG_INFO() { };
        zce_astring name;
        zce_astring type;
        zce_astring location;
        zce_astring description;
    };
    struct IE_FDCFG_INFO_PRODUCT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_INFO_PRODUCT;
        IE_FDCFG_INFO_PRODUCT() { };
        zce_astring model;
        zce_astring sn;
    };
    struct IE_FDCFG_INFO_VERSION
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_INFO_VERSION;
        IE_FDCFG_INFO_VERSION() { };
        zce_astring hardware;
        zce_astring software;
        zce_astring protocol;
    };
    struct IE_FDCFG_INFO_GPS
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_INFO_GPS;
        IE_FDCFG_INFO_GPS() { };
        zce_astring longitude;
        zce_astring latitude;
    };
    struct IE_FDCFG_NETWORK_STATIC
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NETWORK_STATIC;
        IE_FDCFG_NETWORK_STATIC() { };
        zce_astring id;
        zce_astring ip;
        zce_astring mac;
        zce_astring netmask;
        zce_astring gateway;
        zce_astring dns;
    };
    struct IE_FDCFG_NETWORK_DHCP
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NETWORK_DHCP;

        IE_FDCFG_NETWORK_DHCP()
        :enable(0)
        {
        }

        zce_byte    enable;
        zce_astring ip;
        zce_astring netmask;
        zce_astring gateway;
    };
    struct IE_FDCFG_NETWORK_PPPOE
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NETWORK_PPPOE;

        IE_FDCFG_NETWORK_PPPOE()
        :enable(0)
        {
        }

        zce_byte    enable;
        zce_astring username;
        zce_astring password;
    };
    struct IE_FDCFG_NETWORK_WIFI
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NETWORK_WIFI;

        IE_FDCFG_NETWORK_WIFI()
        :enable(0)
        ,authen_mode(0)
        {
        }

        zce_byte    enable;
        zce_astring ssid;
        zce_uint16    authen_mode/*加密类型，EWifiAuthenType*/;
        zce_astring password;
    };
    struct IE_FDCFG_NETWORK_3G
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NETWORK_3G;

        IE_FDCFG_NETWORK_3G()
        :enable(0)
        ,hold_time(0)
        ,reserve(0)
        {
        }

        zce_byte    enable;
        std::vector<SELECT_ITEM> active_mode/*激活类型*/;
        zce_uint16    hold_time;
        zce_astring tele_number;
        zce_uint16    reserve;
    };
    struct IE_FDCFG_NVIEW_SERVER
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NVIEW_SERVER;

        IE_FDCFG_NVIEW_SERVER()
        :enable(0)
        ,port(0)
        ,time_sync(0)
        ,net_ptl(0)
        ,media_ptl(0)
        ,flag1(0)
        ,flag2(0)
        {
        }

        zce_astring id;
        zce_byte    enable;
        zce_astring ip;
        zce_uint16    port;
        zce_astring fd_id;
        zce_astring fd_pwd;
        zce_byte    time_sync;
        zce_byte    net_ptl;
        zce_byte    media_ptl;
        zce_byte    flag1/*bit0: 0非平滑发包, 1平滑发包*/;
        zce_byte    flag2/*bit0: 保留，永远设为1; bit[2~4]:平台协议类型0：gep, 1:gab;*/;
    };
    struct IE_FDCFG_NVIEW_MANAGER
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NVIEW_MANAGER;

        IE_FDCFG_NVIEW_MANAGER()
        :enable(0)
        {
        }

        zce_astring id;
        zce_byte    enable;
        zce_astring url;
        zce_astring username;
        zce_astring password;
    };
    struct IE_FDCFG_NVIEW_ADDRESS
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NVIEW_ADDRESS;

        IE_FDCFG_NVIEW_ADDRESS()
        :port(0)
        ,net_ptl(0)
        ,prefer(0)
        {
        }

        zce_astring ip;
        zce_uint16    port;
        zce_byte    net_ptl;
        zce_byte    prefer;
    };
    struct IE_FDCFG_SDK_USER
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_SDK_USER;

        IE_FDCFG_SDK_USER()
        :privilege(0)
        {
        }

        zce_astring username;
        zce_astring password;
        zce_uint32    privilege;
        zce_astring description;
    };
    struct IE_FDCFG_NTP
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_NTP;

        IE_FDCFG_NTP()
        :enable(0)
        ,interval(0)
        ,time_difference(0)
        {
        }

        zce_byte    enable;
        zce_astring ip;
        zce_uint32    interval;
        zce_int32    time_difference;
    };
    struct IE_FDCFG_AUDIO_IN
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_AUDIO_IN;

        IE_FDCFG_AUDIO_IN()
        :id(0)
        ,qos(0)
        ,payload(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    qos;
        zce_byte    payload;
    };
    struct IE_FDCFG_AUDIO_OUT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_AUDIO_OUT;

        IE_FDCFG_AUDIO_OUT()
        :id(0)
        ,qos(0)
        ,payload(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    qos;
        zce_byte    payload;
    };
    struct IE_FDCFG_VIDEO_IN
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN;

        IE_FDCFG_VIDEO_IN()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        std::vector<FDSDK_VIDEO_IN_MAIN> inmain;
        std::vector<FDSDK_VIDEO_IN_SUB> sub;
        std::vector<FDSDK_VIDEO_IN_PTZ> ptz;
        std::vector<FDSDK_VIDEO_IN_VIDEO_PARAM> video_param;
        std::vector<FDSDK_VIDEO_IN_SUBTITLE> subtitle;
        std::vector<FDSDK_VIDEO_IN_LOST> lost;
        std::vector<FDSDK_VIDEO_IN_CAMERA> camera;
    };
    struct IE_FDCFG_VIDEO_IN_MOSAIC
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_MOSAIC;

        IE_FDCFG_VIDEO_IN_MOSAIC()
        :id(0)
        ,enable(0)
        ,row_num(0)
        ,col_num(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    enable;
        zce_uint16    row_num;
        zce_uint16    col_num;
        std::vector<FDSDK_VIDEO_IN_ROW_BITMAP> row;
    };
    struct IE_FDCFG_VIDEO_IN_MOTION
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_MOTION;

        IE_FDCFG_VIDEO_IN_MOTION()
        :id(0)
        ,enable(0)
        ,sensitivity(0)
        ,row_num(0)
        ,col_num(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    enable;
        zce_uint16    sensitivity;
        zce_uint16    row_num;
        zce_uint16    col_num;
        std::vector<FDSDK_VIDEO_IN_MOTION_RECT> rect;
        std::vector<FDSDK_VIDEO_IN_ROW_BITMAP> row;
    };
    struct IE_FDCFG_VIDEO_IN_PRIVATE_COVER
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_PRIVATE_COVER;

        IE_FDCFG_VIDEO_IN_PRIVATE_COVER()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        std::vector<FDSDK_VIDEO_IN_MOTION_RECT> rect;
    };
    struct IE_FDCFG_VIDEO_IN_CAR
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAR;

        IE_FDCFG_VIDEO_IN_CAR()
        :id(0)
        ,enable(0)
        ,show_coil(0)
        ,top(0)
        ,bottom(0)
        ,left(0)
        ,right(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    enable;
        zce_byte    show_coil;
        zce_uint16    top;
        zce_uint16    bottom;
        zce_uint16    left;
        zce_uint16    right;
        std::vector<FDSDK_VIDEO_IN_CAR_RECT> rect;
        std::vector<FDSDK_VIDEO_IN_CAR_BITMAP> bitmap;
    };
    struct IE_FDCFG_VIDEO_IN_FACE
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_FACE;

        IE_FDCFG_VIDEO_IN_FACE()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        FDSDK_FACE_DETECT    face;
    };
    struct IE_FDCFG_VIDEO_IN_CUSTOM_SCAN
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CUSTOM_SCAN;

        IE_FDCFG_VIDEO_IN_CUSTOM_SCAN()
        :id(0)
        ,cmd(0)
        ,scan_id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_uint16    cmd/*0：停止录制，1：开始录制， 2：调用扫描*/;
        std::vector<zce_uint16> scan_id;
    };
    struct IE_FDCFG_VIDEO_IN_MIXTURE
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_MIXTURE;

        IE_FDCFG_VIDEO_IN_MIXTURE()
        :id(0)
        ,enable(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    enable;
        std::vector<FDSDK_VIDEO_IN_MIXTURE_CHANNEL> channel;
    };
    struct IE_FDCFG_VIDEO_OUT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_OUT;

        IE_FDCFG_VIDEO_OUT()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        FDSDK_VIDEO_OUT_MAIN    outmain;
    };
    struct IE_FDCFG_ALARM_IN
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_ALARM_IN;

        IE_FDCFG_ALARM_IN()
        :id(0)
        ,cancel_mode(0)
        ,always_open(0)
        ,anti_shake_time(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_astring type;
        zce_astring address;
        zce_byte    cancel_mode;
        zce_byte    always_open;
        zce_uint32    anti_shake_time;
        zce_astring description;
    };
    struct IE_FDCFG_ALARM_OUT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_ALARM_OUT;

        IE_FDCFG_ALARM_OUT()
        :id(0)
        ,cancel_mode(0)
        ,always_open(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_astring type;
        zce_byte    cancel_mode;
        zce_byte    always_open;
        zce_astring description;
    };
    struct IE_FDCFG_ALARM_DEFENCE
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_ALARM_DEFENCE;

        IE_FDCFG_ALARM_DEFENCE()
        :alarmtype(0)
        {
        }

        zce_astring id;
        zce_uint16    alarmtype;
        CHANNEL_ID    channel_id;
        std::vector<FDSDK_ALARM_DEFENCE_RECORD> record;
        std::vector<FDSDK_ALARM_DEFENCE_CENTER> center;
        std::vector<FDSDK_ALARM_DEFENCE_OUTPUT> output;
        std::vector<FDSDK_ALARM_DEFENCE_AUDIO> audio;
        std::vector<FDSDK_ALARM_DEFENCE_UPLOAD> upload;
        std::vector<FDSDK_ALARM_DEFENCE_PTZ_LINKAGE> ptz_linkage;
        std::vector<FDSDK_ALARM_DEFENCE_TIME> time;
    };
    struct IE_FDCFG_SERIAL
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_SERIAL;

        IE_FDCFG_SERIAL()
        :mode(0)
        ,hardwareid(0)
        ,port(0)
        ,baud_rate(0)
        ,data_bit(0)
        ,stop_bit(0)
        ,parity(0)
        ,flow_ctrl(0)
        ,timeout(0)
        {
        }

        zce_astring id;
        zce_byte    mode;
        zce_byte    hardwareid;
        zce_byte    port;
        zce_byte    baud_rate;
        zce_byte    data_bit;
        zce_byte    stop_bit;
        zce_byte    parity;
        zce_byte    flow_ctrl;
        zce_uint32    timeout;
    };
    struct IE_FDCFG_DISK
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_DISK;

        IE_FDCFG_DISK()
        :type(0)
        ,total_size(0)
        ,free_size(0)
        ,usage(0)
        {
        }

        zce_astring id;
        zce_byte    type;
        zce_uint32    total_size;
        zce_uint32    free_size;
        zce_uint32    usage;
        zce_astring path;
        zce_astring username;
        zce_astring password;
    };
    struct IE_FDCFG_RECORD_PLAN
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_RECORD_PLAN;

        IE_FDCFG_RECORD_PLAN()
        :enable(0)
        ,channel_id(0)
        ,type(0)
        ,policy(0)
        ,begin_time(0)
        ,end_time(0)
        ,work_month(0)
        ,work_week(0)
        ,work_day(0)
        ,begin_hour(0)
        ,begin_minute(0)
        ,end_hour(0)
        ,end_minute(0)
        {
        }

        zce_astring id;
        zce_byte    enable;
        zce_byte    channel_id;
        zce_byte    type;
        zce_byte    policy;
        zce_uint32    begin_time;
        zce_uint32    end_time;
        zce_uint32    work_month;
        zce_uint32    work_week;
        zce_uint32    work_day;
        zce_byte    begin_hour;
        zce_byte    begin_minute;
        zce_byte    end_hour;
        zce_byte    end_minute;
    };
    struct IE_FDCFG_RECORD_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_RECORD_CHANNEL;

        IE_FDCFG_RECORD_CHANNEL()
        :channel_id(0)
        ,policy(0)
        ,save_time(0)
        ,pre_record(0)
        {
        }

        zce_astring id;
        zce_byte    channel_id;
        zce_byte    policy;
        zce_uint32    save_time;
        zce_uint32    pre_record;
        zce_astring store_disk;
    };
    struct IE_FDCFG_VIDEO_IN_CAPTURE
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAPTURE;

        IE_FDCFG_VIDEO_IN_CAPTURE()
        :id(0)
        ,flight_ctrl(0)
        ,capture_mod(0)
        ,reserved(0)
        ,osd_type(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    flight_ctrl/*闪光模式， 0：自动；1：强制闪光；2：不闪光；0xff：不支持闪光灯*/;
        zce_byte    capture_mod/*抓拍模式：仅电子警察有效*/;
        std::vector<zce_byte> reserved/*	[1][0]:红灯相位（值范围：0~359），最高位: 0：无效，1：有效
        [3][2]:频闪灯脉冲宽度，最高位: 0：无效，1：有效
        [5][4]:闪光灯的脉冲宽度，最高位: 0：无效，1：有效
        [6]：倍频系数，最高位: 0：无效，1：有效
        */;
        zce_byte    osd_type/* 暂时不用，保留*/;
        zce_astring osd_text;
        std::vector<FDSDK_CAPTURE_VEHICLE> vehicle/*车道信息*/;
    };
    struct IE_FDCFG_VIDEO_IN_CAPTURE_V2
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAPTURE_V2;

        IE_FDCFG_VIDEO_IN_CAPTURE_V2()
        :id(0)
        ,encode_video(0)
        ,detect_type(0)
        ,fill_light_ctrl(0)
        ,flashlight_ctrl(0)
        ,pic_count(0)
        ,lane_count(0)
        ,firstlane_no(0)
        ,laneno_dir(0)
        ,change_to_video_detect(0)
        ,reserved2(0)
        {
        }

        zce_byte    id/*通道号，从1开始*/;
        zce_byte    encode_video/*抓拍帧是否编码到视频码流中*/;
        zce_uint16    detect_type/*检测类型 1:视频检测；2:485口车检器; 4：IO口车检器; 8：雷达检测*/;
        zce_byte    fill_light_ctrl/*补光模式， 0：自动；1：强制闪光；2：不闪光；0xff：不支持补光灯*/;
        zce_byte    flashlight_ctrl/*闪光模式， 0：自动；1：强制闪光；2：不闪光；0xff：不支持闪光灯*/;
        zce_byte    pic_count/*违章抓拍图片数*/;
        zce_byte    lane_count/*总车道数*/;
        zce_byte    firstlane_no/*起始车道号*/;
        zce_byte    laneno_dir/*车道编号方向，0：从左至右,1：从右至左*/;
        zce_byte    change_to_video_detect/*异常时自动切换至视频检测模式，0：不切换,1：切换*/;
        std::vector<zce_byte> reserved2;
        std::vector<FDSDK_CAPTURE_LANES_INFO> lanes_video/*车道信息:视频检测*/;
        std::vector<FDSDK_PHYSICAL_COIL_V2> lanes_physical/*车道信息:地感线圈*/;
        std::vector<FDSDK_CAPTURE_LANES_RADAR> lanes_radar/*车道信息:雷达触发*/;
    };
    struct IE_FDCFG_IO_LIGHT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_IO_LIGHT;

        IE_FDCFG_IO_LIGHT()
        :id(0)
        ,enable(0)
        ,level(0)
        ,reserved1(0)
        ,output_time_filllight(0)
        ,output_time_flashlight(0)
        ,output_inadvance_time(0)
        ,frequencymult(0)
        ,reserved2(0)
        {
        }

        zce_byte    id/*io口号, 从1开始*/;
        zce_byte    enable/*0:无效，1:有效*/;
        zce_byte    level/*0:低电平触发 1:高电平触发*/;
        std::vector<zce_byte> reserved1;
        zce_uint16    output_time_filllight/*补光灯输出时间，单位：微秒，最高位: 0:不启用，1:启用*/;
        zce_uint16    output_time_flashlight/*闪光灯输出时间，单位：微秒,最高位: 0:不启用，1:启用*/;
        zce_int16    output_inadvance_time/*输出提前时间*/;
        zce_byte    frequencymult/*倍频系数*/;
        std::vector<zce_byte> reserved2;
    };
    struct IE_FDCFG_VIDEO_IN_PERIMETER_DETECT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_PERIMETER_DETECT;

        IE_FDCFG_VIDEO_IN_PERIMETER_DETECT()
        :id(0)
        ,enable(0)
        ,dect_dir(0)
        ,jump_rate(0)
        ,line_show(0)
        ,move_show(0)
        ,reserverd1(0)
        ,min_blob(0)
        ,reserverd2(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        zce_byte    enable/*周界检测使能*/;
        zce_byte    dect_dir/*检测方向：1：正行，2：逆行，3：双向; */;
        zce_byte    jump_rate/*视频图像的间隔帧数*/;
        zce_byte    line_show/*在视频上显示线圈*/;
        zce_byte    move_show/*在视频上显示移动框*/;
        zce_byte    reserverd1/* bit0:在视频上显示测试窗口 1：显示,0：不显示；
        bit1:夜晚模式 1:开启; 0:不开启 */;
        zce_uint16    min_blob/*检测物体的最小像素*/;
        std::vector<zce_uint16> reserverd2;
        std::vector<GENERAL_RECT> detect_rect/*检测区域*/;
        std::vector<GENERAL_LINE> line;
        std::vector<GENERAL_RECT> rect/*矩形*/;
        std::vector<GENERAL_POINT> point/*组成多边形的点阵*/;
    };
    struct IE_FDCFG_OSD_FORMAT
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_OSD_FORMAT;

        IE_FDCFG_OSD_FORMAT()
        :color(0)
        ,bg_color(0)
        ,osd_fill_type(0)
        ,osd_size(0)
        ,osd_type(0)
        ,osd_linespace(0)
        ,type(0)
        ,reserved(0)
        ,osd_x(0)
        ,osd_y(0)
        {
        }

        zce_uint32    color/*字体颜色 yuv*/;
        zce_uint32    bg_color/*背景色yuv*/;
        zce_byte    osd_fill_type/*0表示 数字用0补齐.1表示用空格补齐*/;
        zce_byte    osd_size/*字体大小.24 32 48 64*/;
        zce_byte    osd_type/*0表示叠加在图片内.1表示附加在上方 2表示附加在下方..其他待定*/;
        zce_byte    osd_linespace/*行间距 默认0 //先不显示在界面上*/;
        zce_byte    type/*osd类型 0:抓拍帧OSD，1：合成图OSD*/;
        std::vector<zce_byte> reserved;
        zce_uint16    osd_x/*起始x 偶对齐 32*/;
        zce_uint16    osd_y/*起始Y 偶对齐 32*/;
        std::vector<OSDSUB_TYPE> osd_sub;
    };
    struct IE_FDCFG_VIDEO_IN_CAMERA_CONTROL
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAMERA_CONTROL;

        IE_FDCFG_VIDEO_IN_CAMERA_CONTROL()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        std::vector<FDSDK_CAMERA_CONTROL_ITEM> camera_ctrl_item;
    };
    struct IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2;

        IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        std::vector<SELECT_ITEM> camera_ctrl_item2;
        std::vector<FDSDK_CAMERA_CONTROL_ITEM3> camera_ctrl_item3;
    };
    struct IE_FDCFG_VIDEO_IN_CAMERA_MAP
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAMERA_MAP;

        IE_FDCFG_VIDEO_IN_CAMERA_MAP()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        std::vector<astring254_WRAPPER> text;
        std::vector<VALUE_LIST> value_list;
    };
    struct IE_FDCFG_VIDEO_IN_CAMERA_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_CAMERA_INFO;

        IE_FDCFG_VIDEO_IN_CAMERA_INFO()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        std::vector<GENERAL_INFO> camera_ctrl_info;
    };
    struct IE_FDCFG_VIDEO_IN_COLOR_CALCULATE
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_VIDEO_IN_COLOR_CALCULATE;

        IE_FDCFG_VIDEO_IN_COLOR_CALCULATE()
        :id(0)
        ,enable(0)
        ,reserve(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        GENERAL_RECT    rect;
        zce_byte    enable;
        std::vector<zce_byte> reserve;
    };
    struct MSG_FDSDK_LOGIN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_LOGIN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_LOGIN_REQ");}
        IE_FDSDK_USER    ie_login_req;
    };
    typedef zce_smartptr<MSG_FDSDK_LOGIN_REQ> MSG_FDSDK_LOGIN_REQ_PTR;

    struct MSG_FDSDK_LOGIN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_LOGIN_RES;
        static const char* type_name() { return ("MSG_FDSDK_LOGIN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_ULONG> ie_privilege/*权限*/;
        std::vector<IE_TIME> ie_heart_interval/*心跳间隔时间*/;
    };
    typedef zce_smartptr<MSG_FDSDK_LOGIN_RES> MSG_FDSDK_LOGIN_RES_PTR;

    struct MSG_FDSDK_LOGOUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_LOGOUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_LOGOUT_REQ");}
        IE_FDSDK_USER    ie_logout_req;
    };
    typedef zce_smartptr<MSG_FDSDK_LOGOUT_REQ> MSG_FDSDK_LOGOUT_REQ_PTR;

    struct MSG_FDSDK_LOGOUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_LOGOUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_LOGOUT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_LOGOUT_RES> MSG_FDSDK_LOGOUT_RES_PTR;

    struct MSG_FDSDK_NAME_VALUES_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_NAME_VALUES_REQ;
        static const char* type_name() { return ("MSG_FDSDK_NAME_VALUES_REQ");}
        std::vector<IE_NAME_VALUE> ie_params;
    };
    typedef zce_smartptr<MSG_FDSDK_NAME_VALUES_REQ> MSG_FDSDK_NAME_VALUES_REQ_PTR;

    struct MSG_FDSDK_NAME_VALUES_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_NAME_VALUES_RES;
        static const char* type_name() { return ("MSG_FDSDK_NAME_VALUES_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_NAME_VALUE> ie_params_value;
    };
    typedef zce_smartptr<MSG_FDSDK_NAME_VALUES_RES> MSG_FDSDK_NAME_VALUES_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_REQ> MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDSDK_VIDEO_TRANSCEIVER_INFO> ie_video_info;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_RES> MSG_FDSDK_GET_VIDEO_TRANSCEIVER_INFO_RES_PTR;

    struct MSG_FDSDK_GET_NVIEW_LOGIN_INFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_NVIEW_LOGIN_INFO_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_NVIEW_LOGIN_INFO_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_NVIEW_LOGIN_INFO_REQ> MSG_FDSDK_GET_NVIEW_LOGIN_INFO_REQ_PTR;

    struct MSG_FDSDK_GET_NVIEW_LOGIN_INFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_NVIEW_LOGIN_INFO_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_NVIEW_LOGIN_INFO_RES");}
        IE_RESULT    ie_result;
        IE_FDSDK_NVIEW_LOGIN_INFO    ie_nview_login;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_NVIEW_LOGIN_INFO_RES> MSG_FDSDK_GET_NVIEW_LOGIN_INFO_RES_PTR;

    struct MSG_FDSDK_GET_GLOBAL_INFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_INFO_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_INFO_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_INFO_REQ> MSG_FDSDK_GET_GLOBAL_INFO_REQ_PTR;

    struct MSG_FDSDK_GET_GLOBAL_INFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_INFO_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_INFO_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_INFO> ie_info;
        std::vector<IE_FDCFG_INFO_PRODUCT> ie_product;
        std::vector<IE_FDCFG_INFO_VERSION> ie_version;
        std::vector<IE_FDCFG_INFO_GPS> ie_gps;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_INFO_RES> MSG_FDSDK_GET_GLOBAL_INFO_RES_PTR;

    struct MSG_FDSDK_GET_GLOBAL_NETWORK_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_NETWORK_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_NETWORK_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_NETWORK_REQ> MSG_FDSDK_GET_GLOBAL_NETWORK_REQ_PTR;

    struct MSG_FDSDK_GET_GLOBAL_NETWORK_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_NETWORK_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_NETWORK_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_NETWORK_STATIC> ie_static;
        std::vector<IE_FDCFG_NETWORK_DHCP> ie_dhcp;
        std::vector<IE_FDCFG_NETWORK_PPPOE> ie_pppoe;
        std::vector<IE_FDCFG_NETWORK_WIFI> ie_wifi;
        std::vector<IE_FDCFG_NETWORK_3G> ie_3g;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_NETWORK_RES> MSG_FDSDK_GET_GLOBAL_NETWORK_RES_PTR;

    struct MSG_FDSDK_GET_GLOBAL_NVIEW_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_NVIEW_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_NVIEW_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_NVIEW_REQ> MSG_FDSDK_GET_GLOBAL_NVIEW_REQ_PTR;

    struct MSG_FDSDK_GET_GLOBAL_NVIEW_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_NVIEW_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_NVIEW_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_NVIEW_SERVER> ie_server;
        std::vector<IE_FDCFG_NVIEW_MANAGER> ie_manager;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_NVIEW_RES> MSG_FDSDK_GET_GLOBAL_NVIEW_RES_PTR;

    struct MSG_FDSDK_GET_GLOBAL_SDK_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_SDK_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_SDK_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_SDK_REQ> MSG_FDSDK_GET_GLOBAL_SDK_REQ_PTR;

    struct MSG_FDSDK_GET_GLOBAL_SDK_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_SDK_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_SDK_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_SDK_USER> ie_user;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_SDK_RES> MSG_FDSDK_GET_GLOBAL_SDK_RES_PTR;

    struct MSG_FDSDK_GET_GLOBAL_NTP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_NTP_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_NTP_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_NTP_REQ> MSG_FDSDK_GET_GLOBAL_NTP_REQ_PTR;

    struct MSG_FDSDK_GET_GLOBAL_NTP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_GLOBAL_NTP_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_GLOBAL_NTP_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_NTP> ie_ntp;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_GLOBAL_NTP_RES> MSG_FDSDK_GET_GLOBAL_NTP_RES_PTR;

    struct MSG_FDSDK_GET_AUDIO_IN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_AUDIO_IN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_AUDIO_IN_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_AUDIO_IN_REQ> MSG_FDSDK_GET_AUDIO_IN_REQ_PTR;

    struct MSG_FDSDK_GET_AUDIO_IN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_AUDIO_IN_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_AUDIO_IN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_AUDIO_IN> ie_audio_in;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_AUDIO_IN_RES> MSG_FDSDK_GET_AUDIO_IN_RES_PTR;

    struct MSG_FDSDK_GET_AUDIO_OUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_AUDIO_OUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_AUDIO_OUT_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_AUDIO_OUT_REQ> MSG_FDSDK_GET_AUDIO_OUT_REQ_PTR;

    struct MSG_FDSDK_GET_AUDIO_OUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_AUDIO_OUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_AUDIO_OUT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_AUDIO_OUT> ie_audio_out;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_AUDIO_OUT_RES> MSG_FDSDK_GET_AUDIO_OUT_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_REQ> MSG_FDSDK_GET_VIDEO_IN_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN> ie_video_in;
        std::vector<IE_VIDEOIN_CHANNEL> ie_videoin_channel;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_RES> MSG_FDSDK_GET_VIDEO_IN_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_MOSAIC_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_MOSAIC_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_MOSAIC_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_MOSAIC_REQ> MSG_FDSDK_GET_VIDEO_IN_MOSAIC_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_MOSAIC_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_MOSAIC_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_MOSAIC_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_MOSAIC> ie_mosaic;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_MOSAIC_RES> MSG_FDSDK_GET_VIDEO_IN_MOSAIC_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_MOTION_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_MOTION_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_MOTION_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_MOTION_REQ> MSG_FDSDK_GET_VIDEO_IN_MOTION_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_MOTION_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_MOTION_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_MOTION_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_MOTION> ie_motion;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_MOTION_RES> MSG_FDSDK_GET_VIDEO_IN_MOTION_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_REQ> MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_CONTROL> ie_camera_control;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_RES> MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_REQ> MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2> ie_camera_ctrl2;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_RES> MSG_FDSDK_GET_VIDEO_IN_CAMERA_CONTROL2_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_REQ> MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_MAP> ie_camera_gain_map;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_RES> MSG_FDSDK_GET_VIDEO_IN_CAMERA_GAIN_MAP_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_REQ> MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_INFO> ie_camera_info;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_RES> MSG_FDSDK_GET_VIDEO_IN_CAMERA_INFO_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAPTURE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAPTURE_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAPTURE_REQ> MSG_FDSDK_GET_VIDEO_IN_CAPTURE_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAPTURE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAPTURE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_CAPTURE> ie_capture/*支持地感线圈、雷达、虚拟线圈（只支持GT2013），*/;
        std::vector<IE_FDCFG_VIDEO_IN_CAPTURE_V2> ie_capture_v2/*支持新版虚拟线圈*/;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAPTURE_RES> MSG_FDSDK_GET_VIDEO_IN_CAPTURE_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_REQ> MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_OSD_FORMAT> ie_osd_format;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_RES> MSG_FDSDK_GET_VIDEO_IN_CAPTURE_OSD_RES_PTR;

    struct MSG_FDSDK_SET_IO_LIGHT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_IO_LIGHT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_IO_LIGHT_REQ");}
        std::vector<IE_FDCFG_IO_LIGHT> ie_io_light;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_IO_LIGHT_REQ> MSG_FDSDK_SET_IO_LIGHT_REQ_PTR;

    struct MSG_FDSDK_SET_IO_LIGHT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_IO_LIGHT_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_IO_LIGHT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_IO_LIGHT_RES> MSG_FDSDK_SET_IO_LIGHT_RES_PTR;

    struct MSG_FDSDK_GET_IO_LIGHT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_IO_LIGHT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_IO_LIGHT_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_IO_LIGHT_REQ> MSG_FDSDK_GET_IO_LIGHT_REQ_PTR;

    struct MSG_FDSDK_GET_IO_LIGHT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_IO_LIGHT_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_IO_LIGHT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_IO_LIGHT> ie_io_light;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_IO_LIGHT_RES> MSG_FDSDK_GET_IO_LIGHT_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_REQ> MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_PERIMETER_DETECT> ie_perimeter;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_RES> MSG_FDSDK_GET_VIDEO_IN_PERIMETER_DETECT_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_FACE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_FACE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_FACE_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_FACE_REQ> MSG_FDSDK_GET_VIDEO_IN_FACE_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_FACE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_FACE_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_FACE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_FACE> ie_face;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_FACE_RES> MSG_FDSDK_GET_VIDEO_IN_FACE_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_REQ> MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_IN_CUSTOM_SCAN> ie_custom_scan;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_RES> MSG_FDSDK_GET_VIDEO_IN_CUSTOM_SCAN_RES_PTR;

    struct MSG_FDSDK_GET_VIDEO_OUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_OUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_OUT_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_OUT_REQ> MSG_FDSDK_GET_VIDEO_OUT_REQ_PTR;

    struct MSG_FDSDK_GET_VIDEO_OUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_VIDEO_OUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_VIDEO_OUT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_VIDEO_OUT> ie_video_out;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_VIDEO_OUT_RES> MSG_FDSDK_GET_VIDEO_OUT_RES_PTR;

    struct MSG_FDSDK_GET_ALARM_IN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_ALARM_IN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_ALARM_IN_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_ALARM_IN_REQ> MSG_FDSDK_GET_ALARM_IN_REQ_PTR;

    struct MSG_FDSDK_GET_ALARM_IN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_ALARM_IN_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_ALARM_IN_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_ALARM_IN> ie_alarm_in;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_ALARM_IN_RES> MSG_FDSDK_GET_ALARM_IN_RES_PTR;

    struct MSG_FDSDK_GET_ALARM_OUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_ALARM_OUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_ALARM_OUT_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_ALARM_OUT_REQ> MSG_FDSDK_GET_ALARM_OUT_REQ_PTR;

    struct MSG_FDSDK_GET_ALARM_OUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_ALARM_OUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_ALARM_OUT_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_ALARM_OUT> ie_alarm_out;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_ALARM_OUT_RES> MSG_FDSDK_GET_ALARM_OUT_RES_PTR;

    struct MSG_FDSDK_GET_ALARM_DEFENCE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_ALARM_DEFENCE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_ALARM_DEFENCE_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_ALARM_DEFENCE_REQ> MSG_FDSDK_GET_ALARM_DEFENCE_REQ_PTR;

    struct MSG_FDSDK_GET_ALARM_DEFENCE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_ALARM_DEFENCE_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_ALARM_DEFENCE_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_ALARM_DEFENCE> ie_defence;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_ALARM_DEFENCE_RES> MSG_FDSDK_GET_ALARM_DEFENCE_RES_PTR;

    struct MSG_FDSDK_GET_SERIAL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_SERIAL_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_SERIAL_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_SERIAL_REQ> MSG_FDSDK_GET_SERIAL_REQ_PTR;

    struct MSG_FDSDK_GET_SERIAL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_SERIAL_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_SERIAL_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_SERIAL> ie_serial;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_SERIAL_RES> MSG_FDSDK_GET_SERIAL_RES_PTR;

    struct MSG_FDSDK_GET_RECORD_CHANNEL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_CHANNEL_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_CHANNEL_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_CHANNEL_REQ> MSG_FDSDK_GET_RECORD_CHANNEL_REQ_PTR;

    struct MSG_FDSDK_GET_RECORD_CHANNEL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_CHANNEL_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_CHANNEL_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FDCFG_RECORD_CHANNEL> ie_channel;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_CHANNEL_RES> MSG_FDSDK_GET_RECORD_CHANNEL_RES_PTR;

    struct MSG_FDSDK_GET_RECORD_NAS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_NAS_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_NAS_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_NAS_REQ> MSG_FDSDK_GET_RECORD_NAS_REQ_PTR;

    struct MSG_FDSDK_GET_RECORD_NAS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_NAS_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_NAS_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_astring64> ie_url/*nas URL*/;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_NAS_RES> MSG_FDSDK_GET_RECORD_NAS_RES_PTR;

    struct MSG_FDSDK_GET_RECORD_REPLAY_SERVER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_REPLAY_SERVER_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_REPLAY_SERVER_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_REPLAY_SERVER_REQ> MSG_FDSDK_GET_RECORD_REPLAY_SERVER_REQ_PTR;

    struct MSG_FDSDK_GET_RECORD_REPLAY_SERVER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_REPLAY_SERVER_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_REPLAY_SERVER_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_astring64> rtsp_url/*rtsp URL*/;
        std::vector<IE_astring254> http_url/*http URL*/;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_REPLAY_SERVER_RES> MSG_FDSDK_GET_RECORD_REPLAY_SERVER_RES_PTR;

    struct MSG_FDSDK_GET_RECORD_PLAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_PLAN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_PLAN_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_PLAN_REQ> MSG_FDSDK_GET_RECORD_PLAN_REQ_PTR;

    struct MSG_FDSDK_GET_RECORD_PLAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_RECORD_PLAN_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_RECORD_PLAN_RES");}
        IE_RESULT    ie_result/*操作结果<0，失败，给出失败码>=0：表示总个数*/;
        std::vector<IE_USHORT> ie_store_mode/*录像策略：0xfffa:满就删；0xfffb:满停; 其他：保存天数*/;
        std::vector<IE_TIME_DETAIL_LIST> ie_list/*操作失败无此域，成功填写录像时间表，可能有多个，视具体情况*/;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_RECORD_PLAN_RES> MSG_FDSDK_GET_RECORD_PLAN_RES_PTR;

    struct MSG_FDSDK_SET_GLOBAL_INFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_INFO_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_INFO_REQ");}
        std::vector<IE_FDCFG_INFO> ie_info;
        std::vector<IE_FDCFG_INFO_PRODUCT> ie_product;
        std::vector<IE_FDCFG_INFO_VERSION> ie_version;
        std::vector<IE_FDCFG_INFO_GPS> ie_gps;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_INFO_REQ> MSG_FDSDK_SET_GLOBAL_INFO_REQ_PTR;

    struct MSG_FDSDK_SET_GLOBAL_INFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_INFO_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_INFO_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_INFO_RES> MSG_FDSDK_SET_GLOBAL_INFO_RES_PTR;

    struct MSG_FDSDK_SET_GLOBAL_NETWORK_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_NETWORK_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_NETWORK_REQ");}
        std::vector<IE_FDCFG_NETWORK_STATIC> ie_static;
        std::vector<IE_FDCFG_NETWORK_DHCP> ie_dhcp;
        std::vector<IE_FDCFG_NETWORK_PPPOE> ie_pppoe;
        std::vector<IE_FDCFG_NETWORK_WIFI> ie_wifi;
        std::vector<IE_FDCFG_NETWORK_3G> ie_3g;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_NETWORK_REQ> MSG_FDSDK_SET_GLOBAL_NETWORK_REQ_PTR;

    struct MSG_FDSDK_SET_GLOBAL_NETWORK_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_NETWORK_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_NETWORK_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_NETWORK_RES> MSG_FDSDK_SET_GLOBAL_NETWORK_RES_PTR;

    struct MSG_FDSDK_SET_GLOBAL_NVIEW_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_NVIEW_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_NVIEW_REQ");}
        std::vector<IE_FDCFG_NVIEW_SERVER> ie_server;
        std::vector<IE_FDCFG_NVIEW_MANAGER> ie_manager;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_NVIEW_REQ> MSG_FDSDK_SET_GLOBAL_NVIEW_REQ_PTR;

    struct MSG_FDSDK_SET_GLOBAL_NVIEW_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_NVIEW_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_NVIEW_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_NVIEW_RES> MSG_FDSDK_SET_GLOBAL_NVIEW_RES_PTR;

    struct MSG_FDSDK_SET_GLOBAL_SDK_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_SDK_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_SDK_REQ");}
        std::vector<IE_FDCFG_SDK_USER> ie_user;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_SDK_REQ> MSG_FDSDK_SET_GLOBAL_SDK_REQ_PTR;

    struct MSG_FDSDK_SET_GLOBAL_SDK_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_SDK_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_SDK_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_SDK_RES> MSG_FDSDK_SET_GLOBAL_SDK_RES_PTR;

    struct MSG_FDSDK_SET_GLOBAL_NTP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_NTP_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_NTP_REQ");}
        std::vector<IE_FDCFG_NTP> ie_ntp;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_NTP_REQ> MSG_FDSDK_SET_GLOBAL_NTP_REQ_PTR;

    struct MSG_FDSDK_SET_GLOBAL_NTP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_GLOBAL_NTP_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_GLOBAL_NTP_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_GLOBAL_NTP_RES> MSG_FDSDK_SET_GLOBAL_NTP_RES_PTR;

    struct MSG_FDSDK_SET_AUDIO_IN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_AUDIO_IN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_AUDIO_IN_REQ");}
        std::vector<IE_FDCFG_AUDIO_IN> ie_audio_in;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_AUDIO_IN_REQ> MSG_FDSDK_SET_AUDIO_IN_REQ_PTR;

    struct MSG_FDSDK_SET_AUDIO_IN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_AUDIO_IN_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_AUDIO_IN_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_AUDIO_IN_RES> MSG_FDSDK_SET_AUDIO_IN_RES_PTR;

    struct MSG_FDSDK_SET_AUDIO_OUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_AUDIO_OUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_AUDIO_OUT_REQ");}
        std::vector<IE_FDCFG_AUDIO_OUT> ie_audio_out;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_AUDIO_OUT_REQ> MSG_FDSDK_SET_AUDIO_OUT_REQ_PTR;

    struct MSG_FDSDK_SET_AUDIO_OUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_AUDIO_OUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_AUDIO_OUT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_AUDIO_OUT_RES> MSG_FDSDK_SET_AUDIO_OUT_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN> ie_video_in;
        std::vector<IE_VIDEOIN_CHANNEL> ie_videoin_channel;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_REQ> MSG_FDSDK_SET_VIDEO_IN_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_RES> MSG_FDSDK_SET_VIDEO_IN_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_MOSAIC_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_MOSAIC_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_MOSAIC_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_MOSAIC> ie_mosaic;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_MOSAIC_REQ> MSG_FDSDK_SET_VIDEO_IN_MOSAIC_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_MOSAIC_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_MOSAIC_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_MOSAIC_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_MOSAIC_RES> MSG_FDSDK_SET_VIDEO_IN_MOSAIC_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_MOTION_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_MOTION_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_MOTION_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_MOTION> ie_motion;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_MOTION_REQ> MSG_FDSDK_SET_VIDEO_IN_MOTION_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_MOTION_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_MOTION_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_MOTION_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_MOTION_RES> MSG_FDSDK_SET_VIDEO_IN_MOTION_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_OUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_OUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_OUT_REQ");}
        std::vector<IE_FDCFG_VIDEO_OUT> ie_video_out;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_OUT_REQ> MSG_FDSDK_SET_VIDEO_OUT_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_OUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_OUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_OUT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_OUT_RES> MSG_FDSDK_SET_VIDEO_OUT_RES_PTR;

    struct MSG_FDSDK_SET_ALARM_IN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_ALARM_IN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_ALARM_IN_REQ");}
        std::vector<IE_FDCFG_ALARM_IN> ie_alarm_in;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_ALARM_IN_REQ> MSG_FDSDK_SET_ALARM_IN_REQ_PTR;

    struct MSG_FDSDK_SET_ALARM_IN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_ALARM_IN_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_ALARM_IN_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_ALARM_IN_RES> MSG_FDSDK_SET_ALARM_IN_RES_PTR;

    struct MSG_FDSDK_SET_ALARM_OUT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_ALARM_OUT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_ALARM_OUT_REQ");}
        std::vector<IE_FDCFG_ALARM_OUT> ie_alarm_out;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_ALARM_OUT_REQ> MSG_FDSDK_SET_ALARM_OUT_REQ_PTR;

    struct MSG_FDSDK_SET_ALARM_OUT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_ALARM_OUT_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_ALARM_OUT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_ALARM_OUT_RES> MSG_FDSDK_SET_ALARM_OUT_RES_PTR;

    struct MSG_FDSDK_SET_ALARM_DEFENCE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_ALARM_DEFENCE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_ALARM_DEFENCE_REQ");}
        std::vector<IE_FDCFG_ALARM_DEFENCE> ie_defence;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_ALARM_DEFENCE_REQ> MSG_FDSDK_SET_ALARM_DEFENCE_REQ_PTR;

    struct MSG_FDSDK_SET_ALARM_DEFENCE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_ALARM_DEFENCE_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_ALARM_DEFENCE_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_ALARM_DEFENCE_RES> MSG_FDSDK_SET_ALARM_DEFENCE_RES_PTR;

    struct MSG_FDSDK_SET_SERIAL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_SERIAL_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_SERIAL_REQ");}
        std::vector<IE_FDCFG_SERIAL> ie_serial;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_SERIAL_REQ> MSG_FDSDK_SET_SERIAL_REQ_PTR;

    struct MSG_FDSDK_SET_SERIAL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_SERIAL_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_SERIAL_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_SERIAL_RES> MSG_FDSDK_SET_SERIAL_RES_PTR;

    struct MSG_FDSDK_SET_RECORD_NAS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_RECORD_NAS_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_RECORD_NAS_REQ");}
        std::vector<IE_astring64> ie_url/*nas URL*/;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_RECORD_NAS_REQ> MSG_FDSDK_SET_RECORD_NAS_REQ_PTR;

    struct MSG_FDSDK_SET_RECORD_NAS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_RECORD_NAS_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_RECORD_NAS_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_RECORD_NAS_RES> MSG_FDSDK_SET_RECORD_NAS_RES_PTR;

    struct MSG_FDSDK_SET_RECORD_REPLAY_SERVER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_RECORD_REPLAY_SERVER_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_RECORD_REPLAY_SERVER_REQ");}
        std::vector<IE_astring64> rtsp_url/*rtsp URL*/;
        std::vector<IE_astring254> http_url/*http URL*/;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_RECORD_REPLAY_SERVER_REQ> MSG_FDSDK_SET_RECORD_REPLAY_SERVER_REQ_PTR;

    struct MSG_FDSDK_SET_RECORD_REPLAY_SERVER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_RECORD_REPLAY_SERVER_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_RECORD_REPLAY_SERVER_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_RECORD_REPLAY_SERVER_RES> MSG_FDSDK_SET_RECORD_REPLAY_SERVER_RES_PTR;

    struct MSG_FDSDK_RESTORE_CONFIG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_RESTORE_CONFIG_REQ;
        static const char* type_name() { return ("MSG_FDSDK_RESTORE_CONFIG_REQ");}
        IE_ULONG    ie_which/*0: 出厂配置; 1: 优化配置*/;
    };
    typedef zce_smartptr<MSG_FDSDK_RESTORE_CONFIG_REQ> MSG_FDSDK_RESTORE_CONFIG_REQ_PTR;

    struct MSG_FDSDK_RESTORE_CONFIG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_RESTORE_CONFIG_RES;
        static const char* type_name() { return ("MSG_FDSDK_RESTORE_CONFIG_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_RESTORE_CONFIG_RES> MSG_FDSDK_RESTORE_CONFIG_RES_PTR;

    struct MSG_FDSDK_CAPTURE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_CAPTURE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_CAPTURE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_USHORT    ie_nRoadId/*车道号, 0开始*/;
    };
    typedef zce_smartptr<MSG_FDSDK_CAPTURE_REQ> MSG_FDSDK_CAPTURE_REQ_PTR;

    struct MSG_FDSDK_CAPTURE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_CAPTURE_RES;
        static const char* type_name() { return ("MSG_FDSDK_CAPTURE_RES");}
        IE_RESULT    ie_result;
        IE_ALARM_CONTENT_HEADER    alarm_content_header/*告警基本内容*/;
        std::vector<IE_ALARM_CONTENT_TEXT> alarm_content_text/*文本内容*/;
        std::vector<IE_ALARM_CONTENT_PICTURE> alarm_content_picture/*图片告警内容*/;
        std::vector<IE_ALARM_CONTENT_PICTURE_WITH_RECT_PARAMETER> alarm_content_picture_with_rect_parameter/*图片告警内容, 带有感兴趣区域车辆+车牌矩形*/;
    };
    typedef zce_smartptr<MSG_FDSDK_CAPTURE_RES> MSG_FDSDK_CAPTURE_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_CONTROL> ie_camera_ctrl;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_REQ> MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_RES> MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2> ie_camera_ctrl2;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_REQ> MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_RES> MSG_FDSDK_SET_VIDEO_IN_CAMERA_CONTROL2_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_MAP> ie_camera_gain_map;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_REQ> MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_RES> MSG_FDSDK_SET_VIDEO_IN_CAMERA_GAIN_MAP_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAPTURE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAPTURE_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_CAPTURE> ie_capture;
        std::vector<IE_FDCFG_VIDEO_IN_CAPTURE_V2> ie_capture_v2;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAPTURE_REQ> MSG_FDSDK_SET_VIDEO_IN_CAPTURE_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAPTURE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAPTURE_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAPTURE_RES> MSG_FDSDK_SET_VIDEO_IN_CAPTURE_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_REQ");}
        std::vector<IE_FDCFG_OSD_FORMAT> ie_osd_format;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_REQ> MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_RES> MSG_FDSDK_SET_VIDEO_IN_CAPTURE_OSD_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_PERIMETER_DETECT> ie_perimeter;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_REQ> MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_RES> MSG_FDSDK_SET_VIDEO_IN_PERIMETER_DETECT_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_FACE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_FACE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_FACE_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_FACE> ie_face;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_FACE_REQ> MSG_FDSDK_SET_VIDEO_IN_FACE_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_FACE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_FACE_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_FACE_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_FACE_RES> MSG_FDSDK_SET_VIDEO_IN_FACE_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_CUSTOM_SCAN> ie_custom_scan;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_REQ> MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_RES> MSG_FDSDK_SET_VIDEO_IN_CUSTOM_SCAN_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_PRIVATE_COVER> ie_private_cover;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_REQ> MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_RES> MSG_FDSDK_SET_VIDEO_IN_PRIVATE_COVER_RES_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_REQ");}
        std::vector<IE_FDCFG_VIDEO_IN_COLOR_CALCULATE> ie_color_calculate;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_REQ> MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_REQ_PTR;

    struct MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_RES> MSG_FDSDK_SET_VIDEO_IN_COLOR_CALCULATE_RES_PTR;

    struct MSG_FDSDK_SET_RECORD_PLAN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_RECORD_PLAN_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_RECORD_PLAN_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_USHORT> ie_store_mode/*录像策略：0xfffa:满就删；0xfffb:满停; 其他：保存天数*/;
        std::vector<IE_TIME_DETAIL_LIST> ie_list/*录像时间表，可能有多个，视具体情况*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_RECORD_PLAN_REQ> MSG_FDSDK_SET_RECORD_PLAN_REQ_PTR;

    struct MSG_FDSDK_SET_RECORD_PLAN_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_RECORD_PLAN_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_RECORD_PLAN_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_RECORD_PLAN_RES> MSG_FDSDK_SET_RECORD_PLAN_RES_PTR;

    struct MSG_FDSDK_QUERY_CRUISE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_QUERY_CRUISE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_QUERY_CRUISE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_FDSDK_QUERY_CRUISE_REQ> MSG_FDSDK_QUERY_CRUISE_REQ_PTR;

    struct MSG_FDSDK_QUERY_CRUISE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_QUERY_CRUISE_RES;
        static const char* type_name() { return ("MSG_FDSDK_QUERY_CRUISE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_CRUISE> ie_cruise;
    };
    typedef zce_smartptr<MSG_FDSDK_QUERY_CRUISE_RES> MSG_FDSDK_QUERY_CRUISE_RES_PTR;

    struct MSG_FDSDK_SET_CRUISE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_CRUISE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_CRUISE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CRUISE> ie_cruise;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_CRUISE_REQ> MSG_FDSDK_SET_CRUISE_REQ_PTR;

    struct MSG_FDSDK_SET_CRUISE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_CRUISE_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_CRUISE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_CRUISE_RES> MSG_FDSDK_SET_CRUISE_RES_PTR;

    struct MSG_FDSDK_START_CRUISE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_START_CRUISE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_START_CRUISE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_USHORT    ie_cruise_id/*巡航记录id, 0开始*/;
    };
    typedef zce_smartptr<MSG_FDSDK_START_CRUISE_REQ> MSG_FDSDK_START_CRUISE_REQ_PTR;

    struct MSG_FDSDK_START_CRUISE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_START_CRUISE_RES;
        static const char* type_name() { return ("MSG_FDSDK_START_CRUISE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_FDSDK_START_CRUISE_RES> MSG_FDSDK_START_CRUISE_RES_PTR;

    struct MSG_FDSDK_STOP_CRUISE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_STOP_CRUISE_REQ;
        static const char* type_name() { return ("MSG_FDSDK_STOP_CRUISE_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        IE_USHORT    ie_cruise_id/*巡航记录id, 0开始*/;
    };
    typedef zce_smartptr<MSG_FDSDK_STOP_CRUISE_REQ> MSG_FDSDK_STOP_CRUISE_REQ_PTR;

    struct MSG_FDSDK_STOP_CRUISE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_STOP_CRUISE_RES;
        static const char* type_name() { return ("MSG_FDSDK_STOP_CRUISE_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_FDSDK_STOP_CRUISE_RES> MSG_FDSDK_STOP_CRUISE_RES_PTR;

    struct MSG_FDSDK_QUERY_WATCH_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_QUERY_WATCH_REQ;
        static const char* type_name() { return ("MSG_FDSDK_QUERY_WATCH_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
    };
    typedef zce_smartptr<MSG_FDSDK_QUERY_WATCH_REQ> MSG_FDSDK_QUERY_WATCH_REQ_PTR;

    struct MSG_FDSDK_QUERY_WATCH_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_QUERY_WATCH_RES;
        static const char* type_name() { return ("MSG_FDSDK_QUERY_WATCH_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
        std::vector<IE_WATCH> ie_watch;
    };
    typedef zce_smartptr<MSG_FDSDK_QUERY_WATCH_RES> MSG_FDSDK_QUERY_WATCH_RES_PTR;

    struct MSG_FDSDK_SET_WATCH_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_WATCH_REQ;
        static const char* type_name() { return ("MSG_FDSDK_SET_WATCH_REQ");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_WATCH> ie_watch;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_WATCH_REQ> MSG_FDSDK_SET_WATCH_REQ_PTR;

    struct MSG_FDSDK_SET_WATCH_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_SET_WATCH_RES;
        static const char* type_name() { return ("MSG_FDSDK_SET_WATCH_RES");}
        IE_RESULT    ie_result/*操作结果：<0失败，给出失败码；=0成功*/;
    };
    typedef zce_smartptr<MSG_FDSDK_SET_WATCH_RES> MSG_FDSDK_SET_WATCH_RES_PTR;

    struct MSG_FDSDK_GET_MEDIA_CAPACITY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_MEDIA_CAPACITY_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_MEDIA_CAPACITY_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_MEDIA_CAPACITY_REQ> MSG_FDSDK_GET_MEDIA_CAPACITY_REQ_PTR;

    struct MSG_FDSDK_GET_MEDIA_CAPACITY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_MEDIA_CAPACITY_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_MEDIA_CAPACITY_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CHANNEL_MEDIA_CAPACITY> ie_channel_capacity;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_MEDIA_CAPACITY_RES> MSG_FDSDK_GET_MEDIA_CAPACITY_RES_PTR;

    struct MSG_FDSDK_GET_SERIAL_CAPACITY_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_SERIAL_CAPACITY_REQ;
        static const char* type_name() { return ("MSG_FDSDK_GET_SERIAL_CAPACITY_REQ");}
    };
    typedef zce_smartptr<MSG_FDSDK_GET_SERIAL_CAPACITY_REQ> MSG_FDSDK_GET_SERIAL_CAPACITY_REQ_PTR;

    struct MSG_FDSDK_GET_SERIAL_CAPACITY_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDSDK_GET_SERIAL_CAPACITY_RES;
        static const char* type_name() { return ("MSG_FDSDK_GET_SERIAL_CAPACITY_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_SERIAL_CAPACITY> ie_serial_capacity;
    };
    typedef zce_smartptr<MSG_FDSDK_GET_SERIAL_CAPACITY_RES> MSG_FDSDK_GET_SERIAL_CAPACITY_RES_PTR;

    struct MSG_FDCFG_GLOBAL_INFO : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_GLOBAL_INFO;
        static const char* type_name() { return ("MSG_FDCFG_GLOBAL_INFO");}
        std::vector<IE_FDCFG_INFO> ie_info;
        std::vector<IE_FDCFG_INFO_PRODUCT> ie_product;
        std::vector<IE_FDCFG_INFO_VERSION> ie_version;
        std::vector<IE_FDCFG_INFO_GPS> ie_gps;
    };
    typedef zce_smartptr<MSG_FDCFG_GLOBAL_INFO> MSG_FDCFG_GLOBAL_INFO_PTR;

    struct MSG_FDCFG_GLOBAL_NETWORK : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_GLOBAL_NETWORK;
        static const char* type_name() { return ("MSG_FDCFG_GLOBAL_NETWORK");}
        std::vector<IE_FDCFG_NETWORK_STATIC> ie_static;
        std::vector<IE_FDCFG_NETWORK_DHCP> ie_dhcp;
        std::vector<IE_FDCFG_NETWORK_PPPOE> ie_pppoe;
        std::vector<IE_FDCFG_NETWORK_WIFI> ie_wifi;
        std::vector<IE_FDCFG_NETWORK_3G> ie_3g;
    };
    typedef zce_smartptr<MSG_FDCFG_GLOBAL_NETWORK> MSG_FDCFG_GLOBAL_NETWORK_PTR;

    struct MSG_FDCFG_GLOBAL_NVIEW : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_GLOBAL_NVIEW;
        static const char* type_name() { return ("MSG_FDCFG_GLOBAL_NVIEW");}
        std::vector<IE_FDCFG_NVIEW_SERVER> ie_server;
        std::vector<IE_FDCFG_NVIEW_MANAGER> ie_manager;
        std::vector<IE_FDCFG_NVIEW_ADDRESS> ie_address;
    };
    typedef zce_smartptr<MSG_FDCFG_GLOBAL_NVIEW> MSG_FDCFG_GLOBAL_NVIEW_PTR;

    struct MSG_FDCFG_GLOBAL_SDK : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_GLOBAL_SDK;
        static const char* type_name() { return ("MSG_FDCFG_GLOBAL_SDK");}
        std::vector<IE_FDCFG_SDK_USER> ie_user;
    };
    typedef zce_smartptr<MSG_FDCFG_GLOBAL_SDK> MSG_FDCFG_GLOBAL_SDK_PTR;

    struct MSG_FDCFG_GLOBAL_NTP : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_GLOBAL_NTP;
        static const char* type_name() { return ("MSG_FDCFG_GLOBAL_NTP");}
        std::vector<IE_FDCFG_NTP> ie_ntp;
    };
    typedef zce_smartptr<MSG_FDCFG_GLOBAL_NTP> MSG_FDCFG_GLOBAL_NTP_PTR;

    struct MSG_FDCFG_AUDIO_IN : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_AUDIO_IN;
        static const char* type_name() { return ("MSG_FDCFG_AUDIO_IN");}
        std::vector<IE_FDCFG_AUDIO_IN> ie_audio_in;
    };
    typedef zce_smartptr<MSG_FDCFG_AUDIO_IN> MSG_FDCFG_AUDIO_IN_PTR;

    struct MSG_FDCFG_AUDIO_OUT : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_AUDIO_OUT;
        static const char* type_name() { return ("MSG_FDCFG_AUDIO_OUT");}
        std::vector<IE_FDCFG_AUDIO_OUT> ie_audio_out;
    };
    typedef zce_smartptr<MSG_FDCFG_AUDIO_OUT> MSG_FDCFG_AUDIO_OUT_PTR;

    struct MSG_FDCFG_VIDEO_IN : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN");}
        std::vector<IE_FDCFG_VIDEO_IN> ie_video_in;
        std::vector<IE_VIDEOIN_CHANNEL> ie_videoin_channel;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN> MSG_FDCFG_VIDEO_IN_PTR;

    struct MSG_FDCFG_VIDEO_IN_MOSAIC : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_MOSAIC;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_MOSAIC");}
        std::vector<IE_FDCFG_VIDEO_IN_MOSAIC> ie_mosaic;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_MOSAIC> MSG_FDCFG_VIDEO_IN_MOSAIC_PTR;

    struct MSG_FDCFG_VIDEO_IN_MOTION : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_MOTION;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_MOTION");}
        std::vector<IE_FDCFG_VIDEO_IN_MOTION> ie_motion;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_MOTION> MSG_FDCFG_VIDEO_IN_MOTION_PTR;

    struct MSG_FDCFG_VIDEO_OUT : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_OUT;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_OUT");}
        std::vector<IE_FDCFG_VIDEO_OUT> ie_video_out;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_OUT> MSG_FDCFG_VIDEO_OUT_PTR;

    struct MSG_FDCFG_ALARM_IN : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_ALARM_IN;
        static const char* type_name() { return ("MSG_FDCFG_ALARM_IN");}
        std::vector<IE_FDCFG_ALARM_IN> ie_alarm_in;
    };
    typedef zce_smartptr<MSG_FDCFG_ALARM_IN> MSG_FDCFG_ALARM_IN_PTR;

    struct MSG_FDCFG_ALARM_OUT : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_ALARM_OUT;
        static const char* type_name() { return ("MSG_FDCFG_ALARM_OUT");}
        std::vector<IE_FDCFG_ALARM_OUT> ie_alarm_out;
    };
    typedef zce_smartptr<MSG_FDCFG_ALARM_OUT> MSG_FDCFG_ALARM_OUT_PTR;

    struct MSG_FDCFG_ALARM_DEFENCE : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_ALARM_DEFENCE;
        static const char* type_name() { return ("MSG_FDCFG_ALARM_DEFENCE");}
        std::vector<IE_FDCFG_ALARM_DEFENCE> ie_defence;
    };
    typedef zce_smartptr<MSG_FDCFG_ALARM_DEFENCE> MSG_FDCFG_ALARM_DEFENCE_PTR;

    struct MSG_FDCFG_SERIAL : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_SERIAL;
        static const char* type_name() { return ("MSG_FDCFG_SERIAL");}
        std::vector<IE_FDCFG_SERIAL> ie_serial;
    };
    typedef zce_smartptr<MSG_FDCFG_SERIAL> MSG_FDCFG_SERIAL_PTR;

    struct MSG_FDCFG_CAMERA_PRESET_INFO : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_CAMERA_PRESET_INFO;
        static const char* type_name() { return ("MSG_FDCFG_CAMERA_PRESET_INFO");}
        std::vector<IE_CAMERA_PRESET_CONFIG> ie_preset/*预置点信息*/;
    };
    typedef zce_smartptr<MSG_FDCFG_CAMERA_PRESET_INFO> MSG_FDCFG_CAMERA_PRESET_INFO_PTR;

    struct MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL");}
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_CONTROL> ie_camera_ctrl;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL> MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL_PTR;

    struct MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL2 : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL2;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL2");}
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_CONTROL2> ie_camera_ctrl2;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL2> MSG_FDCFG_VIDEO_IN_CAMERA_CONTROL2_PTR;

    struct MSG_FDCFG_VIDEO_IN_CAMERA_GAIN_MAP : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_CAMERA_GAIN_MAP;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_CAMERA_GAIN_MAP");}
        std::vector<IE_FDCFG_VIDEO_IN_CAMERA_MAP> ie_camera_gain_map;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_CAMERA_GAIN_MAP> MSG_FDCFG_VIDEO_IN_CAMERA_GAIN_MAP_PTR;

    struct MSG_FDCFG_VIDEO_IN_CAPTURE : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_CAPTURE;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_CAPTURE");}
        std::vector<IE_FDCFG_VIDEO_IN_CAPTURE> ie_capture;
        std::vector<IE_FDCFG_VIDEO_IN_CAPTURE_V2> ie_capture_v2;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_CAPTURE> MSG_FDCFG_VIDEO_IN_CAPTURE_PTR;

    struct MSG_FDCFG_VIDEO_IN_CAPTURE_OSD : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_CAPTURE_OSD;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_CAPTURE_OSD");}
        std::vector<IE_FDCFG_OSD_FORMAT> ie_osd_format;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_CAPTURE_OSD> MSG_FDCFG_VIDEO_IN_CAPTURE_OSD_PTR;

    struct MSG_FDCFG_IO_LIGHT : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_IO_LIGHT;
        static const char* type_name() { return ("MSG_FDCFG_IO_LIGHT");}
        std::vector<IE_FDCFG_IO_LIGHT> ie_io_light;
    };
    typedef zce_smartptr<MSG_FDCFG_IO_LIGHT> MSG_FDCFG_IO_LIGHT_PTR;

    struct MSG_FDCFG_VIDEO_IN_PERIMETER_DETECT : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_PERIMETER_DETECT;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_PERIMETER_DETECT");}
        std::vector<IE_FDCFG_VIDEO_IN_PERIMETER_DETECT> ie_perimeter;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_PERIMETER_DETECT> MSG_FDCFG_VIDEO_IN_PERIMETER_DETECT_PTR;

    struct MSG_FDCFG_VIDEO_IN_FACE : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_VIDEO_IN_FACE;
        static const char* type_name() { return ("MSG_FDCFG_VIDEO_IN_FACE");}
        std::vector<IE_FDCFG_VIDEO_IN_FACE> ie_face;
    };
    typedef zce_smartptr<MSG_FDCFG_VIDEO_IN_FACE> MSG_FDCFG_VIDEO_IN_FACE_PTR;

    struct MSG_FDCFG_RECORD_NAS_INFO : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_RECORD_NAS_INFO;
        static const char* type_name() { return ("MSG_FDCFG_RECORD_NAS_INFO");}
        std::vector<IE_astring64> ie_url/*nas URL*/;
    };
    typedef zce_smartptr<MSG_FDCFG_RECORD_NAS_INFO> MSG_FDCFG_RECORD_NAS_INFO_PTR;

    struct MSG_FDCFG_RECORD_REPLAY_SERVER : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_RECORD_REPLAY_SERVER;
        static const char* type_name() { return ("MSG_FDCFG_RECORD_REPLAY_SERVER");}
        std::vector<IE_astring64> rtsp_url/*rtsp URL*/;
        std::vector<IE_astring254> http_url/*http URL*/;
    };
    typedef zce_smartptr<MSG_FDCFG_RECORD_REPLAY_SERVER> MSG_FDCFG_RECORD_REPLAY_SERVER_PTR;

    struct MSG_FDCFG_RECORD_TIME : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_RECORD_TIME;
        static const char* type_name() { return ("MSG_FDCFG_RECORD_TIME");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_UCHAR> ie_type/*存储类型: 0前端; 1中心; 不填该IE默认为0*/;
        std::vector<IE_USHORT> ie_store_mode/*录像策略：0xfffa:满就删；0xfffb:满停; 其他：保存天数*/;
        std::vector<IE_TIME_DETAIL_LIST> ie_list/*录像时间表，可能有多个，视具体情况*/;
        std::vector<IE_UCHAR> ie_qos;
    };
    typedef zce_smartptr<MSG_FDCFG_RECORD_TIME> MSG_FDCFG_RECORD_TIME_PTR;

    struct MSG_FDCFG_MEDIA_CAPACITY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_MEDIA_CAPACITY;
        static const char* type_name() { return ("MSG_FDCFG_MEDIA_CAPACITY");}
        std::vector<IE_CHANNEL_MEDIA_CAPACITY> ie_channel_capacity;
    };
    typedef zce_smartptr<MSG_FDCFG_MEDIA_CAPACITY> MSG_FDCFG_MEDIA_CAPACITY_PTR;

    struct MSG_FDCFG_SERIAL_CAPACITY : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_SERIAL_CAPACITY;
        static const char* type_name() { return ("MSG_FDCFG_SERIAL_CAPACITY");}
        std::vector<IE_SERIAL_CAPACITY> ie_serial_capacity;
    };
    typedef zce_smartptr<MSG_FDCFG_SERIAL_CAPACITY> MSG_FDCFG_SERIAL_CAPACITY_PTR;

    struct MSG_FDCFG_CRUISE : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_CRUISE;
        static const char* type_name() { return ("MSG_FDCFG_CRUISE");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_CRUISE> ie_cruise;
    };
    typedef zce_smartptr<MSG_FDCFG_CRUISE> MSG_FDCFG_CRUISE_PTR;

    struct MSG_FDCFG_WATCH : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_WATCH;
        static const char* type_name() { return ("MSG_FDCFG_WATCH");}
        IE_CHANNEL_ID    ie_channel_id;
        std::vector<IE_WATCH> ie_watch;
    };
    typedef zce_smartptr<MSG_FDCFG_WATCH> MSG_FDCFG_WATCH_PTR;

    struct MSG_UA_WRITE_LOG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_WRITE_LOG_REQ;
        static const char* type_name() { return ("MSG_UA_WRITE_LOG_REQ");}
        IE_astring64    ie_action/*动作*/;
        IE_astring64    ie_object/*目标*/;
        IE_astring254    ie_detai/*详情*/;
    };
    typedef zce_smartptr<MSG_UA_WRITE_LOG_REQ> MSG_UA_WRITE_LOG_REQ_PTR;

    struct MSG_UA_WRITE_LOG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_WRITE_LOG_RES;
        static const char* type_name() { return ("MSG_UA_WRITE_LOG_RES");}
        IE_RESULT    ie_result;
    };
    typedef zce_smartptr<MSG_UA_WRITE_LOG_RES> MSG_UA_WRITE_LOG_RES_PTR;

    struct MSG_FD_ACTION_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_ACTION_REQ;
        static const char* type_name() { return ("MSG_FD_ACTION_REQ");}
        IE_UCHAR    ie_uchar/*操作类型，0=增加设备，1=删除设备(==停用设备，不是真正的删除)，2=修改直连数，3=修改通道名字，4=修改通道状态，5=修改通道类型，6=修改通道flag，7=修改通道录像保存时间（秒），8=查询所有设备所有通道，9=设备强制下线，10=修改设备状态，11=修改设备除fdid以外的域，12=修改通道除fdid和channelno以外的域，13=修改设备IP, 14=修改onvif参数*/;
        std::vector<IE_FD_ACTION> ie_fd_action/*设备*/;
        std::vector<IE_CHANNEL_ACTION> ie_channel_action/*通道*/;
        std::vector<IE_FD_ACTION_V2> ie_fd_action_v2;
    };
    typedef zce_smartptr<MSG_FD_ACTION_REQ> MSG_FD_ACTION_REQ_PTR;

    struct MSG_FD_ACTION_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_ACTION_RES;
        static const char* type_name() { return ("MSG_FD_ACTION_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_FD_ACTION> ie_fd_action/*设备*/;
        std::vector<IE_CHANNEL_ACTION> ie_channel_action/*通道*/;
        std::vector<IE_FD_ACTION_V2> ie_fd_action_v2;
        std::vector<IE_FD_ACTION_V3> ie_fd_action_v3;
    };
    typedef zce_smartptr<MSG_FD_ACTION_RES> MSG_FD_ACTION_RES_PTR;

    struct MSG_UA_ACTION_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_ACTION_REQ;
        static const char* type_name() { return ("MSG_UA_ACTION_REQ");}
        IE_UCHAR    ie_uchar/*操作类型，0=查询所有用户，1=保留，2=修改描述*/;
        std::vector<IE_UA_ACTION> ie_ua_action/*用户*/;
    };
    typedef zce_smartptr<MSG_UA_ACTION_REQ> MSG_UA_ACTION_REQ_PTR;

    struct MSG_UA_ACTION_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_UA_ACTION_RES;
        static const char* type_name() { return ("MSG_UA_ACTION_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_UA_ACTION> ie_ua_action/*用户*/;
    };
    typedef zce_smartptr<MSG_UA_ACTION_RES> MSG_UA_ACTION_RES_PTR;

    struct IE_AUTOFIND
    {
        const static unsigned short IE_TYPE = E_IE_AUTOFIND;
        IE_AUTOFIND() { };
        zce_astring szId/*序列号, 以"onvif"打头表示ONVIF设备，否则就是公司私有协议发现的设备*/;
        zce_astring szType/*GE DVR DVS等*/;
        zce_astring szDevName/*设备名称*/;
        zce_astring szDevVer/*版本信息*/;
        zce_astring szMac/*MAC地址*/;
        zce_astring szIp/*IP地址*/;
        zce_astring szPort/*端口*/;
        zce_astring szNetmask/*掩码*/;
        zce_astring szGateway/*网关*/;
    };
    struct MSG_FD_AUTOFIND_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_AUTOFIND_REQ;
        static const char* type_name() { return ("MSG_FD_AUTOFIND_REQ");}
        IE_UCHAR    ie_uchar/*0=查询*/;
    };
    typedef zce_smartptr<MSG_FD_AUTOFIND_REQ> MSG_FD_AUTOFIND_REQ_PTR;

    struct MSG_FD_AUTOFIND_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_AUTOFIND_RES;
        static const char* type_name() { return ("MSG_FD_AUTOFIND_RES");}
        IE_RESULT    ie_result/*>=0 成功 */;
        std::vector<IE_AUTOFIND> ie_autofind/*操作结果*/;
    };
    typedef zce_smartptr<MSG_FD_AUTOFIND_RES> MSG_FD_AUTOFIND_RES_PTR;

    struct IE_FDCHANNEL_INFO
    {
        const static unsigned short IE_TYPE = E_IE_FDCHANNEL_INFO;

        IE_FDCHANNEL_INFO()
        :is_valid(0)
        ,res(0)
        ,channel_number(0)
        ,protocol(0)
        ,login_port(0)
        {
        }

        zce_byte    is_valid/*是否已配置 0表示无效..1表示有效*/;
        zce_byte    res/*字节对齐*/;
        zce_uint16    channel_number/*数据源的通道号.(4路DVR.就是1-4).不是本身的通道号*/;
        zce_uint16    protocol/*协议..0表示GEP..1.表示ONVIF*/;
        zce_uint16    login_port/*端口号..网络字节序*/;
        zce_astring login_ip/*字符串..可以是192.168.1.1这样的点分式,也可以是www.test.test这样的域名.或者IPV6(还不支持)*/;
        zce_astring login_user/*登录的用户名*/;
        zce_astring login_pwd/*登录密码*/;
    };
    struct MSG_FD_GETCHANNEL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GETCHANNEL_REQ;
        static const char* type_name() { return ("MSG_FD_GETCHANNEL_REQ");}
        IE_UCHAR    ie_uchar/*通道号 从1开始*/;
    };
    typedef zce_smartptr<MSG_FD_GETCHANNEL_REQ> MSG_FD_GETCHANNEL_REQ_PTR;

    struct MSG_FD_GETCHANNEL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GETCHANNEL_RES;
        static const char* type_name() { return ("MSG_FD_GETCHANNEL_RES");}
        IE_RESULT    ie_result/*操作类型，>=0 成功 */;
        IE_UCHAR    ie_channel/*通道号 从1开始*/;
        IE_FDCHANNEL_INFO    ie_channelinfo;
    };
    typedef zce_smartptr<MSG_FD_GETCHANNEL_RES> MSG_FD_GETCHANNEL_RES_PTR;

    struct MSG_FD_SETCHANNEL_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SETCHANNEL_REQ;
        static const char* type_name() { return ("MSG_FD_SETCHANNEL_REQ");}
        IE_UCHAR    ie_channel/*通道号 从1开始*/;
        IE_FDCHANNEL_INFO    ie_channelinfo;
    };
    typedef zce_smartptr<MSG_FD_SETCHANNEL_REQ> MSG_FD_SETCHANNEL_REQ_PTR;

    struct MSG_FD_SETCHANNEL_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SETCHANNEL_RES;
        static const char* type_name() { return ("MSG_FD_SETCHANNEL_RES");}
        IE_RESULT    ie_result/*操作类型，>=0 成功 */;
    };
    typedef zce_smartptr<MSG_FD_SETCHANNEL_RES> MSG_FD_SETCHANNEL_RES_PTR;

    struct HDDDETAIL_INFO
    {

        HDDDETAIL_INFO()
        :total_size(0)
        ,unuse_size(0)
        ,status(0)
        {
        }

        zce_astring name/*硬盘名称*/;
        zce_uint64    total_size/*硬盘大小（MB）*/;
        zce_uint64    unuse_size/*可用大小（MB）*/;
        zce_uint32    status/*硬盘状态 0:表示工作正常 1:表示未格式化,2:格式化中,3:表示使用中*/;
    };
    struct REMOVABLE_STORAGE
    {

        REMOVABLE_STORAGE()
        :picture_storage_percent(0)
        ,reserve_storage_percent(0)
        ,record_enable(0)
        ,record_full_policy(0)
        ,picture_full_policy(0)
        {
        }

        std::vector<HDDDETAIL_INFO> storages;
        zce_uint32    picture_storage_percent/*0-100 图片容量占比*/;
        zce_uint32    reserve_storage_percent/*设备预留百分比..预留空间大小..*/;
        zce_astring priority_storage_name/*优先使用那个设备的编号*/;
        zce_uint32    record_enable/*是否启用录像*/;
        zce_uint32    record_full_policy/*录像满删策略*/;
        zce_uint32    picture_full_policy/*图片满删策率*/;
    };
    struct IE_HDDDETAIL_INFO
    {
        const static unsigned short IE_TYPE = E_IE_HDDDETAIL_INFO;
        IE_HDDDETAIL_INFO() { };
        HDDDETAIL_INFO    hddinfo/*硬盘具体信息*/;
    };
    struct IE_HDDINFO
    {
        const static unsigned short IE_TYPE = E_IE_HDDINFO;

        IE_HDDINFO()
        :hdd_num(0)
        {
        }

        zce_uint32    hdd_num/*硬盘数目*/;
        std::vector<HDDDETAIL_INFO> hddinfo/*硬盘具体信息*/;
    };
    struct IE_REMOVABLE_STORAGE
    {
        const static unsigned short IE_TYPE = E_IE_REMOVABLE_STORAGE;
        IE_REMOVABLE_STORAGE() { };
        REMOVABLE_STORAGE    storgeinfo/*可移动存储信息*/;
    };
    struct MSG_FDCFG_REMOVABLE_STORAGE : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_REMOVABLE_STORAGE;
        static const char* type_name() { return ("MSG_FDCFG_REMOVABLE_STORAGE");}
        IE_REMOVABLE_STORAGE    ie_removable_storage/*可移动存储信息*/;
    };
    typedef zce_smartptr<MSG_FDCFG_REMOVABLE_STORAGE> MSG_FDCFG_REMOVABLE_STORAGE_PTR;

    struct MSG_FD_GETHDDINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GETHDDINFO_REQ;
        static const char* type_name() { return ("MSG_FD_GETHDDINFO_REQ");}
        IE_UCHAR    ie_uchar/*0 获取*/;
    };
    typedef zce_smartptr<MSG_FD_GETHDDINFO_REQ> MSG_FD_GETHDDINFO_REQ_PTR;

    struct MSG_FD_GETHDDINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GETHDDINFO_RES;
        static const char* type_name() { return ("MSG_FD_GETHDDINFO_RES");}
        IE_RESULT    ie_result/*操作类型，0=成功*/;
        IE_HDDINFO    ie_hddinfo;
        std::vector<IE_REMOVABLE_STORAGE> ie_removable_storage;
    };
    typedef zce_smartptr<MSG_FD_GETHDDINFO_RES> MSG_FD_GETHDDINFO_RES_PTR;

    struct MSG_FD_SETHDDINFO_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SETHDDINFO_REQ;
        static const char* type_name() { return ("MSG_FD_SETHDDINFO_REQ");}
        IE_REMOVABLE_STORAGE    ie_removable_storage;
    };
    typedef zce_smartptr<MSG_FD_SETHDDINFO_REQ> MSG_FD_SETHDDINFO_REQ_PTR;

    struct MSG_FD_SETHDDINFO_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SETHDDINFO_RES;
        static const char* type_name() { return ("MSG_FD_SETHDDINFO_RES");}
        IE_RESULT    ie_result/*操作类型，0=成功*/;
    };
    typedef zce_smartptr<MSG_FD_SETHDDINFO_RES> MSG_FD_SETHDDINFO_RES_PTR;

    struct MSG_FD_FORMATHDD_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_FORMATHDD_REQ;
        static const char* type_name() { return ("MSG_FD_FORMATHDD_REQ");}
        IE_astring254    ie_hddname;
    };
    typedef zce_smartptr<MSG_FD_FORMATHDD_REQ> MSG_FD_FORMATHDD_REQ_PTR;

    struct MSG_FD_FORMATHDD_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_FORMATHDD_RES;
        static const char* type_name() { return ("MSG_FD_FORMATHDD_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
        IE_astring254    ie_hddname;
    };
    typedef zce_smartptr<MSG_FD_FORMATHDD_RES> MSG_FD_FORMATHDD_RES_PTR;

    struct MSG_FD_GETFORMATHDDSTATUS_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GETFORMATHDDSTATUS_REQ;
        static const char* type_name() { return ("MSG_FD_GETFORMATHDDSTATUS_REQ");}
        IE_astring254    ie_hddname;
    };
    typedef zce_smartptr<MSG_FD_GETFORMATHDDSTATUS_REQ> MSG_FD_GETFORMATHDDSTATUS_REQ_PTR;

    struct MSG_FD_GETFORMATHDDSTATUS_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GETFORMATHDDSTATUS_RES;
        static const char* type_name() { return ("MSG_FD_GETFORMATHDDSTATUS_RES");}
        IE_RESULT    ie_result/*100表示成功 0-100表示进度 <0表示失败*/;
        IE_astring254    ie_hddname;
    };
    typedef zce_smartptr<MSG_FD_GETFORMATHDDSTATUS_RES> MSG_FD_GETFORMATHDDSTATUS_RES_PTR;

    struct IE_FDCFG_FD_CHANNEL
    {
        const static unsigned short IE_TYPE = E_IE_FDCFG_FD_CHANNEL;

        IE_FDCFG_FD_CHANNEL()
        :id(0)
        {
        }

        zce_uint16    id/*通道号，从1开始*/;
        IE_FDCHANNEL_INFO    channel;
    };
    struct MSG_FDCFG_FD_CHANNEL : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_FD_CHANNEL;
        static const char* type_name() { return ("MSG_FDCFG_FD_CHANNEL");}
        std::vector<IE_FDCFG_FD_CHANNEL> ie_fdchannel;
    };
    typedef zce_smartptr<MSG_FDCFG_FD_CHANNEL> MSG_FDCFG_FD_CHANNEL_PTR;

    struct IE_INTELLIGENT_ALGORITHMS_CFG
    {
        const static unsigned short IE_TYPE = E_IE_INTELLIGENT_ALGORITHMS_CFG;
        IE_INTELLIGENT_ALGORITHMS_CFG() { };
        INTELLIGENT_ALGORITHMS_CFG    cfg;
    };
    struct MSG_FDCFG_INTELLIGENT_ALGORITHMS_CFG : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_INTELLIGENT_ALGORITHMS_CFG;
        static const char* type_name() { return ("MSG_FDCFG_INTELLIGENT_ALGORITHMS_CFG");}
        IE_INTELLIGENT_ALGORITHMS_CFG    ie_algorithms_cfg;
    };
    typedef zce_smartptr<MSG_FDCFG_INTELLIGENT_ALGORITHMS_CFG> MSG_FDCFG_INTELLIGENT_ALGORITHMS_CFG_PTR;

    struct MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_REQ;
        static const char* type_name() { return ("MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_REQ");}
    };
    typedef zce_smartptr<MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_REQ> MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_REQ_PTR;

    struct MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_RES;
        static const char* type_name() { return ("MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
        IE_INTELLIGENT_ALGORITHMS_CFG    ie_algorithms_cfg;
    };
    typedef zce_smartptr<MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_RES> MSG_FD_GET_INTELLIGENT_ALGORITHMS_CFG_RES_PTR;

    struct MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_REQ;
        static const char* type_name() { return ("MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_REQ");}
        IE_INTELLIGENT_ALGORITHMS_CFG    ie_algorithms_cfg;
    };
    typedef zce_smartptr<MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_REQ> MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_REQ_PTR;

    struct MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_RES;
        static const char* type_name() { return ("MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
    };
    typedef zce_smartptr<MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_RES> MSG_FD_SET_INTELLIGENT_ALGORITHMS_CFG_RES_PTR;

    struct IE_PICTURE_MERGE_TYPE
    {
        const static unsigned short IE_TYPE = E_IE_PICTURE_MERGE_TYPE;

        IE_PICTURE_MERGE_TYPE()
        :ability(0)
        {
        }

        PICTURE_MERGE_TYPE    type;
        std::vector<zce_byte> ability/*合成能力集*/;
    };
    struct MSG_FDCFG_PICTURE_MERGE_TYPE : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_PICTURE_MERGE_TYPE;
        static const char* type_name() { return ("MSG_FDCFG_PICTURE_MERGE_TYPE");}
        IE_PICTURE_MERGE_TYPE    ie_picture_merge;
    };
    typedef zce_smartptr<MSG_FDCFG_PICTURE_MERGE_TYPE> MSG_FDCFG_PICTURE_MERGE_TYPE_PTR;

    struct MSG_FD_GET_PICTURE_MERGE_TYPE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GET_PICTURE_MERGE_TYPE_REQ;
        static const char* type_name() { return ("MSG_FD_GET_PICTURE_MERGE_TYPE_REQ");}
    };
    typedef zce_smartptr<MSG_FD_GET_PICTURE_MERGE_TYPE_REQ> MSG_FD_GET_PICTURE_MERGE_TYPE_REQ_PTR;

    struct MSG_FD_GET_PICTURE_MERGE_TYPE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GET_PICTURE_MERGE_TYPE_RES;
        static const char* type_name() { return ("MSG_FD_GET_PICTURE_MERGE_TYPE_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
        IE_PICTURE_MERGE_TYPE    ie_picture_merge;
    };
    typedef zce_smartptr<MSG_FD_GET_PICTURE_MERGE_TYPE_RES> MSG_FD_GET_PICTURE_MERGE_TYPE_RES_PTR;

    struct MSG_FD_SET_PICTURE_MERGE_TYPE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SET_PICTURE_MERGE_TYPE_REQ;
        static const char* type_name() { return ("MSG_FD_SET_PICTURE_MERGE_TYPE_REQ");}
        IE_PICTURE_MERGE_TYPE    ie_picture_merge;
    };
    typedef zce_smartptr<MSG_FD_SET_PICTURE_MERGE_TYPE_REQ> MSG_FD_SET_PICTURE_MERGE_TYPE_REQ_PTR;

    struct MSG_FD_SET_PICTURE_MERGE_TYPE_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SET_PICTURE_MERGE_TYPE_RES;
        static const char* type_name() { return ("MSG_FD_SET_PICTURE_MERGE_TYPE_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
    };
    typedef zce_smartptr<MSG_FD_SET_PICTURE_MERGE_TYPE_RES> MSG_FD_SET_PICTURE_MERGE_TYPE_RES_PTR;

    struct IE_CONFIG_PARAM
    {
        const static unsigned short IE_TYPE = E_IE_CONFIG_PARAM;
        IE_CONFIG_PARAM() { };
        CONFIG_PARAM    param;
    };
    struct MSG_FDCFG_CONFIG_PARAM : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FDCFG_CONFIG_PARAM;
        static const char* type_name() { return ("MSG_FDCFG_CONFIG_PARAM");}
        IE_CONFIG_PARAM    ie_config_param;
    };
    typedef zce_smartptr<MSG_FDCFG_CONFIG_PARAM> MSG_FDCFG_CONFIG_PARAM_PTR;

    struct MSG_FD_GET_CONFIG_PARAM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GET_CONFIG_PARAM_REQ;
        static const char* type_name() { return ("MSG_FD_GET_CONFIG_PARAM_REQ");}
        IE_CONFIG_PARAM    ie_config_param;
    };
    typedef zce_smartptr<MSG_FD_GET_CONFIG_PARAM_REQ> MSG_FD_GET_CONFIG_PARAM_REQ_PTR;

    struct MSG_FD_GET_CONFIG_PARAM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_GET_CONFIG_PARAM_RES;
        static const char* type_name() { return ("MSG_FD_GET_CONFIG_PARAM_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
        IE_CONFIG_PARAM    ie_config_param;
    };
    typedef zce_smartptr<MSG_FD_GET_CONFIG_PARAM_RES> MSG_FD_GET_CONFIG_PARAM_RES_PTR;

    struct MSG_FD_SET_CONFIG_PARAM_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SET_CONFIG_PARAM_REQ;
        static const char* type_name() { return ("MSG_FD_SET_CONFIG_PARAM_REQ");}
        IE_CONFIG_PARAM    ie_config_param;
    };
    typedef zce_smartptr<MSG_FD_SET_CONFIG_PARAM_REQ> MSG_FD_SET_CONFIG_PARAM_REQ_PTR;

    struct MSG_FD_SET_CONFIG_PARAM_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_FD_SET_CONFIG_PARAM_RES;
        static const char* type_name() { return ("MSG_FD_SET_CONFIG_PARAM_RES");}
        IE_RESULT    ie_result/*>=0表示成功 <0表示失败*/;
    };
    typedef zce_smartptr<MSG_FD_SET_CONFIG_PARAM_RES> MSG_FD_SET_CONFIG_PARAM_RES_PTR;

} //namespace gep
#endif //_zdsec_proto_h_
